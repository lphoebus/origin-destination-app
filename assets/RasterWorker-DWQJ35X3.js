import{b8 as S,b9 as x,bb as y,bN as l,a$ as h,e$ as O}from"./index-Bkom2Sdc.js";import{c as i}from"./PixelBlock-CD7TNHcL.js";import{k,R as N,O as g,y as B}from"./RasterSymbolizer-BQJRaC-o.js";import{f as b,j as P,u as J,W as w,E as z,T as v,N as T,D,a as $}from"./vectorFieldUtils-DYAo00Wy.js";import{T as F}from"./rasterFunctionHelper-y-UIL_9j.js";import{j,r as I}from"./rasterProjectionHelper-De1k5S3R.js";import{t as L,u as E,n as R}from"./PolynomialTransform-CFfzRXDt.js";import{c as G}from"./dataUtils-D1x3Zy4l.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./clipUtils-Dy_nqovQ.js";var p;let m=p=class extends L{constructor(){super(...arguments),this.type="identity"}clone(){return new p}};S([x({IdentityXform:"identity"})],m.prototype,"type",void 0),m=p=S([y("esri.layers.support.rasterTransforms.IdentityTransform")],m);const X={GCSShiftXform:R,IdentityXform:m,PolynomialXform:E};function A(n){if(!n?.type)return null;const r=X[n?.type];if(r){const e=new r;return e.read(n),e}return null}function a(n){if(!n)return{result:null,transferList:[]};const{pixelBlock:t,transferList:r}=n.getTransferableObject();return{result:t,transferList:r}}class Y{convertVectorFieldData(t){const r=i.fromJSON(t.pixelBlock),e=a(b(r,t.type));return Promise.resolve(e)}convertPixelBlockToFeatures(t){const r=P({pixelBlock:i.fromJSON(t.pixelBlock),extent:l.fromJSON(t.extent),fieldNames:t.fieldNames,skipFactor:t.skipFactor,skipSpatialReference:!0,pixelIdOffset:t.pixelIdOffset,imageRowSize:t.imageRowSize});return Promise.resolve(r)}computeStatisticsHistograms(t){const r=i.fromJSON(t.pixelBlock),e=k(r,{histogramSize:t.histogramSize,includeSkewnessKurtosis:t.includeSkewnessKurtosis});return Promise.resolve(e)}async decode(t){return a(await N(t.data,t.options))}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?l.fromJSON(t.extent):null;const r=a(this.symbolizer.symbolize(t));return Promise.resolve(r)}highlightPixels(t){const r=i.fromJSON(t.pixelBlock),e=i.fromJSON(t.renderedPixelBlock);return J(r,e,t.highlightOptions),Promise.resolve(e.toJSON())}async updateSymbolizer(t){this.symbolizer=g.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=F(t.rasterFunctionJSON)}async process(t){return a(this.rasterFunction.process({extent:l.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?i.fromJSON(r):null),primaryPixelSizes:t.primaryPixelSizes?.map(r=>r!=null?h.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds}))}stretch(t){const r=a(this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams));return Promise.resolve(r)}estimateStatisticsHistograms(t){const r=B(i.fromJSON(t.srcPixelBlock));return Promise.resolve(r)}split(t){const r=w(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1),e=[];let s;return r&&(s=new Map,r.forEach((o,f)=>{if(o){const{pixelBlock:u,transferList:c}=o.getTransferableObject();s.set(f,u),c.forEach(d=>{e.includes(d)||e.push(d)})}})),Promise.resolve({result:s,transferList:e})}clipTile(t){const r=i.fromJSON(t.pixelBlock),e=a(z({...t,pixelBlock:r}));return Promise.resolve(e)}async mosaicAndTransform(t){const r=t.srcPixelBlocks.map(c=>c?new i(c):null),e=v(r,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let s,o=e;t.coefs&&(o=T(e,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(s=D(t.destDimension,t.gcsGrid),o=$(o,t.isUV?"vector-uv":"vector-magdir",s));const{result:f,transferList:u}=a(o);return{result:{pixelBlock:f,localNorthDirections:s},transferList:u}}async createFlowMesh(t,r){const e={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:s,indexData:o}=await G(t.meshType,t.simulationSettings,e,r.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(t){const r=l.fromJSON(t.projectedExtent),e=l.fromJSON(t.srcBufferExtent);let s=null;t.datumTransformationSteps?.length&&(s=new O({steps:t.datumTransformationSteps})),await j();const o=t.rasterTransform?A(t.rasterTransform):null;return I({...t,projectedExtent:r,srcBufferExtent:e,datumTransformation:s,rasterTransform:o})}}export{Y as default};
