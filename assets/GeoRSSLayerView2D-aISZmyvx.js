import{kY as u,kZ as b,bE as a,f$ as p,f8 as S,cn as V,fY as $,fX as _,k_ as l,b8 as v,bb as T}from"./index-Bkom2Sdc.js";import{b as M}from"./LayerView2D-30FU1rxw.js";import{i as C}from"./GraphicContainer-D9ivYpIc.js";import{O}from"./GraphicsView2D-Cudol1Qm.js";import{d as k}from"./LayerView-dsZyO1fP.js";import"./Container-BUOpKgJS.js";import"./layerViewUtils-CKJQaxCu.js";import"./AGraphicContainer-qU2ctLWU.js";import"./TechniqueInstance-CTCRZ9BY.js";import"./UpdateTracking2D-BAgVtftM.js";import"./Utils-BPwjYj-m.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-EJw5XZ2C.js";import"./BufferObject-CTARDp2h.js";import"./TileContainer-D8e9urlk.js";import"./WGLContainer-C7Fkis0r.js";import"./ProgramTemplate-D6UgULFC.js";import"./VertexArrayObject-BCHRBpsS.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-CsbdF0n4.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-nye7QKUe.js";import"./FeatureCommandQueue-BwfXXGpL.js";import"./GraphShaderModule-DIYQfoJR.js";import"./ShaderBuilder-DRCHXYJf.js";import"./utils-b1TOb6Y0.js";import"./constants-BBnGEY1d.js";import"./QueueProcessor-DqRCcjoo.js";import"./AttributeStore-CS019e7y.js";import"./FeatureStoreQueryAdapter-xTIuWByO.js";import"./queryUtils-CyiURm7K.js";import"./timeSupport-CXh2VZCm.js";import"./FeatureMetadata-gkZZdSVQ.js";import"./normalizeUtilsSync-BY_tIBIr.js";import"./densifyCurvedGeometry-z0hd02Ge.js";import"./dehydratedFeatures-Bgz_yYu_.js";const q=Symbol("isGeoRSSGraphicOrigin");var c;class x extends u{get[(c=q,b)](){return this.layer}constructor(r){super(),this[c]=!0,this.type="geo-rss",this.layer=r}get id(){return this.layer.id}}let m=class extends M(k){constructor(){super(...arguments),this._graphicsViewMap={},this.graphicsViews=[]}async hitTest(i,r){if(!this.graphicsViews.length)return null;const h=this.layer;return this.graphicsViews.reverse().flatMap(e=>e.hitTest(i)).map(e=>({type:"graphic",graphic:e,layer:h,mapPoint:i}))}update(i){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(i)}attach(){this.addAttachHandles([a(()=>this.layer?.featureCollections,i=>{this._clear();const{layer:r}=this,h=new x(this.layer);for(const{popupInfo:e,featureSet:g,layerDefinition:f}of i){const t=S.fromJSON(g),y=new V(t.features),w=e?$.fromJSON(e):null;y.forEach(o=>{o.layer=r,o.sourceLayer=r,o.popupTemplate=w,o.origin=h});const d=f.drawingInfo,s=_(d.renderer),n=new O({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:y,renderer:s,container:new C(this.view.featuresTilingScheme)});this._graphicsViewMap[t.geometryType]=n,t.geometryType!=="polygon"||this.layer.polygonSymbol?t.geometryType!=="polyline"||this.layer.lineSymbol?t.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(n),this.container.addChild(n.container)}},p),a(()=>this.layer?.polygonSymbol,i=>{this._graphicsViewMap.polygon.renderer=new l({symbol:i})},p),a(()=>this.layer?.lineSymbol,i=>{this._graphicsViewMap.polyline.renderer=new l({symbol:i})},p),a(()=>this.layer?.pointSymbol,i=>{this._graphicsViewMap.point.renderer=new l({symbol:i})},p)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const i of this.graphicsViews)i.viewChange()}_clear(){this.container.removeAllChildren();for(const i of this.graphicsViews)i.destroy();this._graphicsViewMap={},this.graphicsViews.length=0}};m=v([T("esri.views.2d.layers.GeoRSSLayerView2D")],m);const wi=m;export{wi as default};
