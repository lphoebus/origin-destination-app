import{g3 as v,cc as E,ce as m,gX as he,gY as ae,gr as U,gq as q,gp as k}from"./index-Bkom2Sdc.js";import{w as P}from"./frustum-BmKD36jq.js";import{O as J,k as V,L as C,z as le,t as G,P as B,U as X,N as ue,I as S}from"./sphere-DYgRQGlT.js";import{i as ee}from"./BufferView-w_yOhrVp.js";class te{get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}constructor(e,t){this.objectToBoundingSphere=e,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new d,this._objectCount=0,t&&(t.maximumObjectsPerNode!==void 0&&(this._maximumObjectsPerNode=t.maximumObjectsPerNode),t.maximumDepth!==void 0&&(this._maximumDepth=t.maximumDepth))}destroy(){this._degenerateObjects.clear(),d.clearPool(),W[0]=null,T.prune(),D.prune()}add(e){const t=Array.from(e);this._grow(t);const n=d.acquire();for(const o of t)++this._objectCount,this._isDegenerate(o)?this._degenerateObjects.add(o):(n.init(this._root),this._add(o,n));d.release(n)}remove(e,t=null){this._objectCount-=e.length;const n=d.acquire();for(const o of e){const r=t??J(this.objectToBoundingSphere(o),Se);$(r[3])?(n.init(this._root),de(o,r,n)):this._degenerateObjects.delete(o)}d.release(n),this._shrink()}update(e,t){if(!$(t[3])&&this._isDegenerate(e))return;const n=ge(e);this.remove(n,t),this.add(n)}forEachAlongRay(e,t,n){const o=V(e,t);N(this._root,r=>{if(!fe(o,r))return!1;const h=r.node;return h.terminals.forAll(l=>{this._intersectsObject(o,l)&&n(l)}),h.residents!==null&&h.residents.forAll(l=>{this._intersectsObject(o,l)&&n(l)}),!0})}forEachAlongRayWithVerticalOffset(e,t,n,o){const r=V(e,t);N(this._root,h=>{if(!me(r,h,o))return!1;const l=h.node;return l.terminals.forAll(s=>{this._intersectsObjectWithOffset(r,s,o)&&n(s)}),l.residents!==null&&l.residents.forAll(s=>{this._intersectsObjectWithOffset(r,s,o)&&n(s)}),!0})}forEach(e){N(this._root,t=>{const n=t.node;return n.terminals.forAll(e),n.residents!==null&&n.residents.forAll(e),!0}),this._degenerateObjects.forEach(e)}forEachDegenerateObject(e){this._degenerateObjects.forEach(e)}findClosest(e,t,n,o=()=>!0,r=1/0){let h=1/0,l=1/0,s=null;const u=I(e,t),f=a=>{if(--r,!o(a))return;const _=this.objectToBoundingSphere(a);if(!P(n,_))return;const x=M(e,t,S(_)),w=x-_[3],c=x+_[3];w<h&&(h=w,l=c,s=a)};return Y(this._root,a=>{if(r<=0||!P(n,a.bounds)||(q(g,u,a.halfSize),k(g,g,S(a.bounds)),M(e,t,g)>l))return!1;const _=a.node;return _.terminals.forAll(x=>f(x)),_.residents!==null&&_.residents.forAll(x=>f(x)),!0},e,t),s}forEachInDepthRange(e,t,n,o,r,h,l){let s=-1/0,u=1/0;const f={setRange:c=>{n===1?(s=Math.max(s,c.near),u=Math.min(u,c.far)):(s=Math.max(s,-c.far),u=Math.min(u,-c.near))}};f.setRange(o);const a=M(t,n,e),_=I(t,n),x=I(t,-n),w=c=>{if(!l(c))return;const O=this.objectToBoundingSphere(c),A=M(t,n,S(O))-a,se=A-O[3],re=A+O[3];se>u||re<s||!P(h,O)||r(c,f)};Y(this._root,c=>{if(!P(h,c.bounds)||(q(g,_,c.halfSize),k(g,g,S(c.bounds)),M(t,n,g)-a>u)||(q(g,x,c.halfSize),k(g,g,S(c.bounds)),M(t,n,g)-a<s))return!1;const O=c.node;return O.terminals.forAll(A=>w(A)),O.residents!==null&&O.residents.forAll(A=>w(A)),!0},t,n)}forEachNode(e){N(this._root,t=>e(t.node,t.bounds,t.halfSize,t.depth))}forEachNeighbor(e,t){const n=C(t),o=le(t,E()),r=s=>{const u=this.objectToBoundingSphere(s),f=C(u),a=n+f;return!(U(S(u),o)-a*a<=0)||e(s)};let h=!0;const l=s=>{h&&(h=r(s))};N(this._root,s=>{const u=C(s.bounds),f=n+u;if(U(S(s.bounds),o)-f*f>0)return!1;const a=s.node;return a.terminals.forAll(l),h&&a.residents!==null&&a.residents.forAll(l),h}),h&&this.forEachDegenerateObject(l)}_intersectsObject(e,t){const n=this.objectToBoundingSphere(t);return!(n[3]>0)||G(n,e)}_intersectsObjectWithOffset(e,t,n){const o=this.objectToBoundingSphere(t);return!(o[3]>0)||G(n.applyToBoundingSphere(o),e)}_add(e,t){t.advanceTo(this.objectToBoundingSphere(e))?t.node.terminals.push(e):(t.node.residents.push(e),t.node.residents.length>this._maximumObjectsPerNode&&t.depth<this._maximumDepth&&this._split(t))}_split(e){const t=e.node.residents;e.node.residents=null;for(let n=0;n<t.length;n++){const o=d.acquire().init(e);this._add(t.at(n),o),d.release(o)}}_grow(e){if(K(e,t=>this.objectToBoundingSphere(t),j),$(j[3])&&!this._fitsInsideTree(j))if(ne(this._root.node))J(j,this._root.bounds),this._root.halfSize=1.25*this._root.bounds[3],this._root.updateBoundsRadiusFromHalfSize();else{const t=this._rootBoundsForRootAsSubNode(j);this._placingRootViolatesMaxDepth(t)?this._rebuildTree(j,t):this._growRootAsSubNode(t),d.release(t)}}_rebuildTree(e,t){X(L,t.bounds),L[3]=t.halfSize,K([e,L],o=>o,H);const n=d.acquire().init(this._root);this._root.initFrom(null,H,H[3]),this._root.increaseHalfSize(1.25),N(n,o=>(this.add(o.node.terminals.data),o.node.residents!==null&&this.add(o.node.residents.data),!0)),d.release(n)}_placingRootViolatesMaxDepth(e){const t=Math.log(e.halfSize/this._root.halfSize)*Math.LOG2E;let n=0;return N(this._root,o=>(n=Math.max(n,o.depth),n+t<=this._maximumDepth)),n+t>this._maximumDepth}_rootBoundsForRootAsSubNode(e){const t=e[3],n=e;let o=-1/0;const r=this._root.bounds,h=this._root.halfSize;for(let s=0;s<3;s++){const u=r[s]-h-(n[s]-t),f=n[s]+t-(r[s]+h),a=Math.max(0,Math.ceil(u/(2*h))),_=Math.max(0,Math.ceil(f/(2*h)))+1,x=2**Math.ceil(Math.log(a+_)*Math.LOG2E);o=Math.max(o,x),R[s].min=a,R[s].max=_}for(let s=0;s<3;s++){let u=R[s].min,f=R[s].max;const a=(o-(u+f))/2;u+=Math.ceil(a),f+=Math.floor(a);const _=r[s]-h-u*h*2;y[s]=_+(f+u)*h}const l=o*h;return y[3]=l*ie,d.acquire().initFrom(null,y,l,0)}_growRootAsSubNode(e){const t=this._root.node;X(j,this._root.bounds),j[3]=this._root.halfSize,this._root.init(e),e.advanceTo(j,null,!0),e.node.children=t.children,e.node.residents=t.residents,e.node.terminals=t.terminals}_shrink(){for(;;){const e=this._findShrinkIndex();if(e===-1)break;this._root.advance(e),this._root.depth=0}}_findShrinkIndex(){if(this._root.node.terminals.length!==0||this._root.isLeaf())return-1;let e=null;const t=this._root.node.children;let n=0,o=0;for(;o<t.length&&e==null;)n=o++,e=t[n];for(;o<t.length;)if(t[o++])return-1;return n}_isDegenerate(e){return!$(this.objectToBoundingSphere(e)[3])}_fitsInsideTree(e){const t=this._root.bounds,n=this._root.halfSize;return e[3]<=n&&e[0]>=t[0]-n&&e[0]<=t[0]+n&&e[1]>=t[1]-n&&e[1]<=t[1]+n&&e[2]>=t[2]-n&&e[2]<=t[2]+n}toJSON(){const{maximumDepth:e,maximumObjectsPerNode:t,_objectCount:n}=this,o=this._nodeToJSON(this._root.node);return{maximumDepth:e,maximumObjectsPerNode:t,objectCount:n,root:{bounds:this._root.bounds,halfSize:this._root.halfSize,depth:this._root.depth,node:o}}}_nodeToJSON(e){const t=e.children.map(r=>r?this._nodeToJSON(r):null),n=e.residents?.map(r=>this.objectToBoundingSphere(r)),o=e.terminals?.map(r=>this.objectToBoundingSphere(r));return{children:t,residents:n,terminals:o}}static fromJSON(e){const t=new te(n=>n,{maximumDepth:e.maximumDepth,maximumObjectsPerNode:e.maximumObjectsPerNode});return t._objectCount=e.objectCount,t._root.initFrom(e.root.node,e.root.bounds,e.root.halfSize,e.root.depth),t}}const z=class z{constructor(){this.bounds=B(),this.halfSize=0,this.initFrom(null,null,0,0)}init(e){return this.initFrom(e.node,e.bounds,e.halfSize,e.depth)}initFrom(e,t,n,o=this.depth){return this.node=e??z.createEmptyNode(),t&&J(t,this.bounds),this.halfSize=n,this.depth=o,this}increaseHalfSize(e){this.halfSize*=e,this.updateBoundsRadiusFromHalfSize()}updateBoundsRadiusFromHalfSize(){this.bounds[3]=this.halfSize*ie}advance(e){let t=this.node.children[e];t||(t=z.createEmptyNode(),this.node.children[e]=t),this.node=t,this.halfSize/=2,this.depth++;const n=oe[e];return this.bounds[0]+=n[0]*this.halfSize,this.bounds[1]+=n[1]*this.halfSize,this.bounds[2]+=n[2]*this.halfSize,this.updateBoundsRadiusFromHalfSize(),this}advanceTo(e,t,n=!1){for(;;){if(this.isTerminalFor(e))return t?.(this,-1),!0;if(this.isLeaf()){if(!n)return t?.(this,-1),!1;this.node.residents=null}const o=this._childIndex(e);t?.(this,o),this.advance(o)}}isLeaf(){return this.node.residents!=null}isTerminalFor(e){return e[3]>this.halfSize/2}_childIndex(e){const t=this.bounds;return(t[0]<e[0]?1:0)+(t[1]<e[1]?2:0)+(t[2]<e[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new v({shrink:!0}),residents:new v({shrink:!0})}}static acquire(){return z._pool.acquire()}static release(e){z._pool.release(e)}static clearPool(){z._pool.prune()}};z._pool=new he(()=>new z);let d=z;function N(i,e){let t=d.acquire().init(i);const n=[t];for(;n.length!==0;){if(t=n.pop(),e(t)&&!t.isLeaf())for(let o=0;o<t.node.children.length;o++)t.node.children[o]&&n.push(d.acquire().init(t).advance(o));d.release(t)}}function Y(i,e,t,n=1){let o=d.acquire().init(i);const r=[o];for(pe(t,n,Z);r.length!==0;){if(o=r.pop(),e(o)&&!o.isLeaf())for(let h=7;h>=0;--h){const l=Z[h];o.node.children[l]&&r.push(d.acquire().init(o).advance(l))}d.release(o)}}function de(i,e,t){T.clear();const n=t.advanceTo(e,(o,r)=>{T.push(o.node),T.push(r)})?t.node.terminals:t.node.residents;if(n.removeUnordered(i),n.length===0)for(let o=T.length-2;o>=0&&ce(T.data[o],T.data[o+1]);o-=2);}function ce(i,e){return e>=0&&(i.children[e]=null),!!ne(i)&&(i.residents===null&&(i.residents=new v({shrink:!0})),!0)}function fe(i,e){return F(S(e.bounds),2*-e.halfSize,b),F(S(e.bounds),2*e.halfSize,p),ee(i.origin,i.direction,b,p)}function me(i,e,t){return F(S(e.bounds),2*-e.halfSize,b),F(S(e.bounds),2*e.halfSize,p),t.applyToMinMax(b,p),ee(i.origin,i.direction,b,p)}function ne(i){if(i.terminals.length!==0)return!1;if(i.residents!==null)return i.residents.length===0;for(let e=0;e<i.children.length;e++)if(i.children[e])return!1;return!0}function _e(i,e){i[0]=Math.min(i[0],e[0]-e[3]),i[1]=Math.min(i[1],e[1]-e[3]),i[2]=Math.min(i[2],e[2]-e[3])}function be(i,e){i[0]=Math.max(i[0],e[0]+e[3]),i[1]=Math.max(i[1],e[1]+e[3]),i[2]=Math.max(i[2],e[2]+e[3])}function F(i,e,t){t[0]=i[0]+e,t[1]=i[1]+e,t[2]=i[2]+e}function K(i,e,t){b[0]=1/0,b[1]=1/0,b[2]=1/0,p[0]=-1/0,p[1]=-1/0,p[2]=-1/0;for(const n of i){const o=e(n);$(o[3])&&(_e(b,o),be(p,o))}ue(t,ae(xe,b,p,.5)),t[3]=Math.max(p[0]-b[0],p[1]-b[1],p[2]-b[2])/2}function pe(i,e,t){if(!D.length)for(let n=0;n<8;++n)D.push({index:0,distance:0});for(let n=0;n<8;++n){const o=oe[n];D.data[n].index=n,D.data[n].distance=M(i,e,o)}D.sort((n,o)=>n.distance-o.distance);for(let n=0;n<8;++n)t[n]=D.data[n].index}function I(i,e){let t,n=1/0;for(let o=0;o<8;++o){const r=M(i,e,Q[o]);r<n&&(n=r,t=Q[o])}return t}function M(i,e,t){return e*(i[0]*t[0]+i[1]*t[1]+i[2]*t[2])}function $(i){return!isNaN(i)&&i!==-1/0&&i!==1/0&&i>0}const oe=[m(-1,-1,-1),m(1,-1,-1),m(-1,1,-1),m(1,1,-1),m(-1,-1,1),m(1,-1,1),m(-1,1,1),m(1,1,1)],Q=[m(-1,-1,-1),m(-1,-1,1),m(-1,1,-1),m(-1,1,1),m(1,-1,-1),m(1,-1,1),m(1,1,-1),m(1,1,1)],ie=Math.sqrt(3),W=[null];function ge(i){return W[0]=i,W}const y=B(),g=E(),b=E(),p=E(),T=new v,Se=B(),j=B(),L=B(),H=B(),R=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],D=new v,Z=[0,0,0,0,0,0,0,0],xe=E();export{te as S};
