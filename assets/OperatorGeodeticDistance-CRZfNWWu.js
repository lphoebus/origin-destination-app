import{gk as f,gl as b}from"./index-Bkom2Sdc.js";import{b as x,j as l}from"./Point2D-DVg-Qhcx.js";import{Q as y,j as N}from"./GeodeticDistanceCalculator-Ce-woMPw-BQ_SQywa.js";import"./ProjectionTransformation-Bvt2x7E-.js";import"./Envelope2D-7paLNnHT.js";import"./Transformation2D-CNf0ySKF.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./OperatorDefinitions-DP7_WWTp.js";import"./Distance2DCalculator-CXhBP-8I-CkbBs3iU.js";import"./OperatorGeodeticDensifyByLength-BprbSDSO.js";class C{getOperatorType(){return 10316}supportsCurves(){return!0}accelerateGeometry(r,e,t){return!1}canAccelerateGeometry(r){return!1}execute(r,e,t,s,a){return this.executeEx(r,e,t,s,a,null,null,Number.NaN)}executeEx(r,e,t,s,a,m,p,i){const o={stack:[],error:void 0,hasError:!1};try{if(t.getCoordinateSystemType()===0&&x(""),l(r),l(e),r.isEmpty()||e.isEmpty())return Number.NaN;Number.isNaN(i)&&(i=Number.MAX_VALUE);const u=f(o,new y(t,s,a,i,1),!1),n=N(),c=N(),E=u.calculate(r,e,n,c);return m&&m.outPoint.assign(n.outPoint),p&&p.outPoint.assign(c.outPoint),E}catch(u){o.error=u,o.hasError=!0}finally{b(o)}}}export{C as OperatorGeodeticDistance,N as makeOutput};
