const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-DEEOAa1H.js","assets/utils-C7umzGDt.js","assets/index-C2z3vZ9k.js","assets/index-DaKHjF4b.css","assets/originUtils-av9iyGZ9.js","assets/saveUtils-CiwNsJLd.js"])))=>i.map(i=>d[i]);
import{gv as _,gZ as E,gz as P,gK as T,gx as A,gy as L,gA as F,gw as M,gM as R,gL as V,g_ as j,g$ as N,aN as J,al as U,h0 as g,b4 as q,gW as x,gU as f,h1 as I,h2 as k,gs as z,aR as v,aY as W,aZ as Z,h3 as G,h4 as B,ay as w,dV as D,gB as H,bb as i,bc as n,h5 as O,dF as K,dG as C,gJ as Y,bd as Q,h6 as X}from"./index-C2z3vZ9k.js";import{m as ee,f as te,a as re}from"./SublayersOwner-Dgv_L1dM.js";import{t as ae}from"./imageBitmapUtils-3Uw57BlP.js";import"./QueryTask-CoccR26o.js";import"./executeForIds-DwobaMPS.js";import"./featureConversionUtils-BHcwWift.js";let a=class extends _(E(P(ee(te(T(A(L(F(M(R(V(H)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new j({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new N({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=J((async(r,l,t)=>{const{save:s,saveAs:o}=await U(()=>import("./mapImageLayerUtils-DEEOAa1H.js"),__vite__mapDeps([0,1,2,3,4,5]));switch(r){case g.SAVE:return s(this,l);case g.SAVE_AS:return o(this,t,l)}}))}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(q).then((()=>this._fetchService(r)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,t){var y,b,S;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:p})=>p&&p.toArray().reverse())).toArray();let o=!1;const m=x(t.origin);let c;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((S=(b=this.capabilities)==null?void 0:b.exportMap)!=null&&S.supportsDynamicLayers)){if(m===f.PORTAL_ITEM){const p=this.createSublayersForOrigin("service").sublayers;o=I(s,p,f.SERVICE)}else if(m>f.PORTAL_ITEM){const p=this.createSublayersForOrigin("portal-item");o=I(s,p.sublayers,x(p.origin)),c=p.originWithPartialOverrides}}const d=[],u={writeSublayerStructure:o,...t,minimumWritableOrigin:c};let h=o||this.hasVisibleLayersForOrigin(m);s.forEach((p=>{const $=p.write({},u);d.push($),h=h||p.originOf("visible")==="user"})),d.some((p=>Object.keys(p).length>1))&&(r.layers=d),h&&(r.visibleLayers=s.filter((p=>p.visible)).map((p=>p.id)))}createExportImageParameters(e,r,l,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=k({extent:e,width:r})*s;const o=this._exportImageParameters.toJSON(),m=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,d=z(c);o.dpi*=s;const u={};if(t!=null&&t.timeExtent){const{start:h,end:y}=t.timeExtent.toJSON();u.time=h&&y&&h===y?""+h:`${h??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:d,imageSR:d,size:r+","+l,...o,...m,...u}}async fetchImage(e,r,l,t){const{data:s}=await this._fetchImage("image",e,r,l,t);return s}async fetchImageBitmap(e,r,l,t){const{data:s,url:o}=await this._fetchImage("blob",e,r,l,t);return ae(s,o,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await v(this.url,r),{extent:t,fullExtent:s,timeExtent:o}=l,m=t||s;return{fullExtent:m&&Z.fromJSON(m),timeExtent:o&&W.fromJSON({start:o[0],end:o[1]})}}loadAll(){return G(this,(e=>{e(this.allSublayers),e(this.subtables)}))}async save(e){return this._debouncedSaveOperations(g.SAVE,e)}async saveAs(e,r){return this._debouncedSaveOperations(g.SAVE_AS,r,e)}serviceSupportsSpatialReference(e){return B(this,e)}async _fetchImage(e,r,l,t,s){var c,d,u;const o={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((c=o.query)==null?void 0:c.dynamicLayers)!=null&&!((u=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&u.supportsDynamicLayers))throw new w("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await v(m,o);return{data:h,url:m}}catch(h){throw D(h)?h:new w("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};i([n(O("dateFieldsTimeReference"))],a.prototype,"dateFieldsTimeZone",void 0),i([n({type:Boolean})],a.prototype,"datesInUnknownTimezone",void 0),i([n()],a.prototype,"dpi",void 0),i([n()],a.prototype,"elevationInfo",void 0),i([n()],a.prototype,"gdbVersion",void 0),i([n()],a.prototype,"imageFormat",void 0),i([K("imageFormat",["supportedImageFormatTypes"])],a.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],a.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],a.prototype,"imageMaxWidth",void 0),i([n()],a.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],a.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],a.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],a.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],a.prototype,"popupEnabled",void 0),i([n(O("preferredTimeReference"))],a.prototype,"preferredTimeZone",void 0),i([n()],a.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],a.prototype,"sublayers",void 0),i([C("sublayers",{layers:{type:[re]},visibleLayers:{type:[X]}})],a.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],a.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],a.prototype,"type",void 0),i([n(Y)],a.prototype,"url",void 0),a=i([Q("esri.layers.MapImageLayer")],a);const he=a;export{he as default};
