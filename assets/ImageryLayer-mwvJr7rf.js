const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-YbPzVGyq.js","assets/utils-B1xfry1O.js","assets/index-Bkom2Sdc.js","assets/index-CkucmIUh.css","assets/originUtils-CUyL9ZOO.js","assets/saveUtils-DSRPRt58.js","assets/datasetUtils-BHf95nQl.js"])))=>i.map(i=>d[i]);
import{kY as Qt,kZ as Ht,vY as kt,cb as V,tp as Wt,jf as Zt,b6 as j,b8 as s,ba as l,eD as P,bb as R,bd as ce,a$ as q,aY as re,i3 as He,b7 as _t,vZ as we,v_ as it,v$ as st,gM as X,bh as Q,dR as mt,bN as Le,eC as G,bg as ae,b9 as Kt,bj as Yt,bk as $t,f8 as At,dP as M,eG as E,eI as L,eH as z,bH as D,hq as dt,co as Te,fg as Xt,n1 as er,hz as tr,dF as rr,w0 as ir,dj as sr,bf as ze,b4 as x,pn as ar,bX as lt,bY as nr,bE as or,c7 as lr,ja as ur,hF as pr,hW as cr,hu as mr,hs as dr,ht as yr,hG as hr,hw as fr,hr as gr,hv as wr,hy as vr,bD as Rr,aH as br,bU as Sr,mW as Ir,i1 as xr,hY as Fr,hI as Dr,n2 as Tr,fY as Pr,n5 as jr}from"./index-Bkom2Sdc.js";import{f as ut,g as Nr,D as Or,p as Cr,b as _r}from"./datasetUtils-BHf95nQl.js";import{N as T,y as Y,h as $r,a as Ar,j as Mr,u as Vr,p as qr,l as Er,d as Jr,B as xt,E as Gr,q as Lr,W as zr,c as Ur,e as Br}from"./RasterJobHandlerMixin-CXgaqaNL.js";import{s as Mt,B as Vt,f as Qr,w as Hr,P as kr,a as Ue,x as Be,n as De,l as Wr,m as qt,O as Ft,R as Dt,L as Zr}from"./RasterSymbolizer-BQJRaC-o.js";import{t as Tt}from"./imageBitmapUtils-RdyKwxam.js";import{c as pt}from"./PixelBlock-CD7TNHcL.js";import{o as Kr,m as Yr,c as Xr,f as ei,d as ti,$ as ri,p as ii,v as si,i as Fe,V as ai,a as ni,n as oi,b as li}from"./rasterFieldUtils-BBSwpsuA.js";import{u as ui,l as pi}from"./vectorFieldUtils-DYAo00Wy.js";import{f as Pt,p as ci,c as mi,o as di}from"./RasterPresetRendererMixin-0A-rtcoF.js";import{i as yi,s as hi}from"./executeForIds-BzofPlMX.js";import{j as jt,$ as fi,R as gi}from"./elevationInfoUtils-9Dliwvku.js";import"./ClassBreaksDefinition-DLcEIyEO.js";import"./dataUtils-D1x3Zy4l.js";import"./_commonjsHelpers-DCkdB7M8.js";var Nt;let wi=class extends Qt{get[(Nt=kt,Ht)](){return this.layer}constructor(r){super(),this[Nt]=!0,this.type="imagery",this.layer=r}get id(){return this.layer.id}};const vi={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},Ri=new Set(["u1","u2","u4","u8","s8","u16","s16"]),bi={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Si=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Et(i){return Si.has(i.type)}function yt(i,r){if(!i||!r)return V(i||r);const a=V(i);if(a.functionDefinition&&r.rasterFunctionDefinition){const o=r.rasterFunctionDefinition;(o.thumbnail||o.thumbnailEx)&&(o.thumbnail=o.thumbnailEx=void 0),Jt(a.functionDefinition.arguments,r),a.rasterFunctionDefinition=a.functionDefinition.toJSON()}else r.functionName?.toLowerCase()!=="none"&&(Gt(a.functionArguments).Raster=r);return a}function Jt(i,r){for(const a in i)a.toLowerCase()==="raster"&&(i[a].type==="RasterFunctionVariable"?(i[a]=r.rasterFunctionDefinition,i[a].type="RasterFunctionTemplate"):i[a].type==="RasterFunctionTemplate"&&Jt(i[a].arguments,r))}function ie(i){const r=V(vi[i.functionName+"Function"]),a=i.functionArguments;for(const o in a)o.toLowerCase()==="raster"?(r.arguments[o]=ie(a[o]),r.arguments[o].type="RasterFunctionTemplate"):o.toLowerCase()==="colormap"?(r.arguments[o].value=Ni(a[o]),r.arguments.ColorSchemeType.value=0):r.arguments[o].value=a[o];return r}function Ii(i,r){switch(r=r||{},i.type){case"raster-stretch":return Di(i,r);case"class-breaks":return Ti(i,r);case"unique-value":return Pi(i,r);case"raster-colormap":return ji(i,r);case"vector-field":return xi(i,r);case"raster-shaded-relief":return Fi(i,r);case"flow":throw new Error("Unsupported rendering rule.")}}function Gt(i){const r=i?.Raster??i?.raster;return r&&r.declaredClass==="esri.layers.support.RasterFunction"?Gt(r.functionArguments):i}const Ve={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function xi(i,r){const a=new T;a.functionName="VectorFieldRenderer";const{dataType:o,bandNames:e}=r,t=o==="vector-uv";let n,u;if(e&&e.length===2){const y=e.map(v=>v.toLowerCase());n=y.indexOf("magnitude"),u=y.indexOf("direction")}n!==-1&&n!==null||(n=0,u=1);const p=i.rotationType==="arithmetic"?1:2,c=i.flowRepresentation==="flow-from"?0:1,m=i.visualVariables?i.visualVariables.find(y=>y.field==="Magnitude"):new Wt,d={magnitudeBandID:n,directionBandID:u,isUVComponents:t,referenceSystem:p,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:bi[i.style.toLowerCase().replace("-","_")],minimumMagnitude:m.minDataValue,maximumMagnitude:m.maxDataValue,minimumSymbolSize:m.minSize,maximumSymbolSize:m.maxSize};a.functionArguments=d;const h=ie(a);return r.convertToRFT?T.fromJSON({rasterFunctionDefinition:h}):a}function Fi(i,r){const a=r.convertToRFT;if(r.dataType!=="elevation"&&(r.dataType!=="generic"||r.bandCount!==1||r.pixelType!=="s16"&&r.pixelType!=="s32"&&r.pixelType!=="f32"&&r.pixelType!=="f64"))return new T;const o=new T;o.functionName="Hillshade";const e=i.hillshadeType==="traditional"?0:1,t=i.scalingType==="none"?1:3,n={HillshadeType:e,SlopeType:t,ZFactor:i.zFactor};return e===0&&(n.Azimuth=i.azimuth,n.Altitude=i.altitude),t===3&&(n.PSPower=i.pixelSizePower,n.PSZFactor=i.pixelSizeFactor),o.functionArguments=n,o.variableName="Raster",i.colorRamp&&(o.functionName="ShadedRelief",a?n.ColorRamp=Mt(i.colorRamp):n.Colormap=Vt(i.colorRamp)),a?new T({rasterFunctionDefinition:ie(o)}):o}function Di(i,r){const a=r.convertToRFT,o=new T;o.functionName="Stretch";const e=Ve[Qr.toJSON(i.stretchType)],t="u8",n=i.customStatistics?.map(p=>[p.min,p.max,p.avg??0,p.stddev??1]),u={StretchType:e,Statistics:n,DRA:i.dynamicRangeAdjustment,UseGamma:i.useGamma,Gamma:i.gamma,ComputeGamma:i.computeGamma};if(i.outputMin!=null&&(u.Min=i.outputMin),i.outputMax!=null&&(u.Max=i.outputMax),e===Ve.standardDeviation?(u.NumberOfStandardDeviations=i.numberOfStandardDeviations,o.outputPixelType=t):e===Ve.percentClip?(u.MinPercent=i.minPercent,u.MaxPercent=i.maxPercent,o.outputPixelType=t):e===Ve.minMax?o.outputPixelType=t:e===Ve.sigmoid&&(u.SigmoidStrengthLevel=i.sigmoidStrengthLevel),o.functionArguments=u,o.variableName="Raster",i.colorRamp){const p=i.colorRamp,c=new T;if(a)c.functionArguments={ColorRamp:Mt(p)};else{const m=Hr(p,!0);if(m)c.functionArguments={colorRampName:m};else if(!r.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const d=i.colorRamp.toJSON();d.type==="algorithmic"?d.algorithm=d.algorithm||"esriCIELabAlgorithm":d.type==="multipart"&&d.colorRamps?.length&&d.colorRamps.forEach(h=>h.algorithm=h.algorithm||"esriCIELabAlgorithm"),c.functionArguments={colorRamp:d}}else c.functionArguments={Colormap:Vt(p)}}return c.variableName="Raster",c.functionName="Colormap",c.functionArguments.Raster=o,a?new T({rasterFunctionDefinition:ie(c)}):c}return a?new T({rasterFunctionDefinition:ie(o)}):o}function Ti(i,r){const a=[],o=[],e=[],t=[],{pixelType:u,rasterAttributeTable:p}=r,c=p==null?null:p.features,m=Lt(p);if(m&&c&&Array.isArray(c)&&i.classBreakInfos){i.classBreakInfos.forEach((f,S)=>{const C=f.symbol?.color;let w;C?.a&&f.minValue!=null&&f.maxValue!=null&&c.forEach(b=>{f.minValue!=null&&f.maxValue!=null&&(w=b.attributes[i.field],(w>=f.minValue&&w<f.maxValue||S===i.classBreakInfos.length-1&&w>=f.minValue)&&t.push([b.attributes[m],C.r,C.g,C.b]))})});const v=u?at(t,u):t,g=new T;return g.functionName="Colormap",g.functionArguments={},g.functionArguments.Colormap=v,g.variableName="Raster",r.convertToRFT?new T({rasterFunctionDefinition:ie(g)}):g}i.classBreakInfos.forEach((v,g)=>{if(v.minValue==null||v.maxValue==null)return;const f=v.symbol&&v.symbol.color;f?.a?(g===0?a.push(v.minValue,v.maxValue+1e-4):a.push(v.minValue+1e-4,v.maxValue+1e-4),o.push(g),t.push([g,f.r,f.g,f.b])):e.push(v.minValue,v.maxValue)});const d=u?at(t,u):t,h=new T;h.functionName="Remap",h.functionArguments={InputRanges:a,OutputValues:o,NoDataRanges:e},h.variableName="Raster";const y=new T;return y.functionName="Colormap",y.functionArguments={Colormap:d,Raster:h},r.convertToRFT?new T({rasterFunctionDefinition:ie(y)}):y}function at(i,r){const a=Ri.has(r)?Zt(r):null;return a&&i.push([Math.floor(a[0]-1),0,0,0],[Math.ceil(a[1]+1),0,0,0]),i}function Lt(i){if(i==null)return;const{fields:r}=i;return r?.find(o=>o?.name&&o.name.toLowerCase()==="value")?.name}function Pi(i,r){const a=[],{pixelType:o,rasterAttributeTable:e}=r,t=e==null?null:e.features,n=Lt(e),u=i.defaultSymbol?.color?.toRgb(),p=i.uniqueValueInfos;if(p)if(t){if(n){const d=new Map;p.forEach(y=>{const v=y.value,g=Ot(y);v!=null&&g?.a&&d.set(String(v),g.toRgb())});const h=i.field;h&&t.forEach(({attributes:y})=>{const v=String(y[h]),g=y[n],f=d.get(v);f?a.push([g,...f]):u&&a.push([g,...u])})}}else for(let d=0;d<p.length;d++){const h=p[d],y=Ot(h),v=+h.value;if(y?.a){if(isNaN(v))return null;a.push([v,y.r,y.g,y.b])}}const c=o?at(a,o):a,m=new T;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=c,m.variableName="Raster",r.convertToRFT?new T({rasterFunctionDefinition:ie(m)}):m}function Ot(i){return i.symbol?.type==="polygon-3d"?i.symbol.symbolLayers?.find(r=>r.type==="fill")?.material?.color:i.symbol?.color}function ji(i,r){const a=i.extractColormap();if(!a||a.length===0)return null;const{pixelType:o}=r,e=o?at(a,o):a,t=new T;return t.functionName="Colormap",t.functionArguments={},t.functionArguments.Colormap=e,r.convertToRFT?new T({rasterFunctionDefinition:ie(t)}):t}function Ni(i){const r=[],a=[];return i.forEach(o=>{r.push(o[0]),a.push(kr([...o.slice(1),255]))}),{type:"RasterColormap",values:r,colors:a}}let O=class extends j{constructor(){super(...arguments),this.layer=null,this.requestRawData=!1,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(r,a,o){this.layer.version<10.3||(a[o]=r)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(r,a,o){this.format&&this.format.toLowerCase().includes("jpg")&&r!=null&&(a[o]=r)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(r,a,o){this.format==="lerc"&&r!=null&&(a[o]=r)}get format(){return this.requestRawData||this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:r}=this;return r.pixelType!==r.serviceRasterInfo.pixelType?r.pixelType:void 0}writeLercVersion(r,a,o){this.format==="lerc"&&this.layer.version>=10.5&&(a[o]=r)}get version(){const r=this.layer;return r.commitProperty("bandIds"),r.commitProperty("format"),r.commitProperty("compressionQuality"),r.commitProperty("compressionTolerance"),r.commitProperty("interpolation"),r.commitProperty("noData"),r.commitProperty("noDataInterpretation"),r.commitProperty("mosaicRule"),r.commitProperty("rasterFunction"),r.commitProperty("adjustAspectRatio"),r.commitProperty("pixelFilter"),r.commitProperty("pixelType"),r.commitProperty("definitionExpression"),r.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(r){this._set("version",r)}get mosaicRule(){const r=this.layer;let a=r.mosaicRule;const o=r.definitionExpression;return a?o&&o!==a.where&&(a=a.clone(),a.where=o):o&&(a=new Y({where:o})),a}get rasterFunction(){const r=this.layer;let{rasterFunction:a}=r;const o=r.pixelFilter,e=!r.format||r.format.includes("jpg")||r.format.includes("png");this.requestRawData||(a=this._addResampleRasterFunction(a));const t=r.multidimensionalSubset?.areaOfInterest;return t&&(a=Oi(a,t)),this.requestRawData||!e||o||r.renderer?.type==="vector-field"||(a=this.combineRendererWithRenderingRule(a)),a}combineRendererWithRenderingRule(r){const a=this.layer,{rasterInfo:o,renderer:e}=a;return r=r||a.rasterFunction,!e||!Et(e)?r:yt(Ii(e,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandNames:o.bandInfos.map(({name:t})=>t),convertColorRampToColormap:a.version<10.6,convertToRFT:!!r?.rasterFunctionDefinition,bandCount:o.bandCount}),r)}_addResampleRasterFunction(r){if(this.layer.renderer?.type!=="vector-field"||r?.functionName==="Resample")return r;const a=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,o=this.layer.serviceRasterInfo.pixelSize;let e=new T({functionName:"Resample",functionArguments:{ResamplingType:a,InputCellSize:o}});return e=r?.rasterFunctionDefinition?new T({rasterFunctionDefinition:ie(e)}):e,yt(e,r)}};function Oi(i,r){const a=new T({functionName:"Clip",functionArguments:{ClippingGeometry:r.toJSON(),ClippingType:1}});return yt(a,i)}s([l()],O.prototype,"layer",void 0),s([l()],O.prototype,"requestRawData",void 0),s([l({json:{write:!0}})],O.prototype,"adjustAspectRatio",null),s([P("adjustAspectRatio")],O.prototype,"writeAdjustAspectRatio",null),s([l({json:{write:!0}})],O.prototype,"bandIds",null),s([l({json:{write:!0}})],O.prototype,"compression",void 0),s([l({json:{write:!0}})],O.prototype,"compressionQuality",null),s([P("compressionQuality")],O.prototype,"writeCompressionQuality",null),s([l({json:{write:!0}})],O.prototype,"compressionTolerance",null),s([P("compressionTolerance")],O.prototype,"writeCompressionTolerance",null),s([l({json:{write:!0}})],O.prototype,"format",null),s([l({type:String,json:{read:{reader:Ue.read},write:{writer:Ue.write}}})],O.prototype,"interpolation",null),s([l({json:{write:!0}})],O.prototype,"noData",null),s([l({type:String,json:{read:{reader:Be.read},write:{writer:Be.write}}})],O.prototype,"noDataInterpretation",null),s([l({type:De.apiValues,json:{read:De.read,write:De.write}})],O.prototype,"pixelType",null),s([l({json:{write:!0}})],O.prototype,"lercVersion",void 0),s([P("lercVersion")],O.prototype,"writeLercVersion",null),s([l({type:Number})],O.prototype,"version",null),s([l({json:{write:!0}})],O.prototype,"mosaicRule",null),s([l({json:{write:!0,name:"renderingRule"}})],O.prototype,"rasterFunction",null),O=s([R("esri.layers.support.ExportImageServiceParameters")],O);let ye=class extends ce(j){constructor(r){super(r),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};s([l({type:q,json:{read:!0}})],ye.prototype,"fromGeometry",void 0),s([l({type:q,json:{read:!0,write:!0}})],ye.prototype,"toGeometry",void 0),s([l({json:{write:!0}})],ye.prototype,"objectIds",void 0),s([l({type:String,json:{write:!0}})],ye.prototype,"where",void 0),s([l({type:Number,json:{write:!0}})],ye.prototype,"maxCount",void 0),ye=s([R("esri.rest.support.FindImagesParameters")],ye);const zt=i=>{const r=i;let a=class extends r{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return s([l({json:{write:!0}})],a.prototype,"make",void 0),s([l({json:{write:!0}})],a.prototype,"model",void 0),s([l({json:{write:!0}})],a.prototype,"focalLength",void 0),s([l({json:{write:!0}})],a.prototype,"pixelSize",void 0),s([l({json:{write:!0}})],a.prototype,"rows",void 0),s([l({json:{write:!0}})],a.prototype,"cols",void 0),a=s([R("esri.rest.support.CameraInfoMixin")],a),a};let H=class extends zt(j){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(r,a){a.acquisitionDate=r?.getTime()}};s([l({json:{write:!0}})],H.prototype,"id",void 0),s([l({json:{name:"uri",write:!0}})],H.prototype,"referenceUri",void 0),s([l({type:Date,json:{write:!0}})],H.prototype,"acquisitionDate",void 0),s([P("acquisitionDate")],H.prototype,"writeAcquisitionDate",null),s([l({json:{write:!0}})],H.prototype,"cameraID",void 0),s([l({type:q,json:{write:!0}})],H.prototype,"center",void 0),s([l({type:q,json:{write:!0}})],H.prototype,"perspectiveCenter",void 0),s([l({json:{write:!0}})],H.prototype,"orientation",void 0),H=s([R("esri.rest.support.ImageInspectionInfo")],H);const Ci=H;let ke=class extends j{constructor(){super(...arguments),this.images=null}};s([l({type:[Ci],json:{write:!0}})],ke.prototype,"images",void 0),ke=s([R("esri.rest.support.FindImagesResult")],ke);var ht;let be=ht=class extends j{constructor(i){super(i),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new ht(V({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([l({type:[String],json:{name:"angleName",write:!0}})],be.prototype,"angleNames",void 0),s([l({type:q,json:{write:!0}})],be.prototype,"point",void 0),s([l({type:re,json:{write:!0}})],be.prototype,"spatialReference",void 0),s([l({type:He,json:{write:!0}})],be.prototype,"rasterId",void 0),be=ht=s([R("esri.rest.support.ImageAngleParameters")],be);let Pe=class extends j{constructor(r){super(r),this.north=null,this.up=null,this.spatialReference=null}};s([l({type:Number,json:{write:!0}})],Pe.prototype,"north",void 0),s([l({type:Number,json:{write:!0}})],Pe.prototype,"up",void 0),s([l({type:re,json:{write:!0}})],Pe.prototype,"spatialReference",void 0),Pe=s([R("esri.rest.support.ImageAngleResult")],Pe);const B=new _t({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let fe=class extends j{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([l({type:Number,json:{read:!0,write:!0}})],fe.prototype,"value",void 0),s([l({type:String,json:{read:!0,write:!0}})],fe.prototype,"displayValue",void 0),s([l({type:Number,json:{read:!0,write:!0}})],fe.prototype,"uncertainty",void 0),fe=s([R("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],fe);let _e=class extends fe{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:we.read,write:we.write}})],_e.prototype,"unit",void 0),_e=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],_e);let We=class extends fe{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:it.read,write:it.write}})],We.prototype,"unit",void 0),We=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],We);let Qe=class extends fe{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:st.read,write:st.write}})],Qe.prototype,"unit",void 0),Qe=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],Qe);let K=class extends j{constructor(r){super(r),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};s([l()],K.prototype,"type",void 0),s([l({type:B.apiValues,json:{read:B.read,write:B.write}})],K.prototype,"measureOperation",void 0),s([l({type:Y,json:{write:!0}})],K.prototype,"mosaicRule",void 0),s([l({type:q,json:{write:!0}})],K.prototype,"pixelSize",void 0),s([l({json:{write:!0}})],K.prototype,"raster",void 0),K=s([R("esri.rest.support.BaseImageMeasureParameters")],K);var ft;let ne=ft=class extends K{constructor(i){super(i),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=i.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new ft(V({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({types:Q,json:{name:"fromGeometry",read:!0,write:!0}})],ne.prototype,"geometry",void 0),s([P("geometry")],ne.prototype,"writeGeometry",null),s([l({type:B.apiValues,json:{write:B.write}})],ne.prototype,"measureOperation",null),s([l({json:{read:!0}})],ne.prototype,"is3D",void 0),s([l({type:String,json:{read:we.read,write:we.write}})],ne.prototype,"linearUnit",void 0),s([l({type:String,json:{read:it.read,write:it.write}})],ne.prototype,"areaUnit",void 0),ne=ft=s([R("esri.rest.support.ImageAreaParameters")],ne);let ge=class extends j{constructor(r){super(r),this.name=null,this.sensorName=null}};s([l({type:String,json:{read:!0,write:!0}})],ge.prototype,"name",void 0),s([l({type:String,json:{read:!0,write:!0}})],ge.prototype,"sensorName",void 0),ge=s([R("esri.rest.support.BaseImageMeasureResult")],ge);let qe=class extends ge{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([l({type:We,json:{read:!0,write:!0}})],qe.prototype,"area",void 0),s([l({type:_e,json:{read:!0,write:!0}})],qe.prototype,"perimeter",void 0),qe=s([R("esri.rest.support.ImageAreaResult")],qe);let Ze=class extends ce(j){constructor(r){super(r),this.outSpatialReference=null}};s([l({type:re,json:{name:"outSR",write:!0}})],Ze.prototype,"outSpatialReference",void 0),Ze=s([R("esri.rest.support.ImageBoundaryParameters")],Ze);let je=class extends j{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(r,a){return r==null?null:r.rings?mt.fromJSON(r):Le.fromJSON(r)}};s([l({type:Number,json:{write:!0}})],je.prototype,"area",void 0),s([l({types:Q,json:{name:"shape",write:!0}})],je.prototype,"geometry",void 0),s([G("geometry")],je.prototype,"readGeometry",null),je=s([R("esri.rest.support.ImageBoundaryResult")],je);var gt;let te=gt=class extends K{constructor(i){super(i),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=i.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new gt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({type:q,json:{read:!0,write:!0}})],te.prototype,"fromGeometry",void 0),s([P("fromGeometry")],te.prototype,"writeFromGeometry",null),s([l({type:q,json:{read:!0,write:!0}})],te.prototype,"toGeometry",void 0),s([l({type:B.apiValues,json:{write:B.write}})],te.prototype,"measureOperation",null),s([l({json:{read:!0}})],te.prototype,"is3D",void 0),s([l({type:String,json:{read:we.read,write:we.write}})],te.prototype,"linearUnit",void 0),s([l({type:String,json:{read:st.read,write:st.write}})],te.prototype,"angularUnit",void 0),te=gt=s([R("esri.rest.support.ImageDistanceParameters")],te);let Ne=class extends ge{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([l({type:_e,json:{read:!0,write:!0}})],Ne.prototype,"distance",void 0),s([l({type:Qe,json:{read:!0,write:!0}})],Ne.prototype,"azimuthAngle",void 0),s([l({type:Qe,json:{read:!0,write:!0}})],Ne.prototype,"elevationAngle",void 0),Ne=s([R("esri.rest.support.ImageDistanceResult")],Ne);let oe=class extends ce(j){constructor(r){super(r),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(r,a,o){r!=null&&(a.geometryType=X(r),a[o]=JSON.stringify(r.toJSON()))}};s([l({types:Q,json:{read:ae,write:!0}})],oe.prototype,"geometry",void 0),s([P("geometry")],oe.prototype,"writeGeometry",null),s([l({json:{write:!0}})],oe.prototype,"objectIds",void 0),s([Kt(Yt,{ignoreUnknown:!1,name:"spatialRel"})],oe.prototype,"spatialRelationship",void 0),s([l({type:$t,json:{name:"time",write:!0}})],oe.prototype,"timeExtent",void 0),s([l({type:String,json:{write:!0}})],oe.prototype,"where",void 0),oe=s([R("esri.rest.support.ImageGPSInfoParameters")],oe);let Ke=class extends zt(j){constructor(){super(...arguments),this.id=null}};s([l({json:{write:!0}})],Ke.prototype,"id",void 0),Ke=s([R("esri.rest.support.CameraInfo")],Ke);const _i=Ke;let k=class extends j{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(r,a){a.acquisitionDate=r?.getTime()}};s([l({json:{write:!0}})],k.prototype,"id",void 0),s([l({json:{write:!0}})],k.prototype,"name",void 0),s([l({type:Date,json:{write:!0}})],k.prototype,"acquisitionDate",void 0),s([P("acquisitionDate")],k.prototype,"writeAcquisitionDate",null),s([l({json:{write:!0}})],k.prototype,"cameraID",void 0),s([l({type:q,json:{write:!0}})],k.prototype,"center",void 0),s([l({json:{write:!0}})],k.prototype,"gps",void 0),s([l({json:{write:!0}})],k.prototype,"orientation",void 0),k=s([R("esri.rest.support.ImageGPSInfo")],k);const $i=k;let Ee=class extends j{constructor(){super(...arguments),this.images=null,this.cameras=null}};s([l({type:[$i],json:{write:!0}})],Ee.prototype,"images",void 0),s([l({type:[_i],json:{write:!0}})],Ee.prototype,"cameras",void 0),Ee=s([R("esri.rest.support.ImageGPSInfoResult")],Ee);var wt;let le=wt=class extends K{constructor(i){super(i),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=i.toJSON())}get measureOperation(){return this.operationType}clone(){return new wt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({type:q,json:{read:!0}})],le.prototype,"fromGeometry",void 0),s([P("fromGeometry")],le.prototype,"writeFromGeometry",null),s([l({type:q,json:{read:!0,write:!0}})],le.prototype,"toGeometry",void 0),s([l({type:B.apiValues,json:{write:B.write}})],le.prototype,"measureOperation",null),s([l({json:{read:!0}})],le.prototype,"operationType",void 0),s([l({type:String,json:{read:we.read,write:we.write}})],le.prototype,"linearUnit",void 0),le=wt=s([R("esri.rest.support.ImageHeightParameters")],le);let Ye=class extends ge{constructor(){super(...arguments),this.height=null}};s([l({type:_e,json:{read:!0,write:!0}})],Ye.prototype,"height",void 0),Ye=s([R("esri.rest.support.ImageHeightResult")],Ye);var vt;let _=vt=class extends j{constructor(i){super(i),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=JSON.stringify(i.toJSON()))}set mosaicRule(i){let r=i;r?.mosaicMethod&&(r=Y.fromJSON({...r.toJSON(),mosaicMethod:r.mosaicMethod,mosaicOperation:r.mosaicOperation})),this._set("mosaicRule",r)}writeMosaicRule(i,r,a){i!=null&&(r[a]=JSON.stringify(i.toJSON()))}set rasterFunction(i){let r=i;r?.rasterFunction&&(r=T.fromJSON({...r.toJSON(),rasterFunction:r.rasterFunction,rasterFunctionArguments:r.rasterFunctionArguments})),this._set("rasterFunction",r)}writeRasterFunction(i,r,a){i!=null&&(r[a]=JSON.stringify(i.toJSON())),i.rasterFunctionDefinition&&(r[a]=JSON.stringify(i.rasterFunctionDefinition))}writeRasterFunctions(i,r,a){i!=null&&(r[a]=JSON.stringify(i.map(o=>o.rasterFunctionDefinition||o.toJSON())))}writePixelSize(i,r,a){i!=null&&(r[a]=JSON.stringify(i))}writeTimeExtent(i,r,a){if(i!=null){const o=i.start!=null?i.start.getTime():null,e=i.end!=null?i.end.getTime():null;r[a]=o!=null?e!=null?`${o},${e}`:`${o}`:null}}clone(){return new vt(V({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([l({types:Q,json:{write:!0}})],_.prototype,"geometry",void 0),s([P("geometry")],_.prototype,"writeGeometry",null),s([l({type:Y,json:{write:!0}})],_.prototype,"mosaicRule",null),s([P("mosaicRule")],_.prototype,"writeMosaicRule",null),s([l({type:T,json:{write:!0,name:"renderingRule"}})],_.prototype,"rasterFunction",null),s([P("rasterFunction")],_.prototype,"writeRasterFunction",null),s([l({type:[T],json:{write:!0,name:"renderingRules"}})],_.prototype,"rasterFunctions",void 0),s([P("rasterFunctions")],_.prototype,"writeRasterFunctions",null),s([l({type:q,json:{write:!0}})],_.prototype,"pixelSize",void 0),s([P("pixelSize")],_.prototype,"writePixelSize",null),s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnGeometry",void 0),s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnCatalogItems",void 0),s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnPixelValues",void 0),s([l({type:Number,json:{write:!0}})],_.prototype,"maxItemCount",void 0),s([l({type:$t,json:{write:{target:"time"}}})],_.prototype,"timeExtent",void 0),s([P("timeExtent")],_.prototype,"writeTimeExtent",null),s([l({json:{write:!0}})],_.prototype,"raster",void 0),s([l({json:{write:!0}})],_.prototype,"viewId",void 0),s([l({type:Boolean,json:{write:!0}})],_.prototype,"processAsMultidimensional",void 0),_=vt=s([R("esri.rest.support.ImageIdentifyParameters")],_);let W=class extends j{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([l({json:{write:!0}})],W.prototype,"catalogItemVisibilities",void 0),s([l({type:At,json:{write:!0}})],W.prototype,"catalogItems",void 0),s([l({type:q,json:{write:!0}})],W.prototype,"location",void 0),s([l({json:{write:!0}})],W.prototype,"name",void 0),s([l({json:{write:!0}})],W.prototype,"objectId",void 0),s([l({json:{write:!0}})],W.prototype,"processedValues",void 0),s([l({json:{write:!0}})],W.prototype,"properties",void 0),s([l({json:{write:!0}})],W.prototype,"value",void 0),W=s([R("esri.rest.support.ImageIdentifyResult")],W);var Rt;let Oe=Rt=class extends j{constructor(i){super(i),this.geometries=null,this.rasterId=null}writeGeometry(i,r,a){r.geometries={geometryType:"esriGeometryPoint",geometries:i.map(o=>o.toJSON())}}clone(){return new Rt({geometries:this.geometries?.map(i=>i.clone())??[],rasterId:this.rasterId})}};s([l({type:[q],json:{write:!0}})],Oe.prototype,"geometries",void 0),s([P("geometries")],Oe.prototype,"writeGeometry",null),s([l({type:He,json:{write:!0}})],Oe.prototype,"rasterId",void 0),Oe=Rt=s([R("esri.rest.support.ImagePixelLocationParameters")],Oe);let Xe=class extends j{constructor(){super(...arguments),this.geometries=null}};s([l({json:{write:!0}})],Xe.prototype,"geometries",void 0),Xe=s([R("esri.rest.support.ImagePixelLocationResult")],Xe);var bt;let Se=bt=class extends K{constructor(i){super(i),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=i.toJSON())}get measureOperation(){const{is3D:i,geometry:r}=this;return r.type==="point"?i?"point-3D":"point":i?"centroid-3D":"centroid"}clone(){return new bt(V({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({types:Q,json:{name:"fromGeometry",read:ae}})],Se.prototype,"geometry",void 0),s([P("geometry")],Se.prototype,"writeGeometry",null),s([l({type:B.apiValues,json:{read:B.read,write:B.write}})],Se.prototype,"measureOperation",null),s([l({json:{read:!0}})],Se.prototype,"is3D",void 0),Se=bt=s([R("esri.rest.support.ImagePointParameters")],Se);let et=class extends ge{constructor(){super(...arguments),this.point=null}};s([l({type:q,json:{name:"point.value",read:!0,write:!0}})],et.prototype,"point",void 0),et=s([R("esri.rest.support.ImagePointResult")],et);let Ie=class extends ce(j){constructor(i){super(i),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(i,r,a){r.geometries=i?.length?{geometryType:X(i[0]),geometries:i.map(o=>({...o.toJSON(),spatialReference:void 0}))}:null}};s([l({types:[Q]})],Ie.prototype,"geometries",void 0),s([P("geometries")],Ie.prototype,"writeGeometries",null),s([l({type:[He],json:{write:!0}})],Ie.prototype,"rasterIds",void 0),s([l({type:re,json:{name:"outSR",write:!0}})],Ie.prototype,"outSpatialReference",void 0),Ie=s([R("esri.rest.support.ImageToMapMultirayParameters")],Ie);let ue=class extends ce(j){constructor(r){super(r),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(r,a,o){r!=null&&(a.geometryType=X(r),a[o]={...r.toJSON(),spatialReference:void 0})}};s([l({types:Q,json:{read:ae,write:!0}})],ue.prototype,"geometry",void 0),s([P("geometry")],ue.prototype,"writeGeometry",null),s([l({json:{write:!0}})],ue.prototype,"rasterId",void 0),s([l({type:re,json:{name:"outSR",write:!0}})],ue.prototype,"outSpatialReference",void 0),s([l({json:{name:"options.DOff",write:!0}})],ue.prototype,"depthOffset",void 0),s([l({json:{name:"options.Adjust",write:!0}})],ue.prototype,"adjust",void 0),ue=s([R("esri.rest.support.ImageToMapParameters")],ue);let Je=class extends ce(j){constructor(r){super(r),this.referenceUri=null,this.rasterId=null}};s([l({type:String,json:{name:"uri",write:!0}})],Je.prototype,"referenceUri",void 0),s([l({type:Number,json:{write:!0}})],Je.prototype,"rasterId",void 0),Je=s([R("esri.rest.support.ImageUrlParameters")],Je);let tt=class extends j{constructor(){super(...arguments),this.url=null}};s([l({json:{name:"imageURL",write:!0}})],tt.prototype,"url",void 0),tt=s([R("esri.rest.support.ImageUrlResult")],tt);const ct=new _t({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let pe=class extends ce(j){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(i,r,a){i?.length&&(r.geometryType=X(i[0]),r.geometries=i.map(o=>o.toJSON()))}};s([l({types:[Q]})],pe.prototype,"geometries",void 0),s([P("geometries")],pe.prototype,"writeGeometries",null),s([l({type:Y,json:{write:!0}})],pe.prototype,"mosaicRule",void 0),s([l({type:q,json:{write:!0}})],pe.prototype,"pixelSize",void 0),s([l({json:{write:!0}})],pe.prototype,"constantZ",void 0),s([l({type:ct.apiValues,json:{read:ct.read,write:ct.write}})],pe.prototype,"baseType",void 0),pe=s([R("esri.rest.support.ImageVolumeParameters")],pe);let Z=class extends j{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};s([l({json:{write:!0}})],Z.prototype,"area",void 0),s([l({json:{write:!0}})],Z.prototype,"cut",void 0),s([l({json:{write:!0}})],Z.prototype,"fill",void 0),s([l({json:{name:"maxz",write:!0}})],Z.prototype,"maxZ",void 0),s([l({json:{name:"minz",write:!0}})],Z.prototype,"minZ",void 0),s([l({json:{name:"meanz",write:!0}})],Z.prototype,"meanZ",void 0),s([l({json:{write:!0}})],Z.prototype,"cutCellCount",void 0),s([l({json:{write:!0}})],Z.prototype,"fillCellCount",void 0),Z=s([R("esri.rest.support.ImageVolume")],Z);const Ai=Z;let rt=class extends j{constructor(){super(...arguments),this.volumes=[]}};s([l({type:[Ai],json:{write:!0}})],rt.prototype,"volumes",void 0),rt=s([R("esri.rest.support.ImageVolumeResult")],rt);let xe=class extends ce(j){constructor(i){super(i),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]=JSON.stringify(i))}};s([l({types:Q,json:{read:ae,write:!0}})],xe.prototype,"geometry",void 0),s([P("geometry")],xe.prototype,"writeGeometry",null),s([l({json:{write:!0}})],xe.prototype,"rasterId",void 0),s([l({json:{name:"options.VisibleOnly",write:!0}})],xe.prototype,"visibleOnly",void 0),xe=s([R("esri.rest.support.MapToImageParameters")],xe);let he=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(i,r){return i.spatialReference||(i={...i,spatialReference:r.Shape.spatialReference}),q.fromJSON(i)}};s([l({types:Q,json:{name:"Shape",read:ae,write:!0}})],he.prototype,"geometry",void 0),s([l({json:{name:"Length",write:!0}})],he.prototype,"length",void 0),s([l({json:{name:"Area",write:!0}})],he.prototype,"area",void 0),s([l({type:q,json:{name:"Center",write:!0}})],he.prototype,"center",void 0),s([G("center")],he.prototype,"readCenter",null),he=s([R("esri.rest.support.MeasureAreaFromImageResult")],he);var St;let Ce=St=class extends j{constructor(i){super(i),this.geometry=null,this.rasterId=void 0}writeGeometry(i,r,a){i!=null&&(r.geometryType=X(i),r[a]={...i.toJSON(),spatialReference:void 0})}clone(){const i=V({geometry:this.geometry,rasterId:this.rasterId});return new St(i)}};s([l({types:Q,json:{name:"fromGeometry",read:ae,write:!0}})],Ce.prototype,"geometry",void 0),s([P("geometry")],Ce.prototype,"writeGeometry",null),s([l({json:{write:!0}})],Ce.prototype,"rasterId",void 0),Ce=St=s([R("esri.rest.support.MeasureFromImageParameters")],Ce);let Ge=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null}};s([l({types:Q,json:{name:"Shape",read:ae,write:!0}})],Ge.prototype,"geometry",void 0),s([l({json:{name:"Length",write:!0}})],Ge.prototype,"length",void 0),Ge=s([R("esri.rest.support.MeasureLengthFromImageResult")],Ge);function It(i){const r=i?.time;if(r&&(r.start!=null||r.end!=null)){const a=[];r.start!=null&&a.push(r.start),r.end==null||a.includes(r.end)||a.push(r.end),i.time=a.join(",")}}async function Ut(i,r,a){r=M(Mr,r);const o=E(i),e=r.geometry?[r.geometry]:[],t=await Te(e),n=r.toJSON();It(n);const u=t?.[0];u!=null&&(n.geometry=se(u));const p=L({...o.query,f:"json",...n});return z(p,a)}async function Mi(i,r,a){const o=(r=M(pe,r)).toJSON();o.geometries=JSON.stringify(o.geometries);const e=E(i),t=L({...e.query,f:"json",...o}),n=z(t,a),{data:u}=await D(`${e.path}/calculateVolume`,n);return rt.fromJSON({volumes:u.results})}async function Vi(i,r,a){const o=(r=M(be,r)).toJSON();o.angleName!=null&&(o.angleName=o.angleName.join(",")),r?.point?.spatialReference?.imageCoordinateSystem&&(o.point.spatialReference=ot(r.point.spatialReference)),r?.spatialReference?.imageCoordinateSystem&&(o.spatialReference=$e(r.spatialReference));const e=E(i),t=L({...e.query,f:"json",...o}),n=z(t,a),{data:u}=await D(`${e.path}/computeAngles`,n);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new re({wkid:0,imageCoordinateSystem:u.spatialReference}):re.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Pe(u)}async function qi(i,r,a){const o=(r=M(Oe,r)).toJSON(),{geometries:e}=r;if(e)for(let c=0;c<e.length;c++)e[c].spatialReference?.imageCoordinateSystem&&(o.geometries.geometries[c].spatialReference=ot(e[c].spatialReference));const t=E(i),n=L({...t.query,f:"json",...o}),u=z(n,a),{data:p}=await D(`${t.path}/computePixelLocation`,u);return Xe.fromJSON(p)}async function Ei(i,r,a){const o=await Ut(i,r,a),e=E(i),{data:t}=await D(`${e.path}/computeStatisticsHistograms`,o),{statistics:n}=t;return n?.length&&n.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:n,histograms:t.histograms}}async function Ji(i,r,a){const o=await Ut(i,r,a),e=E(i),{data:t}=await D(`${e.path}/computeHistograms`,o);return{histograms:t.histograms}}async function Gi(i,r,a){const o=(r=M($r,r)).toJSON();It(o),o.outFields?.length&&(o.outFields=o.outFields.join(","));const e=await Te(r.geometry),t=e?.[0];t!=null&&(o.geometry=se(t));const n=E(i),u=L({...n.query,f:"json",...o}),p=z(u,a),{data:c}=await D(`${n.path}/getSamples`,p),m=c.samples.map(d=>{const h=d.value==="NaN"||d.value===""?null:d.value.split(" ").map(y=>Number(y));return{...d,pixelValue:h}});return Ar.fromJSON({samples:m})}async function Ct(i,r,a){r=M(_,r);const o=E(i),e=r.geometry?[r.geometry]:[];return Te(e).then(t=>{const n=r.toJSON(),u=t?.[0];u!=null&&(n.geometry=JSON.stringify(se(u)));const p=L({...o.query,f:"json",...n}),c=z(p,a);return D(o.path+"/identify",c)}).then(t=>W.fromJSON(t.data))}async function Li(i,r,a){r=M(le,r);const o=await nt(i,r,[r.fromGeometry,r.toGeometry],a);return Ye.fromJSON(o)}async function zi(i,r,a){r=M(ne,r);const o=await nt(i,r,[r.geometry],a);return qe.fromJSON(o)}async function Ui(i,r,a){r=M(Se,r);const o=await nt(i,r,[r.geometry],a);return et.fromJSON(o)}async function Bi(i,r,a){r=M(te,r);const o=await nt(i,r,[r.fromGeometry,r.toGeometry],a);return Ne.fromJSON(o)}async function nt(i,r,a,o){const e=E(i),t=await Te(a),n=r.toJSON();t[0]!=null&&(n.fromGeometry=JSON.stringify(se(t[0]))),t[1]!=null&&(n.toGeometry=JSON.stringify(se(t[1])));const u=L({...e.query,f:"json",...n}),p=z(u,o),{data:c}=await D(e.path+"/measure",p);return c}async function Qi(i,r,a){const o=await Bt(i,r,a);return Ge.fromJSON(o)}async function Hi(i,r,a){const o=await Bt(i,r,a);return he.fromJSON(o)}async function Bt(i,r,a){r=M(Ce,r);const o=E(i),e=r.toJSON(),t=L({...o.query,f:"json",...e}),n=z(t,a),{data:u}=await D(o.path+"/measureFromImage",n);return u}function se(i){const r=i.toJSON();return i.spatialReference?.imageCoordinateSystem&&(r.spatialReference=ot(i.spatialReference)),r}function ot(i){const{imageCoordinateSystem:r}=i;if(r){const{id:a,referenceServiceName:o}=r;return a!=null?o?{icsid:a,icsns:o}:{icsid:a}:{ics:r}}return i.toJSON()}function $e(i,r){if(!i.imageCoordinateSystem)return dt(i);const a=ot(i),{icsid:o,icsns:e}=a;return o==null||e!=null&&!r?.toLowerCase().includes("/"+e.toLowerCase()+"/")?JSON.stringify(a):`0:${o}`}async function ki(i,r,a){r=M(Ze,r);const o=E(i),e=r.toJSON();r.outSpatialReference&&(e.outSR=$e(r.outSpatialReference));const t=L({...o.query,f:"json",...e}),n=z(t,a),{data:u}=await D(o.path+"/queryBoundary",n);return je.fromJSON(u)}async function Wi(i,r,a){const o=(r=M(oe,r)).toJSON();It(o),o.objectIds?.length&&(o.objectIds=o.objectIds.join(",")),o.geometry||o.objectIds||o.time||o.where||(o.where="1=1");const e=await Te(r.geometry),t=e?.[0];t!=null&&(o.geometry=se(t));const n=t?.spatialReference??r.geometry?.spatialReference;n&&(o.inSR=$e(n));const u=E(i),p=L({...u.query,f:"json",...o}),c=z(p,a),{data:m}=await D(`${u.path}/queryGPSInfo`,c);return Ee.fromJSON(m)}async function Zi(i,r,a){const o=(r=M(ue,r)).toJSON();r.geometry.spatialReference.imageCoordinateSystem&&(o.geometry=se(r.geometry)),r.depthOffset&&r.adjust||delete o.options;const e=E(i),t=L({...e.query,f:"json",...o}),n=z(t,a),{data:u}=await D(`${e.path}/imageToMap`,n);return ae(u)}async function Ki(i,r,a){const o=(r=M(Ie,r)).toJSON();r.rasterIds?.length&&(o.rasterIds=r.rasterIds.join(","));const e=E(i),t=L({...e.query,f:"json",...o}),n=z(t,a),{data:u}=await D(`${e.path}/imageToMapMultiray`,n);return ae(u)}async function Yi(i,r,a){const o=(r=M(xe,r)).toJSON(),e=await Te(r.geometry),t=e?.[0];t!=null&&(o.geometry=se(t)),r.visibleOnly||delete o.options;const n=t?.spatialReference??r.geometry?.spatialReference;n&&(o.inSR=$e(n));const u=E(i),p=L({...u.query,f:"json",...o}),c=z(p,a),{data:m}=await D(`${u.path}/mapToImage`,c);return ae(m)}async function Xi(i,r,a){const o=(r=M(Je,r)).toJSON(),e=E(i),t=L({...e.query,f:"json",...o}),n=z(t,a),{data:u}=await D(`${e.path}/getImageUrl`,n);return tt.fromJSON(u)}async function es(i,r,a){const o=(r=M(ye,r)).toJSON(),e=await Te([r.fromGeometry,r.toGeometry]);e[0]!=null&&(o.fromGeometry=se(e[0]),e[0].spatialReference&&(o.inSR=$e(e[0].spatialReference))),e[1]!=null&&(o.toGeometry=se(e[1])),r.objectIds?.length&&(o.objectIds=o.objectIds.join(","));const t=E(i),n=L({...t.query,f:"json",...o}),u=z(n,a),{data:p}=await D(`${t.path}/find`,u);return ke.fromJSON(p)}async function ts(i,r,a){const o=E(i),e=L({...o?.query,f:"json"}),t=z(e,a),n=`${o?.path}/${r}/info`,u=D(`${n}`,t),p=D(`${n}/keyProperties`,t),c=await Promise.allSettled([u,p]),m=c[0].status==="fulfilled"?c[0].value.data:null,d=c[1].status==="fulfilled"?c[1].value.data:null;let h=null;m.statistics?.length&&(h=m.statistics.map(b=>({min:b[0],max:b[1],avg:b[2],stddev:b[3]})));const y=Le.fromJSON(m.extent),v=Math.ceil(y.width/m.pixelSizeX-.1),g=Math.ceil(y.height/m.pixelSizeY-.1),f=y.spatialReference,S=new q({x:m.pixelSizeX,y:m.pixelSizeY,spatialReference:f}),C=m.histograms?.length?m.histograms:null,w=new Wr({origin:m.origin,blockWidth:m.blockWidth,blockHeight:m.blockHeight,firstPyramidLevel:m.firstPyramidLevel,maximumPyramidLevel:m.maxPyramidLevel});return new qt({width:v,height:g,bandCount:m.bandCount,extent:y,spatialReference:f,pixelSize:S,pixelType:m.pixelType.toLowerCase(),statistics:h,histograms:C,keyProperties:d,storageInfo:w})}const rs=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),is=ir(ur,{min:0,max:255});function ss(i){const r=JSON.stringify(i),a=r.includes('"rasterFunctionDefinition":{'),o=a?r.match(/"type":"(.*?FunctionArguments")/gi):r.match(/"rasterFunction":"(.*?")/gi),e=o?.map(t=>a?t.slice(8,-18):t.slice(18,-1));return e?e.join("/"):null}const as=i=>{const r=i;let a=class extends r{constructor(){super(...arguments),this._functionRasterInfos={},this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new O({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,n){e!=null&&this.format!=="lerc"&&(t[n]=e)}writeCompressionTolerance(e,t,n){this.format==="lerc"&&e!=null&&(t[n]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?Y.fromJSON(t):null}get fieldsIndex(){return this.fields?new rr(this.fields):null}set format(e){e&&rs.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=Y.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const n=e||t.mosaicRule;return n?Y.fromJSON(n):this._isMosaicRuleSupported(t)?Y.fromJSON(t):null}writeMosaicRule(e,t,n){const{mosaicRule:u}=this;this._isValidCustomizedMosaicRule(u)&&(t[n]=u.toJSON())}writeNoData(e,t,n){e!=null&&typeof e=="number"&&(t[n]=is(e))}readObjectIdField(e,t){return e||(e=t.fields.find(u=>u.type==="esriFieldTypeOID"||u.type==="oid")?.name),e}get parsedUrl(){return sr(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;return e?t?.find(({name:u})=>u===e)?.renderer.clone():this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,n){const u=t?.layerDefinition?.drawingInfo?.renderer,p=Jr(u,n);return p==null?null:(p.type==="vector-field"&&t.symbolTileSize&&!u.symbolTileSize&&(p.symbolTileSize=t.symbolTileSize),Et(p)||ze.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),p)}writeRenderer(e,t,n){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map(u=>u.clone())??[];e.push(Kr()),this.sourceType==="mosaic-dataset"&&this.fields?.length&&e.push(Yr()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:u})=>u.toLowerCase()==="none")&&e.push(Xr()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:u})=>u.toLowerCase()!=="none").forEach(({name:u})=>e.push(ei(u)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const u=t?.multidimensionalInfo?.variables[0].unit?.trim(),p=ti(u),c=ri();e.push(p,c)}if(t?.multidimensionalInfo&&this.sourceType==="raster-dataset"){const u=ii(t.multidimensionalInfo);e.push(...u)}const n=t?.attributeTable;if(n!=null){const u=si(n);e.push(...u)}return e}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=T.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const n=t.rasterFunctionInfos;return t.renderingRule||n?.length&&n[0].name!=="None"?this._isRFTJson(t.renderingRule)?T.fromJSON({rasterFunctionDefinition:t.renderingRule}):T.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const n=e||t.extent.spatialReference;return n?re.fromJSON(n):null}writePixelType(e,t,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[n]=De.toJSON(e))}readVersion(e,t){let n=t.currentVersion;return n||(n=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let n=e,{renderer:u,symbolizer:p,pixelFilter:c}=this;const{isRawData:m}=e;if(m&&this.format!=="lerc"&&(u??=xt(this.rasterInfo,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}),p||(this.symbolizer=new Ft({rendererJSON:u.toJSON(),rasterInfo:this.rasterInfo}),p=this.symbolizer)),(m||!this._isPicture())&&u&&p&&!c){await this._updateSymbolizer(p,u);const{bandIds:d}=this;n=await this._symbolize({pixelData:e,bandIds:d,symbolizer:p},t)}return n}async highlightPixels(e,t){const n=e.highlightOptions.map(p=>{const c={...p},{bandId:m}=c;if(m==null)c.bandId=0;else{const d=this.bandIds?.length?this.bandIds.indexOf(m):m;if(d<0||d>2)return;c.bandId=d}return c}).filter(p=>p!=null),u=this._rasterJobHandler;u?await u.highlightPixels({...e,highlightOptions:n},t):ui(e.pixelBlock,e.renderedPixelBlock,n)}destroy(){this._shutdownJobHandler()}async calculateVolume(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsCalculateVolume)throw new x("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=V(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),Mi(this.url,e,this._getRequestOptions(t))}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new x("imagery-layer:compute-angles","this operation is not supported on the input image service");return Vi(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new x("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return qi(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new x("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),Ji(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new x("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),Ei(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new x("imagery-layer:measure-height","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Li(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),zi(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Bi(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Ui(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new x("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new x("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return Qi(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new x("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new x("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Hi(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t?.get(e)}getFieldDomain(e,t){const n=this.getField(e);return n?n.domain:null}fetchImage(e,t,n,u={}){if(ar(ze.getLogger(this),"`ImageryLayer.fetchImage` is deprecated in favor of 'ImageryLayer.fetchPixels'.",{replacement:"ImageryLayer.fetchPixels",version:"4.33",warnOnce:!0}),e==null||t==null||n==null)throw new x("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");return this.internalFetchImage(e,t,n,u)}async internalFetchImage(e,t,n,u={}){await this._updateCurrentRasterInfo();const{exportImageServiceParameters:p}=this;let c=!1;u.requestRawData&&(await this._initJobHandler(),p.requestRawData||this.format==="lerc"||(c=!0,p.requestRawData=!0));const m=this.getExportImageServiceParameters(e,t,n,u.timeExtent);if(c&&(p.requestRawData=!1),m==null){if(u.requestAsImageElement&&this._canRequestImageElement(this.format)){const b=document.createElement("canvas");return b.width=t,b.height=n,u.returnImageBitmap?{imageBitmap:await Tt(b,`${o(this.parsedUrl)}/exportImage`,u.signal)}:{imageOrCanvasElement:b}}const{bandIds:v,rasterInfo:g}=this,f=(v?.length||g.bandCount)??0,S=t*n,C=g.pixelType,w=[];for(let b=0;b<f;b++)w.push(pt.createEmptyBand(C,S));return{pixelData:{pixelBlock:new pt({width:t,height:n,pixels:w,mask:new Uint8Array(S),pixelType:C}),extent:e}}}const d=!!u.requestAsImageElement&&!this.pixelFilter,h=d&&!!u.returnImageBitmap,y={imageServiceParameters:m,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:d,returnImageBitmap:h,signal:u.signal};return this._requestArrayBuffer(y)}async fetchPixels(e,t,n,u={}){await this._initJobHandler(),u.applyRendering&&this._updateCurrentRasterInfo();const p=u.applyRendering?void 0:new O({layer:this,requestRawData:!0,interpolation:u.interpolation??"nearest",bandIds:u.bandIds??[]}),c=this.getExportImageServiceParameters(e,t,n,u.timeExtent,p);if(c==null)return{extent:e,pixelBlock:null};delete c.pixelType,u.bandIds||delete c.bandIds,delete c.compressionQuality;const m={imageServiceParameters:c,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:!1,returnImageBitmap:!1,signal:u.signal},{pixelData:d}=await this._requestArrayBuffer(m);return d??{extent:e,pixelBlock:null}}fetchKeyProperties(e){return D(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new x("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):D(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>At.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const n={...t,query:this._getQueryParams()};return ts(o(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,t){const{data:n}=await D(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),u=n?.ics;if(!u)return;let p=null;try{p=(await D(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!p?.spatialReference)return{ics:u,icsToPixelTransform:null,icsExtent:null,northDirection:null};const c=this.version>=10.7?D(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(F=>F.data).catch(()=>({})):{},m=p.spatialReference,d={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[p]}),inSR:dt(m),outSR:"0:"+e},h=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(d),...t}).then(F=>F.data).catch(()=>({})),y=5,v=(p.xmin+p.xmax)/2,g=(p.ymax-p.ymin)/(y+1),f=p.ymin+g,S=[];for(let F=0;F<y;F++)S.push({x:v,y:f+g*F});const C={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:S}),inSR:dt(m),outSR:"0:"+e},w=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(C),...t}).then(F=>F.data).catch(()=>({})),b=await Promise.all([c,h,w]);let A=b[0].ipxf;if(A==null){const F=u.geodataXform?.xf_0;F?.name?.toLowerCase()==="topup"&&F?.coefficients?.length===6&&(A={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:F.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const N=Le.fromJSON(b[1]?.geometries?.[0]);N&&(N.spatialReference=new re({wkid:0,imageCoordinateSystem:u}));const I=b[2].geometries?b[2].geometries.filter(F=>F?.x!=null&&F.y!=null&&F.x!=="NaN"&&F.y!=="NaN"):[],$=I.length;if($<3)return{ics:u,icsToPixelTransform:A,icsExtent:N,northDirection:null};let U=0,me=0,ve=0,Ae=0;for(let F=0;F<$;F++)U+=I[F].x,me+=I[F].y,ve+=I[F].x*I[F].x,Ae+=I[F].x*I[F].y;const ee=($*Ae-U*me)/($*ve-U*U);let Re=0;const Me=I[y-1].x>I[0].x,de=I[y-1].y>I[0].y;return ee===1/0?Re=de?90:270:ee===0?Re=Me?0:180:ee>0?Re=Me?180*Math.atan(ee)/Math.PI:180*Math.atan(ee)/Math.PI+180:ee<0&&(Re=de?180+180*Math.atan(ee)/Math.PI:360+180*Math.atan(ee)/Math.PI),{ics:u,icsToPixelTransform:A,icsExtent:N,northDirection:Re}}async generateRasterInfo(e,t){e=M(T,e);const n={...t,query:this._getQueryParams()};if(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??Pt(o(this.parsedUrl),this.sourceJSON,n);const u=ss(e);if(!u)throw new x("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[u])return this._functionRasterInfos[u];const p=ci(o(this.parsedUrl),e,n);this._functionRasterInfos[u]=p;try{return await p}catch(c){throw this._functionRasterInfos[u]=null,c}}getExportImageServiceParameters(e,t,n,u,p){e=e.clone().shiftCentralMeridian();const c=$e(e.spatialReference,o(this.parsedUrl));p??=this.exportImageServiceParameters;const m=p.toJSON(),{bandIds:d,noData:h}=m;let{renderingRule:y}=m;const v=this.rasterFunction?.rasterFunctionDefinition,g=this.renderer?.type,f=!g||g==="raster-stretch"||g==="raster-colormap"||g==="unique-value"||g==="class-breaks"||g==="raster-shaded-relief";if(d?.length&&this._hasRasterFunction(this.rasterFunction)&&!v&&f){const w={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:d}};if(y.rasterFunction==="Stretch")w.rasterFunctionArguments.Raster=y.rasterFunctionArguments.Raster,y.rasterFunctionArguments.Raster=w;else if(y.rasterFunction==="Colormap"){const b=y.rasterFunctionArguments.Raster;b?.rasterFunction==="Stretch"?(w.rasterFunctionArguments.Raster=b.rasterFunctionArguments.Raster,b.rasterFunctionArguments.Raster=w):(w.rasterFunctionArguments.Raster=b,y.rasterFunctionArguments.Raster=w)}else w.rasterFunctionArguments.Raster=y,y=w;m.bandIds=void 0}else m.bandIds=d?.join(",");Array.isArray(h)&&h.length>0&&(m.noData=h.join(","));const S=this._processMultidimensionalIntersection(null,u,p.mosaicRule);if(S.isOutSide)return null;m.mosaicRule=S.mosaicRule!=null?JSON.stringify(S.mosaicRule):null,u=S.timeExtent,m.renderingRule=this._getRenderingRuleString(T.fromJSON(y));const C={};if(u!=null){const{start:w,end:b}=u.toJSON();w&&b&&w===b?C.time=""+w:w==null&&b==null||(C.time=`${w??"null"},${b??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:t+","+n,...m,...C}}async getSamples(e,t){if(!(await this._fetchCapabilities(t?.signal))?.operations.supportsGetSamples)throw new x("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=V(e);const{raster:u}=this;return u&&e.raster==null&&(e.raster=u),Gi(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new x("imagery-layer:identify","identify operation is not supported on the input image service");e=V(e),this.version<10.91&&e.geometry?.type==="extent"&&(e.geometry=mt.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new x("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:u,rasterFunction:p}=this;return p&&e.rasterFunction==null&&(e.rasterFunction=p),u&&e.raster==null&&(e.raster=u),Ct(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMap)throw new x("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Zi(o(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMapMultiray)throw new x("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Ki(o(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMapToImage)throw new x("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Yi(o(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsFindImages)throw new x("imagery-layer:find-images","findImages operation is not supported on the input image service");return es(o(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsGetImageUrl)throw new x("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Xi(o(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new lt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryBoundary)throw new x("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},ki(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){({query:e,requestOptions:t}=await this._prepareForQuery(e,t));const n=await nr(this.url,e,t),u=this.graphicOrigin;return n.features.forEach(p=>{p.layer=this,p.origin=u}),n}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),yi(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryGPSInfo)throw new x("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},Wi(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),hi(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new x("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:u,returnTopmostRaster:p,showNoDataRecords:c}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,d=null,h=null;const y=Fe.servicePixelValue.toLowerCase(),v=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some(N=>!N.toLowerCase().startsWith(y)),this.version>=10.4)){const N=e.outFields.filter($=>$.toLowerCase().startsWith(y)&&$.length>y.length).map($=>{const U=$.slice(y.length+1);return[this._updateRenderingRulesFunctionName(U,v),U]});d=N.map($=>new T({functionName:$[0]})),h=N.map($=>$[1]);const{rasterFunction:I}=this;d.length===0?I?.functionName?(d.push(I),h.push(I.functionName)):d=null:I?.functionName&&!d.some($=>$.functionName===I.functionName)&&(d.push(I),h.push(I.functionName))}const g=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:f}=this;let S=e.timeExtent||this.timeExtent;if(f){const{isOutside:N,intersection:I}=ut(f,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(N)throw new x("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");I?.timeExtent!=null&&(S=I.timeExtent)}const C=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,S);let w=e.geometry;this.version<10.91&&w?.type==="extent"&&(w=mt.fromExtent(w));const b=this._getQueryParams({geometry:w,timeExtent:S,mosaicRule:C,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:d,pixelSize:n,returnCatalogItems:m,returnGeometry:g,raster:this.raster,maxItemCount:p?1:null});delete b.f;const A=new _(b);try{await this._generateRasterInfo(this.rasterFunction);const N=await Ct(this.url,A,{signal:t?.signal,query:{...this.customParameters}}),I=e.outFields,$=N.value!=null&&N.value.toLowerCase().includes("nodata"),U=m&&!g&&N?.catalogItems?.features.length&&(c||!$),me=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?Nr({rasterInfo:this.rasterInfo,multidimensionalDefinition:C?.multidimensionalDefinition,timeExtent:S,multidimensionalSubset:this.multidimensionalSubset}):null;if(!U)return this._processVisibleRastersResponse(N,{returnDomainValues:u,templateRRFunctionNames:h,showNoDataRecords:c,templateFields:I,effectiveMultidimensionalDefinition:me});const ve=this.objectIdField||"ObjectId",Ae=N.catalogItems?.features??[],ee=Ae.map(de=>de.attributes?.[ve]),Re=new lt({objectIds:ee,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[ve]}),Me=await this.queryRasters(Re);return Me?.features?.length&&Me.features.forEach(de=>{Ae.forEach(F=>{F.attributes[ve]===de.attributes[ve]&&de.geometry&&(F.geometry=de.geometry.clone(),e.outSpatialReference!=null&&(F.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(N,{returnDomainValues:u,templateRRFunctionNames:h,showNoDataRecords:c,templateFields:I,effectiveMultidimensionalDefinition:me})}catch{throw new x("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const n=D(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>c.data?.statistics),u=D(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>c.data?.histograms),p=await Promise.all([n,u]);return p[0]&&p[0].forEach(c=>{c.avg=c.mean,c.stddev=c.standardDeviation}),{statistics:p[0]||null,histograms:p[1]||null}}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Or(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Pt(o(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(c=>(this._set("serviceRasterInfo",c),this._set("multidimensionalInfo",c.multidimensionalInfo),mi(c,t),c)),u=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,p=this._getRasterFunctionInfos();return Promise.all([n,u,p]).then(c=>{c[1]?this._set("rasterInfo",c[1]):this._set("rasterInfo",c[0]),c[2]&&this._set("rasterFunctionInfos",c[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),ze.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([or(()=>this.rasterFunction,d=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(d).then(h=>{h&&(this.rasterInfo=h)})})]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)})}_combineMosaicRuleWithTimeExtent(e,t){const n=this.timeInfo,{multidimensionalInfo:u}=this.serviceRasterInfo;if(e==null||u==null||t==null||n?.startField==null)return e;const{startField:p}=n,c=u.variables.some(f=>f.dimensions.some(S=>S.name===p))?p:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(f=>f.dimensionName!==c),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const m=e.multidimensionalDefinition.filter(f=>f.dimensionName===c),d=t.start!=null?t.start.getTime():null,h=t.end!=null?t.end.getTime():null,y=d==null||h==null||d===h,v=y?[d||h]:[[d,h]],g=this.version>=10.8;if(m.length)m.forEach(f=>{f.dimensionName===c&&(g?(f.dimensionName=null,f.isSlice=!1,f.values=[]):(f.isSlice=y,f.values=v))});else if(!g){const f=e.multidimensionalDefinition.filter(S=>S.variableName!=null&&S.dimensionName==null);f.length?f.forEach(S=>{S.dimensionName=c,S.isSlice=y,S.values=v}):e.multidimensionalDefinition.push(new Cr({variableName:"",dimensionName:c,isSlice:y,values:v}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new x("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?M(lt,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&t?.bandCount===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Gr(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:n,ssl:u}=await D(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=n,this.sourceJSON=t,u&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map(n=>n.trim()).indexOf("tilesonly")>-1)throw new x("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:n}=e,u=t?.toLowerCase()==="resample",p=n?.ResampleType||n?.resampleType;return u&&(p===7||p===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:n}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const u=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,p=Lr({variableName:u,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const m=p?.bandIds??zr(n);!m||n.bandCount===3&&m[0]===0&&m[1]===1&&m[2]===2||(this.bandIds=m)}e||(e=p?.renderer??xt(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:u}));const c=Ur(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=c,this.symbolizer.rasterInfo=n):this.symbolizer=new Ft({rendererJSON:c,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e?.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:n}=this;return{raster:t,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,n){return this._rasterJobHandler?this._rasterJobHandler.decode({data:e,options:t}):Dt(e,t,n)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(await D(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:n,returnImageBitmap:u,signal:p}=e;if(n&&this._canRequestImageElement(t.format)){const f=`${o(this.parsedUrl)}/exportImage`,{data:S}=await D(f,{responseType:u?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:p});return S instanceof Blob?{imageBitmap:await Tt(S,f,p),params:t}:{imageOrCanvasElement:S,params:t}}const c=this._initJobHandler(),m=D(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:p}),d=(await Promise.all([m,c]))[0].data,h=t.format||"jpgpng";let y=h;if(y!=="bsq"&&y!=="bip"&&(y=Zr(d)),!y)throw new x("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(d)));const v={signal:p};return{pixelData:{pixelBlock:await(h==="gif"||h==="bmp"||h.includes("png")&&(y==="png"||y==="jpg")?Dt(d,{useCanvas:!0,...t},v):this._decodePixelBlock(d,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:h},v)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=_r(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new Y;const n=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&t.forEach(u=>u.variableName=""),t=t.filter(({variableName:u,dimensionName:p})=>u&&u!=="*"||p),!n?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const n=e.value,{templateRRFunctionNames:u,showNoDataRecords:p,returnDomainValues:c,templateFields:m}=t,d=e.processedValues;let h=e.catalogItems?.features,y=e.properties?.Values?.map(A=>A.replaceAll(/ /gi,", "))||[];const v=this.objectIdField||"ObjectId",g=typeof n=="string"&&n.toLowerCase().includes("nodata"),f=[];if(n&&!h&&(!g||p)){const A={};A[v]=0,y=[n],h=[new lr({geometry:this.fullExtent,attributes:A})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&ai(this.rasterFields,A,t.effectiveMultidimensionalDefinition)}if(!h)return[];this._updateResponseFieldNames(h,m),g&&!p&&(h=[]);const{itemPixelValue:S,servicePixelValue:C}=Fe,w=this.rasterFields.some(A=>A.name===S),b=this.graphicOrigin;for(let A=0;A<h.length;A++){const N=h[A];if(n!=null){const I=y[A],$=this.rasterFunction&&d&&d.length>0&&u&&u.length>0&&u.includes(this.rasterFunction.functionName)?d[u.indexOf(this.rasterFunction.functionName)]:n;if(I.toLowerCase()==="nodata"&&!p)continue;w&&(N.attributes[S]=I),N.attributes[C]=$,this._updateFeatureWithMagDirValues(N,I);const U=this.fields&&this.fields.length>0;let me=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?U?I:n:$;this.rasterFunction||(me=U?I:n),this._updateFeatureWithRasterAttributeTableValues(N,me)}if(N.sourceLayer=N.layer=this,N.origin=b,c&&this._updateFeatureWithDomainValues(N),u&&d&&u.length===d.length)for(let I=0;I<u.length;I++){const $=`${Fe.servicePixelValue}.${u[I]}`;N.attributes[$]=d[I]}f.push(h[A])}return f}_processMultidimensionalIntersection(e,t,n){const{multidimensionalSubset:u}=this;if(!u)return{isOutSide:!1,timeExtent:t,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,t)};if(u){const{isOutside:p,intersection:c}=ut(u,{geometry:e,timeExtent:t});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null};c?.timeExtent!=null&&(t=c.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,t),n?.multidimensionalDefinition){const{isOutside:p}=ut(u,{multidimensionalDefinition:n.multidimensionalDefinition});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,t){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:u,fields:p}=n,c=p.map(d=>d.name).find(d=>d.toLowerCase()==="value");if(!c)return;const m=u.filter(d=>d.attributes[c]===(t!=null?parseInt(t,10):null));m&&m[0]&&p.forEach(d=>{const h=ni+d.name;e.attributes[h]=m[0].attributes[d.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const n=t.split(/,\s*/).map(d=>parseFloat(d)),u=n.map(d=>[d]),p=n.map(d=>({minValue:d,maxValue:d,noDataValue:null})),c=new pt({height:1,width:1,pixelType:"f32",pixels:u,statistics:p});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:c,extent:new Le(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[c.pixels[0][0],c.pixels[1][0]]:pi([c.pixels[0][0],c.pixels[1][0]]);e.attributes[Fe.magnitude]=m[0],e.attributes[Fe.direction]=m[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value");t?.forEach(n=>{const u=e.attributes[n.name];if(u!=null){const p=n.domain.codedValues.find(c=>c.code===u);p&&(e.attributes[n.name]=p.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(u=>{if(u?.attributes)for(const p of t){const c=n.get(p)?.name;c&&c!==p&&(u.attributes[p]=u.attributes[c],delete u.attributes[c])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return e?.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(n)?t.get(n):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:n,rasterFunction:u}=this;u&&e.rasterFunction==null&&(e.rasterFunction=u),n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}async _updateCurrentRasterInfo(e){if(this.renderer||this.symbolizer){const t=await this._generateRasterInfo(this.rasterFunction,{signal:e});t&&(this.rasterInfo=t)}}_applyMosaicRule(e){const{raster:t,mosaicRule:n}=this;n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(b=>b.trim()):["image","catalog"],{currentVersion:n,maxRecordCount:u}=e,p=t.includes("image"),c=e.serviceDataType==="esriImageServiceDataTypeElevation",m=!(!e.spatialReference&&!e.extent?.spatialReference),d=t.includes("edit"),h=t.includes("mensuration")&&m,y=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(b=>b.trim()),v=h&&y.includes("basic"),g=this._isMosaicDataset(e)&&t.includes("catalog"),f=t.includes("download"),S=n>=10.7&&c||n>=11.4&&(c||h&&y.includes("3d")),C=g&&e.fields&&e.fields.length>0,w=C&&e.supportsAdvancedQueries?e.advancedQueryCapabilities:void 0;return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsImageToMap:n>=11.2&&g,supportsImageToMapMultiray:n>=11.2&&g,supportsMapToImage:n>=11.2&&g,supportsFindImages:n>=11.2&&g,supportsGetImageUrl:n>=11.3&&f,supportsMeasure:h,supportsMeasureFromImage:n>=11.2,supportsDownload:f,supportsQuery:C,supportsGetSamples:n>=10.2&&p,supportsProject:n>=10.3&&p,supportsComputeStatisticsHistograms:n>=10.4&&p,supportsQueryBoundary:n>=10.6&&p,supportsCalculateVolume:S,supportsComputePixelLocation:n>=10.7&&g,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&g,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryPivot:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,maxUniqueIDCount:void 0,supportsStatistics:!!w?.supportsStatistics,supportsOrderBy:!!w?.supportsOrderBy,supportsDistinct:!!w?.supportsDistinct,supportsPagination:!!w?.supportsPagination,supportsPaginationOnAggregatedQueries:!!w?.supportsPaginationOnAggregatedQueries,supportsStandardizedQueriesOnly:!!w?.useStandardizedQueries,supportsPercentileStatistics:!!w?.supportsPercentileStatistics,supportsCentroid:!!w?.supportsReturningGeometryCentroid,supportsCentroidOnDegeneratedQuantizedGeometry:!1,supportsCurrentUser:!1,supportsDegeneratedQuantizedGeometry:!1,supportsDistance:!!w?.supportsQueryWithDistance,supportsExtent:!!w?.supportsReturningQueryExtent,supportsGeometryProperties:!!w?.supportsReturningGeometryProperties,supportsHavingClause:!!w?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:w?.supportsSqlExpression??!!w,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!w?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:v,supportsAreaAndPerimeter:v,supportsPointOrCentroid:v,supportsHeightFromBaseAndTop:h&&y.includes("base-top height"),supportsHeightFromBaseAndTopShadow:h&&y.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:h&&y.includes("top-top shadow height"),supports3D:h&&y.includes("3d")}}}};function o(e){return e?.path??""}return s([l({clonable:!1})],a.prototype,"_functionRasterInfos",void 0),s([l({readOnly:!0})],a.prototype,"_serviceSupportsMosaicRule",void 0),s([G("_serviceSupportsMosaicRule",["currentVersion","fields"])],a.prototype,"readServiceSupportsMosaicRule",null),s([l({readOnly:!0})],a.prototype,"_rasterFunctionNamesIndex",null),s([l()],a.prototype,"adjustAspectRatio",void 0),s([l({type:[He],json:{write:!0}})],a.prototype,"bandIds",void 0),s([G("bandIds")],a.prototype,"readBandIds",null),s([l({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),s([G("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),s([l({type:Number})],a.prototype,"compressionQuality",void 0),s([P("compressionQuality")],a.prototype,"writeCompressionQuality",null),s([l({type:Number})],a.prototype,"compressionTolerance",void 0),s([P("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),s([l({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),s([l({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],a.prototype,"defaultMosaicRule",void 0),s([G("defaultMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultMosaicRule",null),s([l({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),s([l({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),s([l()],a.prototype,"rasterInfo",void 0),s([l({readOnly:!0,type:[Xt]})],a.prototype,"fields",void 0),s([l({readOnly:!0})],a.prototype,"fieldsIndex",null),s([l({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],a.prototype,"format",null),s([G("service","format",["serviceDataType"])],a.prototype,"readFormat",null),s([l({type:Le})],a.prototype,"fullExtent",void 0),s([l({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),s([l({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),s([l({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),s([l({type:String,json:{type:Ue.jsonValues,read:Ue.read,write:Ue.write}})],a.prototype,"interpolation",void 0),s([l()],a.prototype,"minScale",void 0),s([G("service","minScale")],a.prototype,"readMinScale",null),s([l()],a.prototype,"maxScale",void 0),s([G("service","maxScale")],a.prototype,"readMaxScale",null),s([l({type:Y})],a.prototype,"mosaicRule",null),s([G("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),s([P("mosaicRule")],a.prototype,"writeMosaicRule",null),s([l()],a.prototype,"multidimensionalInfo",void 0),s([l({type:Vr,json:{write:!0}})],a.prototype,"multidimensionalSubset",void 0),s([l({json:{type:He}})],a.prototype,"noData",void 0),s([P("noData")],a.prototype,"writeNoData",null),s([l({type:String,json:{type:Be.jsonValues,read:Be.read,write:Be.write}})],a.prototype,"noDataInterpretation",void 0),s([l({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),s([G("objectIdField")],a.prototype,"readObjectIdField",null),s([l({readOnly:!0})],a.prototype,"geometryType",void 0),s([l({})],a.prototype,"typeIdField",void 0),s([l({})],a.prototype,"types",void 0),s([l({readOnly:!0})],a.prototype,"parsedUrl",null),s([l({type:Function})],a.prototype,"pixelFilter",void 0),s([l()],a.prototype,"raster",void 0),s([l({readOnly:!0})],a.prototype,"sourceType",void 0),s([G("sourceType",["serviceSourceType","fields"])],a.prototype,"readSourceType",null),s([l()],a.prototype,"viewId",void 0),s([l()],a.prototype,"renderer",null),s([l({types:Er,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:qr,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"})}}}}})],a.prototype,"internalRenderer",null),s([G("internalRenderer")],a.prototype,"readRenderer",null),s([P("internalRenderer")],a.prototype,"writeRenderer",null),s([l({clonable:!1})],a.prototype,"symbolizer",void 0),s([l(er)],a.prototype,"opacity",void 0),s([l({readOnly:!0})],a.prototype,"rasterFields",null),s([l({constructOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),s([l({type:T,json:{name:"renderingRule"}})],a.prototype,"rasterFunction",null),s([G("rasterFunction",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRasterFunction",null),s([l({readOnly:!0})],a.prototype,"serviceDataType",void 0),s([l({readOnly:!0,type:re})],a.prototype,"spatialReference",void 0),s([G("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),s([l({type:De.apiValues,json:{read:De.read,type:De.jsonValues}})],a.prototype,"pixelType",void 0),s([P("pixelType")],a.prototype,"writePixelType",null),s([l({constructOnly:!0,type:qt})],a.prototype,"serviceRasterInfo",void 0),s([l()],a.prototype,"sourceJSON",void 0),s([l(tr)],a.prototype,"url",void 0),s([l({readOnly:!0})],a.prototype,"version",void 0),s([G("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=s([R("esri.layers.mixins.ArcGISImageService")],a),a};let J=class extends pr(cr(mr(dr(yr(di(as(Br(hr(fr(gr(wr(ce(vr))))))))))))){constructor(...i){super(...i),this.graphicOrigin=new wi(this),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.screenSizePerspectiveEnabled=!0,this.type="imagery",this._debouncedSaveOperations=Rr(async(r,a,o)=>{const{save:e,saveAs:t}=await br(()=>import("./imageryUtils-YbPzVGyq.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(r){case 0:return e(this,a);case 1:return t(this,o,a)}})}normalizeCtorArgs(i,r){return typeof i=="string"?{url:i,...r}:i}load(i){const r=i!=null?i.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},i).catch(Sr).then(()=>this._fetchService(r))),Promise.resolve(this)}set elevationInfo(i){i?.mode!=="relative-to-scene"&&this._set("elevationInfo",i),this._validateElevationInfo(i)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(i){this._set("legendEnabled",i)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(i){this._set("listMode",i)}writeOperationalLayerType(i,r,a){const o=this.renderer?.type==="vector-field";r[a]=o?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(i){const{rasterFields:r}=this,a=new Set,o=Fe.itemPixelValue.toLowerCase(),e=this.sourceType==="raster-dataset",t=oi.toLowerCase(),n=`${Fe.servicePixelValue.toLowerCase()}.`;for(const c of r){const m=c.name.toLowerCase();m===o||m.startsWith(n)||e&&m.startsWith(t)||a.add(c.name)}const u=Ir({fields:r,title:this.title},{...i,visibleFieldNames:a}),{rasterInfo:p}=this;return u?.fieldInfos&&p&&li(u.fieldInfos,p),u}queryFeatures(i,r){return this.queryRasters(i,r).then(a=>{if(a?.features)for(const o of a.features)o.layer=o.sourceLayer=this,o.origin=this.graphicOrigin;return a})}queryFeatureCount(i,r){return this.queryRasterCount(i,r)}redraw(){this.emit("redraw")}async save(i){return this._debouncedSaveOperations(0,i)}async saveAs(i,r){return this._debouncedSaveOperations(1,r,i)}serviceSupportsSpatialReference(i){return xr(this,i)}write(i,r){if(!this._isPreviewLayer)return super.write(i,r);if(r?.messages){const a=`${r.origin}/${r.layerContainerType||"operational-layers"}`;r.messages.push(new x("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}_validateElevationInfo(i){jt(ze.getLogger(this),fi("Imagery layers","relative-to-scene",i)),jt(ze.getLogger(this),gi("Imagery layers",i))}};s([l({type:Fr,value:null,json:{name:"layerDefinition.elevationInfo",write:!0,origins:{"portal-item":{read:!1,write:!1},"web-map":{read:!1,write:!1}}}})],J.prototype,"elevationInfo",null),s([l({readOnly:!0,clonable:!1})],J.prototype,"graphicOrigin",void 0),s([l(Dr)],J.prototype,"legendEnabled",null),s([l({type:["show","hide"]})],J.prototype,"listMode",null),s([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],J.prototype,"isReference",void 0),s([l({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],J.prototype,"operationalLayerType",void 0),s([P("web-map","operationalLayerType")],J.prototype,"writeOperationalLayerType",null),s([l(Tr)],J.prototype,"popupEnabled",void 0),s([l({type:Pr,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],J.prototype,"popupTemplate",void 0),s([l({readOnly:!0})],J.prototype,"defaultPopupTemplate",null),s([l(jr)],J.prototype,"screenSizePerspectiveEnabled",void 0),s([l({readOnly:!0,json:{read:!1}})],J.prototype,"type",void 0),s([l({readOnly:!0})],J.prototype,"_isPreviewLayer",null),J=s([R("esri.layers.ImageryLayer")],J);const Us=J;export{Us as default};
