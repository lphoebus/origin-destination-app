import{b6 as l,b8 as i,ba as m,bb as d,eG as f,eI as b,eH as g,bH as $,j9 as w,bf as j,eA as v}from"./index-Bkom2Sdc.js";import{a as I}from"./Association-CuMQNTJx.js";let o=class extends l{constructor(e){super(e),this.associations=[]}};i([m({type:[I],json:{write:!0}})],o.prototype,"associations",void 0),o=i([d("esri.rest.networks.support.QueryAssociationsResult")],o);function S(s){const{returnDeletes:e,elements:r,gdbVersion:n,moment:a}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(r.map(t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId}))),types:JSON.stringify(s.types.map(t=>v.toJSON(t))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:n,moment:a??Date.now()}}async function N(s,e,r){const n=f(s),a={...S(e),f:"json"},t=b({...n.query,...a}),c=g(t,{...r,method:"post"}),u=`${n.path}/associations/query`,{data:p}=await $(u,c),y=o.fromJSON(p);return e.types.includes("connectivity")&&w(j.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),y}export{N as queryAssociations};
