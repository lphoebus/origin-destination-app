import{bb as i,kB as z,kC as A,kD as X,eg as Y,ke as J,fk as I,kd as V,cR as Z,kf as tt,kg as et,kh as st,ki as ot,kj as it,kk as rt,kl as at,da as nt,kE as dt,kF as B}from"./index-C2z3vZ9k.js";import{r as pt}from"./vec3f32-WCVSSNPR.js";import{n as ht}from"./WGLContainer-BZJApB0t.js";import{o as lt}from"./FeatureCommandQueue-C1_QL2kt.js";import{t as G}from"./utils-ehcGqGxa.js";import{j as ut,_ as E,y as ct,X as ft,c as w,e as vt,d as mt,w as yt,f as L,g as n,r as gt,U as wt,m as U,i as xt,P as W,v as _t,t as Mt}from"./GraphShaderModule-B9_UmIx1.js";import{e as St}from"./TechniqueType-pk2C5RYg.js";import{t as q}from"./VertexElementDescriptor-BLyltQyJ.js";class P extends xt{}i([L(0,w)],P.prototype,"pos",void 0),i([L(1,w)],P.prototype,"uv",void 0);class $t extends _t{}class F extends W{}i([n(gt)],F.prototype,"dvs",void 0);class m extends W{}i([n(w)],m.prototype,"perspective",void 0),i([n(w)],m.prototype,"texSize",void 0),i([n(E)],m.prototype,"wrapAroundShift",void 0),i([n(E)],m.prototype,"opacity",void 0),i([n(wt)],m.prototype,"texture",void 0);class g extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new E(1).add(ct(t,this.config.perspective)),o=new ft(e.pos.add(new w(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(r.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}i([n(F)],g.prototype,"transform",void 0),i([n(m)],g.prototype,"config",void 0),i([z(0,U(P))],g.prototype,"vertex",null),i([z(0,U($t))],g.prototype,"fragment",null);class kt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new g}}render(e,t){const{context:s,painter:o}=e,r=this._getMesh(e,t);o.setPipelineState(G);const{isWrapAround:d,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...G,stencil:{write:!1,test:{compare:X.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,r),d&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,r))}shutdown(){Y(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new q("pos",2,I.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new q("uv",2,I.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:J.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class Tt extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=V(),this._overlayTechnique=new kt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:r,resolution:d,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const x=B(u),p=r*o[0],v=r*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=d*p,k=d*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(p/2,v/2)),rt(a,a,pt(p/$,-v/k,1)),at(a,a,-x),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:r,worldScreenWidth:d,size:u,viewpoint:c}=s,f=this._localOrigin;let x,p=0;const v=nt(r);if(v&&r.isWrappable){const y=u[0],S=u[1],_=B(o),$=Math.abs(Math.cos(_)),k=Math.abs(Math.sin(_)),a=Math.round(y*$+S*k),[C,D]=v.valid,h=dt(r),{x:T,y:N}=c.targetGeometry,K=[T,N],b=[0,0];s.toScreen(b,K);const M=[0,0];let R;R=a>d?.5*d:.5*a;const j=Math.floor((T+.5*h)/h),H=C+j*h,Q=D+j*h,O=[b[0]+R,0];s.toMap(M,O),M[0]>Q&&(p=h),O[0]=b[0]-R,s.toMap(M,O),M[0]<H&&(p=-h),x={worldWidth:h,xBounds:[C,D]}}for(const y of t)y.updateDrawCoords(f,p,s,x)}}export{Tt as u};
