const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-DTMFfDiQ.js","assets/utils-C7umzGDt.js","assets/index-C2z3vZ9k.js","assets/index-DaKHjF4b.css","assets/originUtils-av9iyGZ9.js","assets/saveUtils-CiwNsJLd.js","assets/rasterFieldUtils-8FBWYX_U.js"])))=>i.map(i=>d[i]);
import{b7 as A,aZ as W,f3 as Ae,qk as Be,dR as Le,bb as R,bc as C,bd as Y,dA as Fe,ay as F,eb as ke,aw as Se,ql as Je,aP as ze,cC as Ue,dT as re,co as He,cI as je,be as V,b5 as ge,gv as Ge,gz as We,gx as qe,gy as Ve,gL as Ye,gZ as Xe,gK as Ke,gw as Ze,gA as Qe,cp as et,gB as tt,aN as st,al as at,h0 as se,b4 as it,jn as rt,d7 as nt,aO as ot,gD as lt,ec as ct,g0 as Te}from"./index-C2z3vZ9k.js";import{$ as Z,i as fe,t as U,n as Me,e as L,o as q,u as ae,X as ut,m as ft}from"./xmlUtilities-DC4Ge3Jz.js";import{d as ht,N as Pe}from"./RasterJobHandlerMixin-BvcPsI_9.js";import{c as pt,f as dt,o as mt}from"./RasterPresetRendererMixin-DadMTU7h.js";import{p as gt,N as yt,o as wt,c as xt,e as It,j as bt,$ as vt,b as St,k as Tt,l as Rt,r as _t,t as Ot}from"./rasterFieldUtils-8FBWYX_U.js";import{c as ne,R as Ct,I as Ft,B as kt}from"./dataUtils-0RHTvcdC.js";import{m as le,p as Mt,h as Ne,g as we,P as Pt,l as xe,r as Nt,b as Re,W as $t,C as Et,G as Dt,e as _e,H as At,t as Bt,N as Oe,k as Lt,U as Jt}from"./RasterSymbolizer-yBAeRvh9.js";import{m as Ie,n as zt}from"./PolynomialTransform-lyTk6ftI.js";import{T as Ut}from"./TilemapCache-ssvIqpSp.js";import{w as Ht,T as jt}from"./rasterFunctionHelper-DfjBovTR.js";import"./QueueProcessor-BcSu0-3Q.js";import"./RawBlockCache-4JaVFecA.js";import"./rasterProjectionHelper-BadGIF5p.js";import"./clipUtils-BvllJZeO.js";import"./ClassBreaksDefinition-BlEYQF17.js";import"./_commonjsHelpers-DCkdB7M8.js";function $e(s){return["x","e","east","long","longitude"].includes(s.toLowerCase())}function Ee(s){return["y","n","west","lat","latitude"].includes(s.toLowerCase())}function Gt(s){const{axes:e}=s.domain,t=Object.keys(e),a=[],i=[];let r=-1,n=-1,c=[];for(let y=0;y<t.length;y++){const S=t[y];$e(S)?r=y:Ee(S)&&(n=y);const v=e[S],x=[];if("values"in v){v.values.forEach((I=>x.push(typeof I=="string"?new Date(I).getTime():I)));const T=x[1]-x[0];a.push([x[0]-.5*T,x[x.length-1]+.5*T]),i.push(T)}else{const{start:T,stop:I,num:O}=v,b=(I-T)/(O-1);a.push([T-.5*b,I+.5*b]),i.push(b);for(let k=0;k<O;k++)x.push(T+b*k)}c.push({name:S,values:x,extent:[x[0],x[x.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),c=c.filter(((y,S)=>!(S===r||S===n)));const{referencing:l}=s.domain,o=l.find((y=>y.coordinates.includes(t[r]))).system.id,u=o==null?void 0:o.slice(o.lastIndexOf("/")+1),h=u==null||u==="CRS84"?4326:Number(u),f=new A({wkid:h}),[p,w]=a[r],[m,d]=a[n],g=new W({xmin:p,xmax:w,ymin:m,ymax:d,spatialReference:f});return{width:Math.round(g.width/i[r]),height:Math.round(g.height/i[n]),extent:g,dimensions:c}}function he(s){var t;const e=(t=Le())==null?void 0:t.language;return e?s[e]??Object.values(s)[0]:Object.values(s)[0]}function pe(){return Math.round(255*Math.random())}function Wt(s){var a,i;const e={},{parameters:t}=s;if(!t)return e;for(const[r,n]of Object.entries(t)){const{type:c,description:l,unit:o,categoryEncoding:u,observedProperty:h}=n;if(c==="Parameter"&&(e[r]={},l&&(e[r].description=he(l)),o&&(e[r].unit=o.label?he(o.label):null,e[r].symbol=(a=o.symbol)==null?void 0:a.value),u)){const f=Object.entries(u).map(((m,d)=>({OID:d,Value:Number(m[1]),ClassName:m[0].slice(m[0].lastIndexOf("/")+1),Count:1})));let p=!1;(i=h==null?void 0:h.categories)!=null&&i.length&&(h.categories.forEach((m=>{if(!m.id)return;const d=m.id.slice(m.id.lastIndexOf("/")+1),g=f.find((S=>S.ClassName===d));if(!g)return;const y=m.label?he(m.label):null;if(g.Label=y,m.preferredColor){const S=Ae.fromHex(m.preferredColor);S&&(p=!0,g.Red=S.r,g.Green=S.g,g.Blue=S.b)}})),p&&f.forEach((m=>{m.Red==null&&(m.Red=pe(),m.Green=pe(),m.Blue=pe())})));const w={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:f.map((m=>({attributes:m})))};p&&w.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[r].attributeTable=w}}return e}function qt(s){let e=Number.MAX_VALUE,t=-Number.MAX_VALUE;for(let a=0;a<s.length;a++){const i=s[a];i!=null&&(i<e&&(e=i),i>t&&(t=i))}return Be(e,t)}function Vt(s,e,t){const a=s.map(((l,o)=>({name:l,count:e[o]}))).sort(((l,o)=>l.name>o.name?-1:1)),i=(r=1,l=>r*=l.count);var r;const n=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let c=0;for(let l=s.length-1;l>=0;l--)c+=n[a.findIndex((({name:o})=>o===s[l]))]*(t%e[l]),t=Math.floor(t/e[l]);return c}function Yt(s){var f;const{width:e,height:t,extent:a,dimensions:i}=Gt(s),{ranges:r}=s,n=Object.keys(r).sort(((p,w)=>p<w?-1:1)),c=[];for(let p=0;p<n.length;p++){const w=n[p];i!=null&&i.length&&c.push({name:w,dimensions:i})}const l=Wt(s);c.forEach((p=>l[p.name]&&Object.assign(p,l[p.name])));const o=c.length?{variables:c}:void 0,u=[];for(let p=0;p<n.length;p++){const w=n[p],{values:m,dataType:d,axisNames:g,shape:y}=r[w],S=y.length>2?p*y.slice(0,-2).reduce(((b,k)=>b*k)):0,v=g.slice(0,-2),x=y.slice(0,-2),T=d==="float"?"f32":qt(m),I=e*t,O=m.length/I;for(let b=0;b<O;b++){const k=ne.createEmptyBand(T,I),_=new Uint8Array(I).fill(255);let M=!1;const J=b*I;for(let P=0;P<I;P++){const $=m[J+P];$==null?(_[P]=0,M=!0):k[P]=$}if(p===0||i!=null&&i.length){const P=new ne({width:e,height:t,mask:M?_:null,pixels:[k],pixelType:T});P.updateStatistics(),(i==null?void 0:i.length)?u[Vt(v,x,b)+S]=P:u.push(P)}else{const P=u[b];P.pixels.push(k),M?P.mask&&(P.mask=ne.combineBandMasks([P.mask,_])):P.mask=M?_:null}}}const h=(f=Object.values(l).find((p=>p.attributeTable)))==null?void 0:f.attributeTable;return{extent:a,pixelBlocks:u,multidimensionalInfo:o,attributeTable:h,bandNames:o?void 0:n}}let X=class extends Z{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(s,e,t,a={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,c]=r.storageInfo.tileInfo.size,{sliceId:l}=a,{pixelBlocks:o}=this.source,u={pixelBlock:l==null?o[0]:o[l],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:c},level:s,row:e,col:t},h=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,a):Ct(u);return Promise.resolve(h)}const i=this._pixelBlockTiles.get(`${s}/${e}/${t}`);return Promise.resolve(i)}async _open(s){const e=this.source,{pixelBlocks:t,attributeTable:a,statistics:i,histograms:r,name:n,nativeExtent:c,transform:l}=e,o=t[0],{width:u,height:h,pixelType:f}=o,p=e.extent??new W({xmin:-.5,ymin:.5,xmax:u-.5,ymax:h-.5,spatialReference:new A({wkid:3857})}),w=e.isPseudoSpatialReference??!e.extent,m={x:p.width/u,y:p.height/h},d={...e.keyProperties};a&&(d.DataType="Thematic");const g=new le({width:u,height:h,pixelType:f,extent:p,nativeExtent:c,attributeTable:a,transform:l,pixelSize:m,spatialReference:p.spatialReference,bandCount:o.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:w,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(o,{width:512,height:512},s),g.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(s,e,t){var h,f;const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,r=a.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:s,tileSize:e,maximumPyramidLevel:i,useBilinear:r},t):Promise.resolve(Ft(s,e,i,r)),c=a.statistics!=null,l=a.histograms!=null,o=this.ioConfig.skipStatistics||c?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:s},t):Promise.resolve(Mt(s)),u=await Fe([n,o]);if(!u[0].value&&u[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,c||(a.statistics=(h=u[1].value)==null?void 0:h.statistics),l||(a.histograms=(f=u[1].value)==null?void 0:f.histograms)}async _buildMDimStats(s,e,t){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const r=i.dimensions.map((o=>{var u,h;return new gt({variableName:i.name,dimensionName:o.name,values:[((u=o.values)==null?void 0:u[0])??((h=o.extent)==null?void 0:h[0])],isSlice:!0})})),n=yt(r,e),c=n==null?null:s[n];if(c==null)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:c},t):Ne(c);i.statistics=l.statistics,i.histograms||(i.histograms=l.histograms)}}};R([C({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),R([C()],X.prototype,"source",void 0),R([C()],X.prototype,"url",null),X=R([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],X);const be=X;let Q=class extends Z{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,t,a,i={}){return this._inMemoryRaster.fetchRawTile(e,t,a,i)}async _open(e){const{extent:t,pixelBlocks:a,multidimensionalInfo:i,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:c,histograms:l}=Ne(a[0]),o=n==null?void 0:n.map((p=>({BandName:p}))),u={DataType:r?"Thematic":i?"Scientific":"Generic",BandProperties:o},h=new be({source:{extent:t,pixelBlocks:a,attributeTable:r?ke.fromJSON(r):null,multidimensionalInfo:i,statistics:c,histograms:l,keyProperties:u,isPseudoSpatialReference:!1}});await h.open(),this._inMemoryRaster=h;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",h.rasterInfo)}async _fetchData(e){var r,n,c,l;const t=this.source??(await this.request(this.url,{signal:e==null?void 0:e.signal})).data,a="imagery-tile-layer:open-coverage-json";if(((r=t.type)==null?void 0:r.toLowerCase())!=="coverage"||((c=(n=t.domain)==null?void 0:n.domainType)==null?void 0:c.toLowerCase())!=="grid")throw new F(a,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new F(a,"Missing ranges in the grid coverage data");if(!((l=t.domain.referencing)!=null&&l.length))throw new F(a,"Missing domain referencing in the grid coverage data");const i=Object.values(t.ranges);for(let o=0;o<i.length;o++){const{axisNames:u,shape:h,type:f,values:p}=i[o];if(!(f.toLowerCase()==="ndarray"&&(p!=null&&p.length)&&(u!=null&&u.length)&&(h!=null&&h.length)))throw new F(a,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!($e(u[u.length-1])&&Ee(u[u.length-2])))throw new F(a,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Yt(t)}};R([C({type:String,json:{write:!0}})],Q.prototype,"datasetFormat",void 0),R([C({constructOnly:!0})],Q.prototype,"source",void 0),Q=R([Y("esri.layers.support.rasterDatasets.CovJSONRaster")],Q);const Xt=Q;function Ce(s,e){if(!s||!e)return null;const t=[];for(let a=0;a<s.length;a++)t.push(s[a]),t.push(e[a]);return t}function Kt(s){const e=L(s,"GeodataXform"),t=ce(q(e,"SpatialReference/WKID")||U(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:t,transform:null};const a=q(e,"PolynomialOrder")??1,i=ae(e,"CoeffX/Double"),r=ae(e,"CoeffY/Double"),n=ae(e,"InverseCoeffX/Double"),c=ae(e,"InverseCoeffY/Double"),l=Ce(i,r),o=Ce(n,c);return{spatialReference:t,transform:l&&o&&l.length&&o.length?new Ie({spatialReference:t,polynomialOrder:a,forwardCoefficients:l,inverseCoefficients:o}):null}}function Zt(s){var f;const e=q(s,"NoDataValue"),t=L(s,"Histograms/HistItem"),a=q(t,"HistMin"),i=q(t,"HistMax"),r=q(t,"BucketCount"),n=(f=U(t,"HistCounts"))==null?void 0:f.split("|").map((p=>Number(p)));let c,l,o,u;Me(s,"Metadata/MDI").forEach((p=>{const w=Number(p.textContent??p.nodeValue);switch(p.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=w;break;case"STATISTICS_MAXIMUM":l=w;break;case"STATISTICS_MEAN":o=w;break;case"STATISTICS_STDDEV":u=w}}));const h=q(s,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n!=null&&n.length&&a!=null&&i!=null?{min:a,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:h,statistics:c!=null&&l!=null?{min:c,max:l,avg:o,stddev:u}:null}}function ce(s){if(!s)return null;let e=Number(s);if(!isNaN(e)&&e!==0)return new A({wkid:e});if(s=String(s).trim(),Je(s))return new A({wkt2:s});const t=s.toUpperCase();if(t.startsWith("COMPD_CS")){if(!t.includes("VERTCS")||!t.includes("GEOGCS")&&!t.startsWith("PROJCS"))return null;const a=t.indexOf("VERTCS"),i=t.indexOf("PROJCS"),r=i>-1?i:t.indexOf("GEOGCS");if(r===-1)return null;const n=s.slice(r,s.lastIndexOf("]",a)+1).trim(),c=s.slice(a,s.lastIndexOf("]")).trim();e=de(n);const l=new A(e?{wkid:e}:{wkt:n}),o=de(c);return o&&(l.vcsWkid=o),l}return t.startsWith("GEOGCS")||t.startsWith("PROJCS")?(e=de(s),new A(e!==0?{wkid:e}:{wkt:s})):null}function de(s){var i;const e=s.replaceAll("]","[").replaceAll('"',"").split("[").map((r=>r.trim())).filter((r=>r!=="")),t=e[e.length-1].split(","),a=(i=t[0])==null?void 0:i.toLowerCase();if((a==="epsg"||a==="esri")&&s.endsWith('"]]')){const r=Number(t[1]);if(!isNaN(r)&&r!==0)return r}return 0}function ve(s){var a;if(((a=s==null?void 0:s.documentElement.tagName)==null?void 0:a.toLowerCase())!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};s.documentElement.childNodes.forEach((i=>{if(i.nodeType===1){if(fe(i,"SRS")){if(!e.spatialReference){const r=U(i);e.spatialReference=ce(r)}}else if(fe(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:r,transform:n}=Kt(i);e.transform=n,e.spatialReference||(e.spatialReference=r)}else Me(i,"MDI").forEach((r=>e.metadata[r.getAttribute("key")]=U(r)));else if(fe(i,"PAMRasterBand")){const r=Zt(i);r.sourceBandIndex!=null&&e.rasterBands[r.sourceBandIndex]==null?e.rasterBands[r.sourceBandIndex]=r:e.rasterBands.push(r)}}}));const t=e.rasterBands;if(t.length){const i=!!t[0].statistics;e.statistics=i?t.map((n=>n.statistics)).filter(Se):null;const r=!!t[0].histogram;e.histograms=r?t.map((n=>n.histogram)).filter(Se):null}return e}let oe=class extends Z{fetchRawTile(s,e,t,a={}){return this._inMemoryRaster.fetchRawTile(s,e,t,a)}async _open(s){const e=await this._fetchData(s);let{spatialReference:t,statistics:a,histograms:i,transform:r}=await this._fetchAuxiliaryData(s);const n=!t;n&&(t=new A({wkid:3857})),i!=null&&i.length&&a==null&&(a=we(i));const{width:c,height:l}=e;let o=new W({xmin:-.5,ymin:.5-l,xmax:c-.5,ymax:.5,spatialReference:t});const u=r?r.forwardTransform(o):o;let h=!0;if(r){const p=r.forwardCoefficients;h=p&&p[1]===0&&p[2]===0,h&&(r=null,o=u)}const f=new be({source:{extent:u,nativeExtent:o,transform:r,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(f.ioConfig.skipMapInfo=!0),await f.open(),f.source=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}async _fetchData(s){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:s==null?void 0:s.signal}),t=Pt(e).toUpperCase();if(t!=="JPG"&&t!=="PNG"&&t!=="GIF"&&t!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",t);const a=t.toLowerCase(),i=a==="gif"||a==="bmp"||!ze("ios"),r=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new F("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(s){var u;const e=s==null?void 0:s.signal,{skipExtensions:t=[],skipMapInfo:a}=this.ioConfig,i=a||t.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,c=n&&t.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),l=await Fe([i,c]);if(e!=null&&e.aborted)throw Ue();const o=ve((u=l[0].value)==null?void 0:u.data);if(!o.transform){const h=l[1].value?l[1].value.data.split(`
`).slice(0,6).map((f=>Number(f))):null;o.transform=(h==null?void 0:h.length)===6?new Ie({forwardCoefficients:[h[4],h[5],h[0],-h[1],h[2],-h[3]]}):null}return o}};R([C({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=R([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const ie=oe;let ee=class extends Z{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(s,e,t,a={}){var J;const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,c=n!=null&&!!a.transposedVariableName;if(this._slices&&!c&&a.sliceId==null)return null;const l=c?0:i.maximumPyramidLevel-s+this._levelOffset,o=`${this.url}/tile/${l}/${e}/${t}`,u=this._slices?c?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null;let h,f;if(i.isBsqTile){const P=((J=a.bandIds)!=null&&J.length?a.bandIds:[0,1,2]).map((H=>this.request(o,{query:{...u,bandId:H},responseType:"array-buffer",signal:a.signal}))),$=await Promise.all(P),E=$.map((H=>H.data.byteLength)).reduce(((H,De)=>H+De)),z=new Uint8Array(E);f=[];let ue=0;for(const{data:H}of $)f.push(ue),z.set(new Uint8Array(H),ue),ue+=H.byteLength;h=z.buffer}else h=(await this.request(o,{query:u,responseType:"array-buffer",signal:a.signal})).data;if(!h)return null;const p=c?n.tileSize:i.tileInfo.size,w=await this.decodePixelBlock(h,{width:p[0],height:p[1],planes:f==null?void 0:f.length,offsets:f,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:c,noDataValue:this.rasterInfo.noDataValue});if(w==null)return null;const m=i.blockBoundary[s];if(i.compression!=="jpg"||t>m.minCol&&t<m.maxCol&&e>m.minRow&&e<m.maxRow)return w;const{origin:d,blockWidth:g,blockHeight:y}=i,{x:S,y:v}=this.getPyramidPixelSize(s),x=Math.round((r.xmin-d.x)/S)%g,T=Math.round((r.xmax-d.x)/S)%g||g,I=Math.round((d.y-r.ymax)/v)%y,O=Math.round((d.y-r.ymin)/v)%y||y,b=t===m.minCol?x:0,k=e===m.minRow?I:0,_=t===m.maxCol?T:g,M=e===m.maxRow?O:y;return kt(w,{x:b,y:k},{width:_-b,height:M-k}),w}getSliceIndex(s){if(!this._slices||s==null||s.length===0)return null;const e=s;for(let t=0;t<this._slices.length;t++){const a=this._slices[t].multidimensionalDefinition;if(a.length===e.length&&!a.some((i=>{const r=e.find((n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName));return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0})))return t}return null}async fetchVariableStatisticsHistograms(s,e){var r,n,c;const t=this.request(this.url+"/statistics",{query:{variable:s,f:"json"},signal:e}).then((l=>{var o;return(o=l.data)==null?void 0:o.statistics})),a=this.request(this.url+"/histograms",{query:{variable:s,f:"json"},signal:e}).then((l=>{var o;return(o=l.data)==null?void 0:o.histograms})),i=await Promise.all([t,a]);return i[0]&&i[0].forEach((l=>{l.avg=l.mean,l.stddev=l.standardDeviation})),(c=(n=(r=i[1])==null?void 0:r[0])==null?void 0:n.counts)!=null&&c.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(s,e={}){if(!this._tilemapCache)return 0;let t=this.identifyPixelLocation(s,0,e.datumTransformation);if(t===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-a+this._levelOffset;const n=t.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,t.row,t.col,e)==="available")break}catch{}if(r--,a++,t=this.identifyPixelLocation(n,a,e.datumTransformation),t===null)return null}return r===-1||t==null?null:a}async _open(s){var I,O;const e=s==null?void 0:s.signal,t=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});t.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=t.data;if(this.sourceJSON=a,!a)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=((I=a.name)==null?void 0:I.slice(a.name.indexOf("/")+1))??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new F("image-server-raster:open","cannot initialize image service");pt(r,a);const n=this.tileType==="Map"?Qt(a.tileInfo,a):re.fromJSON(a.tileInfo);He(n);const[c,l]=this._computeMinMaxLOD(r,n),{extent:o,pixelSize:u}=r,h=.5/r.width*u.x,f=Math.max(u.x,u.y),{lods:p}=n;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(u.x-u.y)>h||!p.some((b=>Math.abs(b.resolution-f)<h)))&&(u.x=u.y=c.resolution,r.width=Math.ceil((o.xmax-o.xmin)/u.x-.1),r.height=Math.ceil((o.ymax-o.ymin)/u.y-.1));const w=c.level-l.level,[m,d]=n.size,g=[],y=[];p.forEach(((b,k)=>{b.level>=l.level&&b.level<=c.level&&g.push({x:b.resolution,y:b.resolution}),k<p.length-1&&y.push(Math.round(10*b.resolution/p[k+1].resolution)/10)})),g.sort(((b,k)=>b.x-k.x));const S=this.computeBlockBoundary(o,m,d,n.origin,g,w),v=g.length>1?g.slice(1):null;let x;a.transposeInfo&&(x={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:((O=r.keyProperties)==null?void 0:O._yxs.PacketSize)??0});const T=y.length<=1||y.length>=3&&y.slice(0,-1).every((b=>b===y[0]))?y[0]??2:Math.round(10/(l.resolution/c.resolution)**(-1/w))/10;if(r.storageInfo=new xe({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:v,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:w,tileInfo:n,isBsqTile:!!a.bsq,transposeInfo:x,blockBoundary:S}),es(r),this._set("rasterInfo",r),a.capabilities.toLowerCase().includes("tilemap")){const b={tileInfo:r.storageInfo.tileInfo,parsedUrl:je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Ut({layer:b})}}async _fetchRasterInfo(s){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,c=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),l=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),o=A.fromJSON(e.spatialReference||n.spatialReference),u=new V({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:o});return new le({width:c,height:l,bandCount:3,extent:W.fromJSON(n),spatialReference:o,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:t}=s,a=dt(this.url,this.sourceJSON,{signal:t,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:t}).then((n=>{var c;return(c=n.data)==null?void 0:c.slices})).catch((()=>null)):null,r=await Promise.all([a,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:s}=this;s.minScale&&s.minScale<0&&(s.minScale=0),s.maxScale&&s.maxScale<0&&(s.maxScale=0)}_computeMinMaxLOD(s,e){const{pixelSize:t}=s,a=.5/s.width*t.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map((f=>f.level)))),n=e.lodAt(Math.min.apply(null,i.map((f=>f.level)))),{tileType:c}=this;if(c==="Map")return this._levelOffset=i[0].level,[r,n];if(c==="Raster")return[i.find((f=>f.resolution===t.x))??r,n];const{minScale:l,maxScale:o}=this.sourceJSON;let u=r;o>0&&(u=i.find((f=>Math.abs(f.scale-o)<a)),u||(u=i.filter((f=>f.scale>o)).sort(((f,p)=>f.scale>p.scale?1:-1))[0]??r));let h=n;return l>0&&(h=i.find((f=>Math.abs(f.scale-l)<a))??n,this._levelOffset=h.level-n.level),[u,h]}};function Qt(s,e){if(!s)return null;const{minScale:t,maxScale:a,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return re.fromJSON({...s,lods:s.lods.filter((({level:n})=>n!=null&&n>=i&&n<=r))});if(t!==0&&a!==0){const n=o=>Math.round(1e4*o)/1e4,c=t?n(t):1/0,l=a?n(a):-1/0;return re.fromJSON({...s,lods:s.lods.filter((o=>{const u=n(o.scale);return u<=c&&u>=l}))})}return re.fromJSON(s)}function es(s){const{extent:e,spatialReference:t}=s;e.xmin>-1&&e.xmax>181&&(t!=null&&t.wkid)&&t.isGeographic&&(s.nativeExtent=s.extent,s.transform=new zt,s.extent=s.transform.forwardTransform(e))}R([C({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),R([C()],ee.prototype,"tileType",void 0),ee=R([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],ee);const ts=ee,B=new Map;B.set("Int8","s8"),B.set("UInt8","u8"),B.set("Int16","s16"),B.set("UInt16","u16"),B.set("Int32","s32"),B.set("UInt32","u32"),B.set("Float32","f32"),B.set("Float64","f32"),B.set("Double64","f32");const G=new Map;G.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),G.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),G.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),G.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let K=class extends Z{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(s,e,t,a={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,c=n[s];if(!c||c.maxRow<e||c.maxCol<t||c.minRow>e||c.minCol>t)return null;const{bandCount:l,pixelType:o}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(s,e,t);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const _=new Uint8Array(i*r);return new ne({width:i,height:r,pixels:void 0,mask:_,validPixelCount:0})}const{bandIds:p}=this.ioConfig,w=this._getBandSegmentCount(),m=[];let d=0;for(d=0;d<w;d++)p&&!p.includes(d)||m.push(this.request(this._files.data,{range:{from:u[d].from,to:u[d].to},responseType:"array-buffer",signal:a.signal}));const g=await Promise.all(m),y=g.map((_=>_.data.byteLength)).reduce(((_,M)=>_+M)),S=new Uint8Array(y),v=[];let x=0;for(d=0;d<w;d++)v.push(x),S.set(new Uint8Array(g[d].data),x),x+=g[d].data.byteLength;const T=G.get(this.rasterInfo.storageInfo.compression).decoderFormat,I=await this.decodePixelBlock(S.buffer,{width:i,height:r,format:T,planes:(p==null?void 0:p.length)||l,offsets:v,pixelType:o});if(I==null)return null;let{noDataValue:O}=this.rasterInfo;if(O!=null&&T!=="lerc"&&!I.mask&&(O=O[0],O!=null)){const _=I.width*I.height,M=new Uint8Array(_);if(Math.abs(O)>1e24)for(d=0;d<_;d++)Math.abs((I.pixels[0][d]-O)/O)>1e-6&&(M[d]=1);else for(d=0;d<_;d++)I.pixels[0][d]!==O&&(M[d]=1);I.mask=M}let b=0,k=0;if(h!==i||f!==r){let _=I.mask;if(_)for(d=0;d<r;d++)if(k=d*i,d<f)for(b=h;b<i;b++)_[k+b]=0;else for(b=0;b<i;b++)_[k+b]=0;else for(_=new Uint8Array(i*r),I.mask=_,d=0;d<f;d++)for(k=d*i,b=0;b<h;b++)_[k+b]=1}return I}async _open(s){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=s?s.signal:null,t=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:a,files:i}=this._parseHeader(t.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const g=await this._fetchAuxiliaryData(s);g!=null&&(a.statistics=g.statistics??a.statistics,a.histograms=g.histograms,g.histograms&&a.statistics==null&&(a.statistics=we(g.histograms)))}r&&this.updateImageSpaceRasterInfo(a),this._set("rasterInfo",a),this._files=i;const c=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=ss(c.data);const{blockWidth:l,blockHeight:o}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,p=[],w=this._getBandSegmentCount();let m=0,d=-1;for(;m<this._storageIndex.length;){d++;const g=Math.ceil(h/l/u**d)-1,y=Math.ceil(f/o/u**d)-1;m+=(g+1)*(y+1)*w*4,p.push({maxRow:y,maxCol:g,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return G.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(s,e,t){const{blockWidth:a,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:c}=this.rasterInfo,l=this._getBandSegmentCount();let o,u,h,f=0,p=0;for(h=0;h<s;h++)p=r**h,o=Math.ceil(n/a/p),u=Math.ceil(c/i/p),f+=o*u;p=r**s,o=Math.ceil(n/a/p),u=Math.ceil(c/i/p),f+=e*o+t,f*=4*l;const w=this._storageIndex.subarray(f,f+4*l);let m=0,d=0;const g=[];for(let y=0;y<l;y++)m=w[4*y]*2**32+w[4*y+1],d=m+w[4*y+2]*2**32+w[4*y+3],g.push({from:m,to:d});return{ranges:g,actualTileWidth:t<o-1?a:Math.ceil(n/p)-a*(o-1),actualTileHeight:e<u-1?i:Math.ceil(c/p)-i*(u-1)}}_parseHeader(s){const e=L(s,"MRF_META/Raster");if(!e)throw new F("mrf:open","not a valid MRF format");const t=L(e,"Size"),a=parseInt(t.getAttribute("x"),10),i=parseInt(t.getAttribute("y"),10),r=parseInt(t.getAttribute("c"),10),n=(U(e,"Compression")||"none").toLowerCase();if(!G.has(n))throw new F("mrf:open","currently does not support compression "+n);const c=U(e,"DataType")||"UInt8",l=B.get(c);if(l==null)throw new F("mrf:open","currently does not support pixel type "+c);const o=L(e,"PageSize"),u=parseInt(o.getAttribute("x"),10),h=parseInt(o.getAttribute("y"),10),f=L(e,"DataValues");let p,w;if(f&&(w=f.getAttribute("NoData"),w!=null&&(p=w.trim().split(" ").map((_=>parseFloat(_))))),L(s,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const m=L(s,"MRF_META/GeoTags"),d=L(m,"BoundingBox");let g,y=!1;if(d!=null){const _=parseFloat(d.getAttribute("minx")),M=parseFloat(d.getAttribute("miny")),J=parseFloat(d.getAttribute("maxx")),P=parseFloat(d.getAttribute("maxy")),$=U(m,"Projection")||"";let E=A.WGS84;if($!=="LOCAL_CS[]")if($.toLowerCase().startsWith("epsg:")){const z=Number($.slice(5));isNaN(z)||z===0||(E=new A({wkid:z}))}else E=ce($)??A.WGS84;else y=!0,E=new A({wkid:3857});g=new W(_,M,J,P),g.spatialReference=E}else y=!0,g=new W({xmin:-.5,ymin:.5-i,xmax:a-.5,ymax:.5,spatialReference:new A({wkid:3857})});const S=L(s,"MRF_META/Rsets"),v=parseInt((S==null?void 0:S.getAttribute("scale"))||"2",10),x=g.spatialReference,T=new xe({origin:new V({x:g.xmin,y:g.ymax,spatialReference:x}),blockWidth:u,blockHeight:h,pyramidBlockWidth:u,pyramidBlockHeight:h,compression:n,pyramidScalingFactor:v}),I=new V({x:g.width/a,y:g.height/i,spatialReference:x}),O=new le({width:a,height:i,extent:g,isPseudoSpatialReference:y,spatialReference:x,bandCount:r,pixelType:l,pixelSize:I,noDataValue:p,storageInfo:T}),b=U(s,"datafile"),k=U(s,"IndexFile");return{rasterInfo:O,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:b||this.url.replace(".mrf",G.get(n).blobExtension)}}}async _fetchAuxiliaryData(s){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:s==null?void 0:s.signal});return ve(e)}catch{return null}}};function ss(s){if(s.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,t,a,i,r,n;if(Nt){for(t=new Uint8Array(s),i=new ArrayBuffer(s.byteLength),a=new Uint8Array(i),r=0;r<s.byteLength/4;r++)for(n=0;n<4;n++)a[4*r+n]=t[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(s);return e}R([C()],K.prototype,"_files",void 0),R([C()],K.prototype,"_storageIndex",void 0),R([C({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),K=R([Y("esri.layers.support.rasterDatasets.MRFRaster")],K);const as=K;function is(s){const e=s.fields,t=s.records,a=e.some((o=>o.name.toLowerCase()==="oid"))?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map((o=>({name:o.name,type:"esriFieldType"+o.typeName,alias:o.name})))),r=i.map((o=>o.name)),n=[];let c=0,l=0;return t.forEach((o=>{const u={};for(u[a]=c++,l=1;l<r.length;l++)u[r[l]]=o[l-1];n.push({attributes:u})})),{displayFieldName:"",fields:i,features:n}}class rs{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),a=3&t.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=t.getUint32(4,!0),r=t.getUint16(8,!0),n=t.getUint16(10,!0),c={version:a,recordCount:i,headerByteCount:r,recordByteCount:n};let l=32;const o=[],u=[];let h;if(a===3){for(;t.getUint8(l)!==13;)h=String.fromCharCode(t.getUint8(l+11)).trim(),o.push({name:Re(new Uint8Array(e,l,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:t.getUint8(l+16)}),l+=32;if(l+=1,o.length>0)for(;u.length<i&&e.byteLength-l>n;){const f=[];t.getUint8(l)===32?(l+=1,o.forEach((p=>{if(p.type==="C")f.push(Re(new Uint8Array(e,l,p.length)).trim());else if(p.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim(),10));else if(p.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim()));else if(p.type==="D"){const w=String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim();f.push(new Date(parseInt(w.slice(0,4),10),parseInt(w.slice(4,6),10)-1,parseInt(w.slice(6,8),10)))}l+=p.length})),u.push(f)):l+=n}}return{header:c,fields:o,records:u,recordSet:is({fields:o,records:u})}}}const ye=(s,e)=>{var t;return(t=s.get(e))==null?void 0:t.values},te=(s,e)=>{var t,a;return(a=(t=s.get(e))==null?void 0:t.values)==null?void 0:a[0]};let j=class extends Z{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this._chunkSize=10485760,this.datasetFormat="TIFF"}async fetchRawTile(e,t,a,i={}){var n;if(!((n=this._headerInfo)!=null&&n.isSupported)||this.isBlockOutside(e,t,a))return null;const r=await this._fetchRawTiffTile(e,t,a,!1,i);if(r!=null&&this._headerInfo.hasMaskBand){const c=await this._fetchRawTiffTile(e,t,a,!0,i);c!=null&&c.pixels[0]instanceof Uint8Array&&(r.mask=c.pixels[0])}return r}async _open(e){var g,y,S,v;const t=e?e.signal:null,{data:a}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!a)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:r,isBigTiff:n}=$t(a),c=[],l={fileChunk:a,posIFD:r,fileOffset:0};await this._readIFDs(c,l,i,n?8:4,t);const{imageInfo:o,rasterInfo:u}=ns(c),h=Et(c),f=Dt(c);if(this._headerInfo={littleEndian:i,isBigTiff:n,ifds:c,pyramidIFDs:h,maskIFDs:f,...o},this._set("rasterInfo",u),!o.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");u.isPseudoSpatialReference&&ge.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const p=(y=(g=c[0].get("PREDICTOR"))==null?void 0:g.values)==null?void 0:y[0];if(((v=(S=c[0].get("SAMPLEFORMAT"))==null?void 0:S.values)==null?void 0:v[0])===3&&p===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:m,skipExtensions:d=[]}=this.ioConfig;if(!d.includes("aux.xml")&&!m){const x=await this._fetchAuxiliaryMetaData(e);x!=null&&os(x,u)}d.includes("vat.dbf")||u.bandCount!==1||u.pixelType!=="u8"||m||(u.attributeTable=await this._fetchAuxiliaryTable(e),u.attributeTable!=null&&(u.keyProperties.DataType="thematic")),m&&this.updateImageSpaceRasterInfo(u),this.updateTileInfo()}async _validateOrFetchHeaderBuffer(e,t){let{fileChunk:a,fileOffset:i,posIFD:r}=e;return(r+8>=a.byteLength||r<0)&&(i=r+i,a=(await this.request(this.url,{range:{from:i,to:i+this._bufferSize},responseType:"array-buffer",signal:t})).data,r=0),{fileChunk:a,fileOffset:i,posIFD:r}}async _readIFDs(e,t,a,i=4,r){if(!t.posIFD)return null;t=await this._validateOrFetchHeaderBuffer(t,r);const n=await this._readIFD(t,a,_e,i,r);if(!(n!=null&&n.ifd))throw new F("tiffraster:open","cannot parse tiff header. failed to open url "+this.url);if(e.push(n.ifd),!n.nextIFD)return null;t.posIFD=n.nextIFD-t.fileOffset,await this._readIFDs(e,t,a,i,r)}async _readIFD(e,t,a=_e,i=4,r){var u,h;let{fileChunk:n,posIFD:c,fileOffset:l}=e;if(!e.fileChunk)return null;const o=At(n,t,c,l,a,i);if(o.success){const f=[];if((u=o.ifd)==null||u.forEach((p=>{p.values||f.push(p)})),f.length>0&&await this._fillOffsets(f,t,o.nextIFD,r),(h=o.ifd)==null?void 0:h.has("GEOKEYDIRECTORY")){const p=o.ifd.get("GEOKEYDIRECTORY"),w=p==null?void 0:p.values;if(w&&w.length>4){const m=w[0]+"."+w[1]+"."+w[2];c=p.valueOffset+6-l;const d=await this._validateOrFetchHeaderBuffer({fileChunk:n,posIFD:c,fileOffset:l},r),g=await this._readIFD(d,t,Bt,2,r);p.data=g==null?void 0:g.ifd,p.data&&p.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[m]})}}return o}return o.requiredBufferSize?(n=(await this.request(this.url,{range:{from:l,to:l+c+o.requiredBufferSize+8},responseType:"array-buffer",signal:r})).data,n.byteLength<c+o.requiredBufferSize?null:(e.fileChunk=n,e.fileOffset=l,this._readIFD(e,t,a,i,r))):null}async _fillOffsets(e,t,a,i){const r=e.filter((h=>h.offlineOffsetSize!=null));if(r.length===0)return;const n=r.map((h=>h.offlineOffsetSize)),c=Math.min.apply(null,n.map((h=>h[0]))),l=Math.max.apply(null,n.map((h=>h[0]+h[1])));let o=n.length===1||l-c<=this._bufferSize;if(!o&&n.length>1&&(n.sort(((h,f)=>h[0]-f[0])),o=n.reduce(((h,f)=>h===f[0]?f[0]+f[1]:0),n[0][0])===l),o){const h=await this._fetchOffsets(c,Math.max(l,c+this._bufferSize),i);return void r.forEach((f=>Oe(h,t,f,c)))}const u=r.map((async h=>{const f=h.offlineOffsetSize,p=await this._fetchOffsets(f[0],f[1]+f[0],i);Oe(p,t,h,f[0])}));await Promise.all(u)}async _fetchOffsets(e,t,a){const i=[],r=this._chunkSize,n=Math.ceil((t-e)/r);let c=e;for(let u=0;u<n;u++)i.push(this.request(this.url,{range:{from:c,to:u===n-1?t:c+r-1},responseType:"array-buffer",signal:a})),c+=r;const l=await Promise.all(i);if(n===1)return l[0].data;const o=new Uint8Array(t-e+1);for(let u=0;u<n;u++)o.set(new Uint8Array(l[u].data),u*r);return o.buffer}async _fetchRawTiffTile(e,t,a,i,r={}){const n=this._getTileLocation(e,t,a,i);if(!n)return null;const{ranges:c,actualTileWidth:l,actualTileHeight:o,ifd:u}=n,h=c.map((I=>this.request(this.url,{range:I,responseType:"array-buffer",signal:r.signal}))),f=await Promise.all(h),p=f.map((I=>I.data.byteLength)).reduce(((I,O)=>I+O)),w=f.length===1?f[0].data:new ArrayBuffer(p),m=[0],d=[0];if(f.length>1){const I=new Uint8Array(w);for(let O=0,b=0;O<f.length;O++){const k=f[O].data;I.set(new Uint8Array(k),b),m[O]=b,b+=k.byteLength,d[O]=k.byteLength}}const{blockWidth:g,blockHeight:y}=this.getBlockWidthHeight(e),S=await this.decodePixelBlock(w,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:u,offsets:m,sizes:d},width:g,height:y,planes:null,pixelType:null});if(S==null)return null;let v,x,T;if(l!==g||o!==y){let I=S.mask;if(I)for(v=0;v<y;v++)if(T=v*g,v<o)for(x=l;x<g;x++)I[T+x]=0;else for(x=0;x<g;x++)I[T+x]=0;else for(I=new Uint8Array(g*y),S.mask=I,v=0;v<o;v++)for(T=v*g,x=0;x<l;x++)I[T+x]=1}return S}_getTileLocation(e,t,a,i=!1){const{firstPyramidLevel:r,blockBoundary:n}=this.rasterInfo.storageInfo,c=e===0?0:e-(r-1),{_headerInfo:l}=this;if(!l)return null;const o=i?l.maskIFDs[c]:c===0?l==null?void 0:l.ifds[0]:l==null?void 0:l.pyramidIFDs[c-1];if(!o)return null;const u=Lt(o,l),h=ye(o,"TILEOFFSETS");if(h===void 0)return null;const f=ye(o,"TILEBYTECOUNTS"),{minRow:p,minCol:w,maxRow:m,maxCol:d}=n[c];if(t>m||a>d||t<p||a<w)return null;const g=te(o,"IMAGEWIDTH"),y=te(o,"IMAGELENGTH"),S=te(o,"TILEWIDTH"),v=te(o,"TILELENGTH"),x=[];if(u){const{bandCount:T}=this.rasterInfo;for(let I=0;I<T;I++){const O=I*(m+1)*(d+1)+t*(d+1)+a;x[I]={from:h[O],to:h[O]+f[O]-1}}}else{const T=t*(d+1)+a;x.push({from:h[T],to:h[T]+f[T]-1})}for(let T=0;T<x.length;T++)if(x[T].from==null||!x[T].to||x[T].to<0)return null;return{ranges:x,ifd:o,actualTileWidth:a===d&&g%S||S,actualTileHeight:t===m&&y%v||v}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e==null?void 0:e.signal});return ve(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e==null?void 0:e.signal}),a=rs.parse(t);return a!=null&&a.recordSet?ke.fromJSON(a.recordSet):null}catch{return null}}};function ns(s){var J,P;const e=Jt(s),{width:t,height:a,tileWidth:i,tileHeight:r,planes:n,pixelType:c,compression:l,firstPyramidLevel:o,maximumPyramidLevel:u,pyramidBlockWidth:h,pyramidBlockHeight:f,pyramidResolutions:p,tileBoundary:w,affine:m,metadata:d}=e,g=((J=e.extent.spatialReference)==null?void 0:J.wkt)||((P=e.extent.spatialReference)==null?void 0:P.wkid);let y=ce(g),S=!!e.isPseudoGeographic;y==null&&(S=!0,y=new A({wkid:3857}));const v=new W({...e.extent,spatialReference:y}),x=new V(v?{x:v.xmin,y:v.ymax,spatialReference:y}:{x:0,y:0}),T=new xe({blockWidth:i,blockHeight:r,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:l,origin:x,firstPyramidLevel:o,maximumPyramidLevel:u,pyramidResolutions:p,blockBoundary:w}),I=new V({x:(v.xmax-v.xmin)/t,y:(v.ymax-v.ymin)/a,spatialReference:y}),O=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let b=null;const k=te(s[0],"PHOTOMETRICINTERPRETATION"),_=ye(s[0],"COLORMAP");if(k<=3&&(_==null?void 0:_.length)>3&&_.length%3==0){b=[];const $=_.length/3;for(let E=0;E<$;E++)b.push([E,_[E]>>>8,_[E+$]>>>8,_[E+2*$]>>>8])}const M=new le({width:t,height:a,bandCount:n,pixelType:c,pixelSize:I,storageInfo:T,spatialReference:y,isPseudoSpatialReference:S,keyProperties:O,extent:v,colormap:b,statistics:d?d.statistics:null});if(m!=null&&m.length&&(M.nativeExtent=new W({xmin:-.5,ymin:.5-a,xmax:t-.5,ymax:.5,spatialReference:y}),M.transform=new Ie({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new V({x:(v.xmax-v.xmin)/t,y:(v.ymax-v.ymin)/a,spatialReference:y}),T.origin.x=-.5,T.origin.y=.5),p){const{x:$,y:E}=M.pixelSize;p.forEach((z=>{z.x*=$,z.y*=E}))}return{imageInfo:e,rasterInfo:M}}function os(s,e){if(e.statistics=s.statistics??e.statistics,e.histograms=s.histograms,s.histograms&&e.statistics==null&&(e.statistics=we(s.histograms)),s.transform&&e.transform==null){e.transform=s.transform,e.nativeExtent=e.extent;const t=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new V({x:(t.xmax-t.xmin)/e.width,y:(t.ymax-t.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=t}e.isPseudoSpatialReference&&s.spatialReference&&(e.spatialReference=s.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}R([C()],j.prototype,"_files",void 0),R([C()],j.prototype,"_headerInfo",void 0),R([C()],j.prototype,"_bufferSize",void 0),R([C()],j.prototype,"_chunkSize",void 0),R([C({type:String,json:{write:!0}})],j.prototype,"datasetFormat",void 0),j=R([Y("esri.layers.support.rasterDatasets.TIFFRaster")],j);const ls=j,D=new Map;D.set("MRF",{desc:"Meta Raster Format",constructor:as}),D.set("TIFF",{desc:"GeoTIFF",constructor:ls}),D.set("RasterTileServer",{desc:"Raster Tile Server",constructor:ts}),D.set("JPG",{desc:"JPG Raster Format",constructor:ie}),D.set("PNG",{desc:"PNG Raster Format",constructor:ie}),D.set("GIF",{desc:"GIF Raster Format",constructor:ie}),D.set("BMP",{desc:"BMP Raster Format",constructor:ie}),D.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Xt}),D.set("MEMORY",{desc:"In Memory Raster Format",constructor:be});class me{static get supportedFormats(){const e=new Set;return D.forEach(((t,a)=>e.add(a))),e}static async open(e){var h;const{url:t,ioConfig:a,source:i,sourceJSON:r}=e;let n=e.datasetFormat??(a==null?void 0:a.datasetFormat);n==null&&(t.includes(".")?n=t.slice(t.lastIndexOf(".")+1).toUpperCase():((h=i==null?void 0:i.type)==null?void 0:h.toLowerCase())==="coverage"?n="CovJSON":i!=null&&i.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const c={url:t,source:i,sourceJSON:r,datasetFormat:n,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(c).forEach((f=>{c[f]==null&&delete c[f]})),n){if(!this.supportedFormats.has(n))throw new F("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${t}`);const f=new(D.get(n)).constructor(c);return await f.open({signal:e.signal}),f}const l=Array.from(D.keys()).filter((f=>f!=="CovJSON"&&f!=="Memory"));let o=0;const u=()=>{if(n=l[o++],!n||n==="CRF")return null;const f=new(D.get(n)).constructor(c);return f.open({signal:e.signal}).then((()=>f)).catch((()=>u()))};return u()}static register(e,t,a){D.has(e.toUpperCase())||D.set(e.toUpperCase(),{desc:t,constructor:a})}}let N=class extends Ge(We(qe(Ve(mt(Ye(ut(ht(Xe(Ke(Ze(Qe(et.ClonableMixin(tt))))))))))))){constructor(...s){super(...s),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=st((async(e,t,a)=>{const{save:i,saveAs:r}=await at(()=>import("./imageryUtils-DTMFfDiQ.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(e){case se.SAVE:return i(this,t);case se.SAVE_AS:return r(this,a,t)}}))}normalizeCtorArgs(s,e){return typeof s=="string"?{url:s,...e}:s}load(s){const e=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(it).then((()=>this._openRaster(e)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var r,n;const s=[wt("Pixel Value"),xt("Raw Pixel Value")],e=((r=this.raster)==null?void 0:r.rasterInfo)??this.serviceRasterInfo,t=e==null?void 0:e.attributeTable;if(t){const c=It(t);s.push(...c)}const a=e==null?void 0:e.dataType,i=e==null?void 0:e.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const c=(n=i.variables[0].unit)==null?void 0:n.trim(),l=bt(c),o=vt();s.push(l,o)}if(i){const c=St(i);s.push(...c)}return s}createPopupTemplate(s){const{rasterFields:e}=this,t=(s==null?void 0:s.visibleFieldNames)??new Set(e.map((({name:r})=>r)).filter((r=>r!==Tt.rawServicePixelValue))),a=rt({fields:e,title:this.title},{...s,visibleFieldNames:t}),{rasterInfo:i}=this.raster;return a!=null&&a.fieldInfos&&i&&Rt(a.fieldInfos,i),a}async generateRasterInfo(s,e){var t;if(s=nt(Pe,s),await this.load(),!s||((t=s.functionName)==null?void 0:t.toLowerCase())==="none")return this.serviceRasterInfo;try{const{rasterInfo:a}=await this._openFunctionRaster(s,e);return a}catch(a){throw a instanceof F?a:new F("imagery-tile-layer","the given raster function is not supported")}}async save(s){return this._debouncedSaveOperations(se.SAVE,s)}async saveAs(s,e){return this._debouncedSaveOperations(se.SAVE_AS,e,s)}write(s,e){const t=this._primaryRasters[0]??this.raster;if(this.loaded?t.datasetFormat==="RasterTileServer"&&(t.tileType==="Raster"||t.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(s,e);if(e!=null&&e.messages){const a=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}async _openRaster(s){var a;let e=!1;if(this.raster)await this._openFromRaster(this.raster,s),e=_t(this.raster),!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:r,source:n}=this;if(!i&&!n)throw new F("imagery-tile-layer:open","missing url or source parameter");n?await this._openFromSource(n,s):r?await this._openFromUrlWithRasterFunction(i,r,s):await this._openFromUrl(i,s)}const t=this.raster.rasterInfo;if(!t)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?t:this._primaryRasters[0].rasterInfo),this._set("spatialReference",t.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:(a=this.serviceRasterInfo)==null?void 0:a.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(ot((()=>this.customParameters),(i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)})))}async _openFromRaster(s,e){s.rasterInfo||await s.open({signal:e}),this._primaryRasters=Ot(s),this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(s,e,t){const a=[s];e&&Ht(e.toJSON(),a);const i=await Promise.all(a.map((n=>me.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t})))),r=i.findIndex((n=>n==null));if(r>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${a[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(s,e){const t=await me.open({url:s,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(t==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${s}`);this._primaryRasters=[t],this.raster=t}async _openFromSource(s,e){var r;const t="the tiled imagery data source is not supported",a=((r=s.type)==null?void 0:r.toLowerCase())==="coverage"?"CovJSON":s.extent&&s.pixelBlock?"MEMORY":null;if(!a)throw new F("imagery-tile-layer:open",t);a==="MEMORY"&&(s={...s,pixelBlock:void 0,pixelBlocks:[s.pixelBlock]});const i=await me.open({url:"",source:s,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new F("imagery-tile-layer:open",t);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(s,e){var r;const t={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((n=>t[n.url]=n));const a=jt(((r=s.functionDefinition)==null?void 0:r.toJSON())??s.toJSON(),t),i=new ft({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(s,e){try{this.raster=await this._openFunctionRaster(s,e)}catch(t){t instanceof F&&ge.getLogger(this).error("imagery-tile-layer:open",t.message),ge.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};R([C({clonable:!1})],N.prototype,"_primaryRasters",void 0),R([C(lt)],N.prototype,"legendEnabled",void 0),R([C({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),R([C({type:["show","hide"]})],N.prototype,"listMode",void 0),R([C({json:{read:!0,write:!0}})],N.prototype,"blendMode",void 0),R([C({type:Pe,json:{name:"renderingRule",write:!0}})],N.prototype,"rasterFunction",void 0),R([C()],N.prototype,"sourceJSON",void 0),R([C({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],N.prototype,"version",void 0),R([C({readOnly:!0,json:{read:!1}})],N.prototype,"type",void 0),R([C({type:["ArcGISTiledImageServiceLayer"]})],N.prototype,"operationalLayerType",void 0),R([C({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(s,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(s,e,t){e[t]=!s}}}})],N.prototype,"popupEnabled",void 0),R([C({type:ct,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],N.prototype,"popupTemplate",void 0),R([C({readOnly:!0})],N.prototype,"defaultPopupTemplate",null),R([C({readOnly:!0,type:[Te]})],N.prototype,"fields",void 0),R([C({readOnly:!0,type:[Te]})],N.prototype,"rasterFields",null),R([C({constructOnly:!0})],N.prototype,"source",void 0),N=R([Y("esri.layers.ImageryTileLayer")],N);const Os=N;export{Os as default};
