import{hr as d,hs as y,ht as h,hu as c,hv as u,hw as m,hx as f,bd as v,hy as g,fA as _,hP as w,hO as b,bU as T,b4 as a,bf as n,hQ as S,b8 as i,ba as o,hR as L,eC as I,hA as $,bb as x}from"./index-Bkom2Sdc.js";import{_ as O}from"./SceneService-D7zpszpN.js";import{p as A,a as M,y as U,m as j}from"./I3SLayerDefinitions-Cs-33CYT.js";import{n as l}from"./SceneModifications-yu5fevMd.js";import{j as p,w as P,R}from"./elevationInfoUtils-9Dliwvku.js";import"./originUtils-CUyL9ZOO.js";import"./resourceUtils-BJbNTHRB.js";import"./resourceUtils-DaR9JynL.js";import"./saveUtils-DSRPRt58.js";let t=class extends O(d(y(h(c(u(m(f(v(g))))))))){constructor(...e){super(...e),this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this.path=null,this.definitionExpression=null,this._canReplaceTerrain=!1}initialize(){this.addHandles(_(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,w))}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}readModifications(e,r,s){this._modificationsSource={url:b(e,s),context:s}}set elevationInfo(e){e!=null&&e.mode!=="absolute-height"||this._set("elevationInfo",e),this._validateElevationInfo(e)}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const r=e?.signal;try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(s){T(s)}if(await this._fetchService(r),this._modificationsSource!=null){const s=await l.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",s,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,r)}beforeSave(){if(this._modificationsSource!=null)return this.load().then(()=>{},()=>{})}async saveAs(e,r){return this._debouncedSaveOperations(1,{...r,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(0,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new a("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new a("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new a("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}_validateElevationInfo(e){const r="Integrated mesh layers";p(n.getLogger(this),P(r,"absolute-height",e)),p(n.getLogger(this),R(r,e))}get replacesTerrain(){return this._canReplaceTerrain&&this._isUsedAsGroundLayer}get _isUsedAsGroundLayer(){return S(this.parent)}};i([o({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([o({type:["show","hide"]})],t.prototype,"listMode",void 0),i([o({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([o({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([o({type:A,readOnly:!0,clonable:!1})],t.prototype,"nodePages",void 0),i([o({type:[M],readOnly:!0,clonable:!1})],t.prototype,"materialDefinitions",void 0),i([o({type:[U],readOnly:!0,clonable:!1})],t.prototype,"textureSetDefinitions",void 0),i([o({type:[j],readOnly:!0,clonable:!1})],t.prototype,"geometryDefinitions",void 0),i([o({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([o({type:l,clonable:e=>e?.clone()??e}),L({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([I(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([o($)],t.prototype,"elevationInfo",null),i([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),i([o()],t.prototype,"replacesTerrain",null),i([o()],t.prototype,"_isUsedAsGroundLayer",null),i([o()],t.prototype,"_canReplaceTerrain",void 0),t=i([x("esri.layers.IntegratedMeshLayer")],t);const H=t;export{H as default};
