const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-YbPzVGyq.js","assets/utils-B1xfry1O.js","assets/index-Bkom2Sdc.js","assets/index-CkucmIUh.css","assets/originUtils-CUyL9ZOO.js","assets/saveUtils-DSRPRt58.js","assets/datasetUtils-BHf95nQl.js"])))=>i.map(i=>d[i]);
import{kY as Be,kZ as Le,rm as Ae,aY as D,bN as H,eQ as Je,rn as ze,aU as Ue,b8 as T,ba as _,bb as V,ev as Fe,b4 as F,f8 as ke,bn as be,ro as je,bF as He,de as Ge,fb as re,d6 as We,dj as qe,a$ as q,bf as Q,hF as Ve,hu as Ye,hs as Xe,ht as Ke,hw as Ze,hW as Qe,hr as et,hG as tt,hv as st,bd as at,hy as it,bD as rt,aH as nt,bU as ot,mW as lt,dP as ut,bE as ct,hY as ft,hI as ht,fY as pt,n5 as dt,fg as ve}from"./index-Bkom2Sdc.js";import{X as Z,i as ce,t as J,n as Me,e as A,o as W,u as ae,a as mt,m as gt}from"./xmlUtilities-BHcmTMjU.js";import{e as yt,N as Pe}from"./RasterJobHandlerMixin-CXgaqaNL.js";import{c as wt,f as xt,o as It}from"./RasterPresetRendererMixin-0A-rtcoF.js";import{o as bt,c as vt,v as St,d as Tt,$ as Rt,p as _t,i as Ot,b as Ct}from"./rasterFieldUtils-BBSwpsuA.js";import{p as Ft,C as kt,t as Mt,r as Pt}from"./datasetUtils-BHf95nQl.js";import{c as ne}from"./PixelBlock-CD7TNHcL.js";import{m as le,y as $t,k as $e,v as ge,L as Nt,l as ye,r as Et,b as Se,H as Dt,G as Bt,c as Lt,e as Te,Y as At,t as Jt,N as Re,C as zt,d as Ut}from"./RasterSymbolizer-BQJRaC-o.js";import{E as jt,W as Ht,v as Gt}from"./vectorFieldUtils-DYAo00Wy.js";import{u as we,n as Wt}from"./PolynomialTransform-CFfzRXDt.js";import{j as qt}from"./TilemapCache-1ta3BBi5.js";import{w as Vt,T as Yt}from"./rasterFunctionHelper-y-UIL_9j.js";import{j as _e,$ as Xt,R as Kt}from"./elevationInfoUtils-9Dliwvku.js";import"./QueueProcessor-DqRCcjoo.js";import"./RawBlockCache-mSZxM6gY.js";import"./rasterProjectionHelper-De1k5S3R.js";import"./clipUtils-Dy_nqovQ.js";import"./ClassBreaksDefinition-DLcEIyEO.js";import"./dataUtils-D1x3Zy4l.js";import"./_commonjsHelpers-DCkdB7M8.js";var Oe;class Zt extends Be{get[(Oe=Ae,Le)](){return this.layer}constructor(e){super(),this[Oe]=!0,this.type="imagery-tile",this.layer=e}get id(){return this.layer.id}}function Ne(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function Ee(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function Qt(t){const{axes:e}=t.domain,s=Object.keys(e),a=[],i=[];let r=-1,n=-1,c=[];for(let m=0;m<s.length;m++){const I=s[m];Ne(I)?r=m:Ee(I)&&(n=m);const w=e[I],v=[];if("values"in w){w.values.forEach(S=>v.push(typeof S=="string"?new Date(S).getTime():S));const x=v[1]-v[0];a.push([v[0]-.5*x,v[v.length-1]+.5*x]),i.push(x)}else{const{start:x,stop:S,num:R}=w,C=(S-x)/(R-1);a.push([x-.5*C,S+.5*C]),i.push(C);for(let M=0;M<R;M++)v.push(x+C*M)}c.push({name:I,values:v,extent:[v[0],v[v.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),c=c.filter((m,I)=>!(I===r||I===n));const{referencing:o}=t.domain,u=o.find(m=>m.coordinates.includes(s[r])).system.id,l=u?.slice(u.lastIndexOf("/")+1),f=l==null||l==="CRS84"?4326:Number(l),h=new D({wkid:f}),[p,g]=a[r],[y,b]=a[n],d=new H({xmin:p,xmax:g,ymin:y,ymax:b,spatialReference:h});return{width:Math.round(d.width/i[r]),height:Math.round(d.height/i[n]),extent:d,dimensions:c}}function fe(t){const e=Ue();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function he(){return Math.round(255*Math.random())}function es(t){const e={},{parameters:s}=t;if(!s)return e;for(const[a,i]of Object.entries(s)){const{type:r,description:n,unit:c,categoryEncoding:o,observedProperty:u}=i;if(r==="Parameter"&&(e[a]={},n&&(e[a].description=fe(n)),c&&(e[a].unit=c.label?fe(c.label):null,e[a].symbol=c.symbol?.value),o)){const l=Object.entries(o).map((p,g)=>({OID:g,Value:Number(p[1]),ClassName:p[0].slice(p[0].lastIndexOf("/")+1),Count:1}));let f=!1;u?.categories?.length&&(u.categories.forEach(p=>{if(!p.id)return;const g=p.id.slice(p.id.lastIndexOf("/")+1),y=l.find(d=>d.ClassName===g);if(!y)return;const b=p.label?fe(p.label):null;if(y.Label=b,p.preferredColor){const d=Je.fromHex(p.preferredColor);d&&(f=!0,y.Red=d.r,y.Green=d.g,y.Blue=d.b)}}),f&&l.forEach(p=>{p.Red==null&&(p.Red=he(),p.Green=he(),p.Blue=he())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:l.map(p=>({attributes:p}))};f&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[a].attributeTable=h}}return e}function ts(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let a=0;a<t.length;a++){const i=t[a];i!=null&&(i<e&&(e=i),i>s&&(s=i))}return ze(e,s)}function ss(t,e,s){const a=t.map((o,u)=>({name:o,count:e[u]})).sort((o,u)=>o.name>u.name?-1:1),i=(r=1,o=>r*=o.count);var r;const n=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let c=0;for(let o=t.length-1;o>=0;o--)c+=n[a.findIndex(({name:u})=>u===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return c}function as(t){const{width:e,height:s,extent:a,dimensions:i}=Qt(t),{ranges:r}=t,n=Object.keys(r).sort((h,p)=>h<p?-1:1),c=[];for(let h=0;h<n.length;h++){const p=n[h];i?.length&&c.push({name:p,dimensions:i})}const o=es(t);c.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const u=c.length?{variables:c}:void 0,l=[];for(let h=0;h<n.length;h++){const p=n[h],{values:g,dataType:y,axisNames:b,shape:d}=r[p],m=d.length>2?h*d.slice(0,-2).reduce((R,C)=>R*C):0,I=b.slice(0,-2),w=d.slice(0,-2),v=y==="float"?"f32":ts(g),x=e*s,S=g.length/x;for(let R=0;R<S;R++){const C=ne.createEmptyBand(v,x),M=new Uint8Array(x).fill(255);let $=!1;const O=R*x;for(let k=0;k<x;k++){const N=g[O+k];N==null?(M[k]=0,$=!0):C[k]=N}if(h===0||i?.length){const k=new ne({width:e,height:s,mask:$?M:null,pixels:[C],pixelType:v});k.updateStatistics(),i?.length?l[ss(I,w,R)+m]=k:l.push(k)}else{const k=l[R];k.pixels.push(C),$?k.mask&&(k.mask=ne.combineBandMasks([k.mask,M])):k.mask=$?M:null}}}const f=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:a,pixelBlocks:l,multidimensionalInfo:u,attributeTable:f,bandNames:u?void 0:n}}let X=class extends Z{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,a={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,c]=r.storageInfo.tileInfo.size,{sliceId:o}=a,{pixelBlocks:u}=this.source,l={pixelBlock:o==null?u[0]:u[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:c},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(l,a):jt(l);return Promise.resolve(f)}const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:a,statistics:i,histograms:r,name:n,nativeExtent:c,transform:o,colormap:u}=e,l=s[0],{width:f,height:h,pixelType:p}=l,g=e.extent??new H({xmin:-.5,ymin:.5,xmax:f-.5,ymax:h-.5,spatialReference:new D({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,b={x:g.width/f,y:g.height/h},d={...e.keyProperties};e.dataType&&(d.DataType=e.dataType),e.bandInfos&&(d.BandProperties=e.bandInfos.map(I=>I.toJSON())),a&&(d.DataType="Thematic");const m=new le({width:f,height:h,pixelType:p,extent:g,nativeExtent:c,attributeTable:a,colormap:u,transform:o,pixelSize:b,spatialReference:g.spatialReference,bandCount:l.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:y,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(m),this.createRemoteDatasetStorageInfo(m,512,512),this._set("rasterInfo",m),this.updateTileInfo(),m.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,m.multidimensionalInfo):await this._buildInMemoryRaster(l,{width:512,height:512},t),m.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,r=a.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:r},s):Promise.resolve(Ht(t,e,i,r)),c=a.statistics!=null,o=a.histograms!=null,u=this.ioConfig.skipStatistics||c?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve($t(t)),l=await Fe([n,u]);if(!l[0].value&&l[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=l[0].value,c||(a.statistics=l[1].value?.statistics),o||(a.histograms=l[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const r=i.dimensions.map(u=>new Ft({variableName:i.name,dimensionName:u.name,values:[u.values?.[0]??u.extent?.[0]],isSlice:!0})),n=kt(r,e),c=n==null?null:t[n];if(c==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:c},s):$e(c);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};T([_({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),T([_()],X.prototype,"source",void 0),T([_()],X.prototype,"url",null),X=T([V("esri.layers.support.rasterDatasets.InMemoryRaster")],X);const xe=X;let ee=class extends Z{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,s,a,i={}){return this._inMemoryRaster.fetchRawTile(e,s,a,i)}async _open(e){const{extent:s,pixelBlocks:a,multidimensionalInfo:i,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:c,histograms:o}=$e(a[0]),u=n?.map(p=>({BandName:p})),l={DataType:r?"Thematic":i?"Scientific":"Generic",BandProperties:u},f=new xe({source:{extent:s,pixelBlocks:a,attributeTable:r?ke.fromJSON(r):null,multidimensionalInfo:i,statistics:c,histograms:o,keyProperties:l,isPseudoSpatialReference:!1}});await f.open(),this._inMemoryRaster=f;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",f.rasterInfo)}async _fetchData(e){const s=this.source??(await this.request(this.url,{signal:e?.signal})).data,a="imagery-tile-layer:open-coverage-json";if(s.type?.toLowerCase()!=="coverage"||s.domain?.domainType?.toLowerCase()!=="grid")throw new F(a,"Only coverage with Grid domain type is supported");if(!s.ranges)throw new F(a,"Missing ranges in the grid coverage data");if(!s.domain.referencing?.length)throw new F(a,"Missing domain referencing in the grid coverage data");const i=Object.values(s.ranges);for(let r=0;r<i.length;r++){const{axisNames:n,shape:c,type:o,values:u}=i[r];if(!(o.toLowerCase()==="ndarray"&&u?.length&&n?.length&&c?.length))throw new F(a,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(Ne(n[n.length-1])&&Ee(n[n.length-2])))throw new F(a,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return as(s)}};T([_({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),T([_({constructOnly:!0})],ee.prototype,"source",void 0),ee=T([V("esri.layers.support.rasterDatasets.CovJSONRaster")],ee);const is=ee;function Ce(t,e){if(!t||!e)return null;const s=[];for(let a=0;a<t.length;a++)s.push(t[a]),s.push(e[a]);return s}function rs(t){const e=A(t,"GeodataXform"),s=ue(W(e,"SpatialReference/WKID")||J(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const a=W(e,"PolynomialOrder")??1,i=ae(e,"CoeffX/Double"),r=ae(e,"CoeffY/Double"),n=ae(e,"InverseCoeffX/Double"),c=ae(e,"InverseCoeffY/Double"),o=Ce(i,r),u=Ce(n,c);return{spatialReference:s,transform:o&&u&&o.length&&u.length?new we({spatialReference:s,polynomialOrder:a,forwardCoefficients:o,inverseCoefficients:u}):null}}function ns(t){const e=W(t,"NoDataValue"),s=A(t,"Histograms/HistItem"),a=W(s,"HistMin"),i=W(s,"HistMax"),r=W(s,"BucketCount"),n=J(s,"HistCounts")?.split("|").map(h=>Number(h));let c,o,u,l;Me(t,"Metadata/MDI").forEach(h=>{const p=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=p;break;case"STATISTICS_MAXIMUM":o=p;break;case"STATISTICS_MEAN":u=p;break;case"STATISTICS_STDDEV":l=p}});const f=W(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&a!=null&&i!=null?{min:a,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:f,statistics:c!=null&&o!=null?{min:c,max:o,avg:u,stddev:l}:null}}function ue(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new D({wkid:e});if(t=String(t).trim(),je(t))return new D({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const a=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),r=i>-1?i:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",a)+1).trim(),c=t.slice(a,t.lastIndexOf("]")).trim();e=pe(n);const o=new D(e?{wkid:e}:{wkt:n}),u=pe(c);return u&&(o.vcsWkid=u),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=pe(t),new D(e!==0?{wkid:e}:{wkt:t})):null}function pe(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(i=>i.trim()).filter(i=>i!==""),s=e[e.length-1].split(","),a=s[0]?.toLowerCase();if((a==="epsg"||a==="esri")&&t.endsWith('"]]')){const i=Number(s[1]);if(!isNaN(i)&&i!==0)return i}return 0}function Ie(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(a=>{if(a.nodeType===1){if(ce(a,"SRS")){if(!e.spatialReference){const i=J(a);e.spatialReference=ue(i)}}else if(ce(a,"Metadata"))if(a.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:r}=rs(a);e.transform=r,e.spatialReference||(e.spatialReference=i)}else Me(a,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=J(i));else if(ce(a,"PAMRasterBand")){const i=ns(a);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}});const s=e.rasterBands;if(s.length){const a=!!s[0].statistics;e.statistics=a?s.map(r=>r.statistics).filter(be):null;const i=!!s[0].histogram;e.histograms=i?s.map(r=>r.histogram).filter(be):null}return e}let oe=class extends Z{fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:a,histograms:i,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new D({wkid:3857})),i?.length&&a==null&&(a=ge(i));const{width:c,height:o}=e;let u=new H({xmin:-.5,ymin:.5-o,xmax:c-.5,ymax:.5,spatialReference:s});const l=r?r.forwardTransform(u):u;let f=!0;if(r){const p=r.forwardCoefficients;f=p&&p[1]===0&&p[2]===0,f&&(r=null,u=l)}const h=new xe({source:{extent:l,nativeExtent:u,transform:r,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=Nt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const a=s.toLowerCase(),i=a==="gif"||a==="bmp"||!He("ios"),r=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new F("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:a}=this.ioConfig,i=a||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,c=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await Fe([i,c]);if(e?.aborted)throw Ge();const u=Ie(o[0].value?.data);if(!u.transform){const l=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;u.transform=l?.length===6?new we({forwardCoefficients:[l[4],l[5],l[0],-l[1],l[2],-l[3]]}):null}return u}};T([_({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=T([V("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const ie=oe;let te=class extends Z{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,a={}){const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,c=n!=null&&!!a.transposedVariableName;if(this._slices&&!c&&a.sliceId==null)return null;const o=c?0:i.maximumPyramidLevel-t+this._levelOffset,u=`${this.url}/tile/${o}/${e}/${s}`,l=this._slices?c?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null;let f,h;if(i.isBsqTile){const k=(a.bandIds?.length?a.bandIds:[0,1,2]).map(B=>this.request(u,{query:{...l,bandId:B},responseType:"array-buffer",signal:a.signal})),N=await Promise.all(k),Y=N.map(B=>B.data.byteLength).reduce((B,De)=>B+De),G=new Uint8Array(Y);h=[];let U=0;for(const{data:B}of N)h.push(U),G.set(new Uint8Array(B),U),U+=B.byteLength;f=G.buffer}else f=(await this.request(u,{query:l,responseType:"array-buffer",signal:a.signal})).data;if(!f)return null;const p=c?n.tileSize:i.tileInfo.size,g=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:h?.length,offsets:h,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:c,noDataValue:this.rasterInfo.noDataValue});if(g==null)return null;const y=i.blockBoundary[t];if(i.compression!=="jpg"||s>y.minCol&&s<y.maxCol&&e>y.minRow&&e<y.maxRow)return g;const{origin:b,blockWidth:d,blockHeight:m}=i,{x:I,y:w}=this.getPyramidPixelSize(t),v=Math.round((r.xmin-b.x)/I)%d,x=Math.round((r.xmax-b.x)/I)%d||d,S=Math.round((b.y-r.ymax)/w)%m,R=Math.round((b.y-r.ymin)/w)%m||m,C=s===y.minCol?v:0,M=e===y.minRow?S:0,$=s===y.maxCol?x:d,O=e===y.maxRow?R:m;return Gt(g,{x:C,y:M},{width:$-C,height:O-M}),g}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const a=this._slices[s].multidimensionalDefinition;if(a.length===e.length&&!a.some(i=>{const r=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.statistics),a=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.histograms),i=await Promise.all([s,a]);return i[0]&&i[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-a+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,a++,s=this.identifyPixelLocation(n,a,e.datumTransformation),s===null)return null}return r===-1||s==null?null:a}async _open(t){const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=a.name?.slice(a.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new F("image-server-raster:open","cannot initialize image service");wt(r,a);const n=this.tileType==="Map"?os(a.tileInfo,a):re.fromJSON(a.tileInfo);We(n);const[c,o]=this._computeMinMaxLOD(r,n),{extent:u,pixelSize:l}=r,f=.5/r.width*l.x,h=Math.max(l.x,l.y),{lods:p}=n;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(l.x-l.y)>f||!p.some(S=>Math.abs(S.resolution-h)<f))&&(l.x=l.y=c.resolution,r.width=Math.ceil((u.xmax-u.xmin)/l.x-.1),r.height=Math.ceil((u.ymax-u.ymin)/l.y-.1));const g=c.level-o.level,[y,b]=n.size,d=[],m=[];p.forEach((S,R)=>{S.level>=o.level&&S.level<=c.level&&d.push({x:S.resolution,y:S.resolution}),R<p.length-1&&m.push(Math.round(10*S.resolution/p[R+1].resolution)/10)}),d.sort((S,R)=>S.x-R.x);const I=this.computeBlockBoundary(u,y,b,n.origin,d,g),w=d.length>1?d.slice(1):null;let v;a.transposeInfo&&(v={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const x=m.length<=1||m.length>=3&&m.slice(0,-1).every(S=>S===m[0])?m[0]??2:Math.round(10/(o.resolution/c.resolution)**(-1/g))/10;if(r.storageInfo=new ye({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:w,pyramidScalingFactor:x,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:g,tileInfo:n,isBsqTile:!!a.bsq,transposeInfo:v,blockBoundary:I}),ls(r),this._set("rasterInfo",r),a.capabilities.toLowerCase().includes("tilemap")){const S={tileInfo:r.storageInfo.tileInfo,parsedUrl:qe(this.url),url:this.url,tileServers:[]};this._tilemapCache=new qt({layer:S})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,c=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),u=D.fromJSON(e.spatialReference||n.spatialReference),l=new q({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:u});return new le({width:c,height:o,bandCount:3,extent:H.fromJSON(n),spatialReference:u,pixelSize:l,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,a=xt(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data?.slices).catch(()=>null):null,r=await Promise.all([a,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,a=.5/t.width*s.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,i.map(h=>h.level))),{tileType:c}=this;if(c==="Map")return this._levelOffset=i[0].level,[r,n];if(c==="Raster")return[i.find(h=>h.resolution===s.x)??r,n];const{minScale:o,maxScale:u}=this.sourceJSON;let l=r;u>0&&(l=i.find(h=>Math.abs(h.scale-u)<a),l||(l=i.filter(h=>h.scale>u).sort((h,p)=>h.scale>p.scale?1:-1)[0]??r));let f=n;return o>0&&(f=i.find(h=>Math.abs(h.scale-o)<a)??n,this._levelOffset=f.level-n.level),[l,f]}};function os(t,e){if(!t)return null;const{minScale:s,maxScale:a,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return re.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=i&&n<=r)});if(s!==0&&a!==0){const n=u=>Math.round(1e4*u)/1e4,c=s?n(s):1/0,o=a?n(a):-1/0;return re.fromJSON({...t,lods:t.lods.filter(u=>{const l=n(u.scale);return l<=c&&l>=o})})}return re.fromJSON(t)}function ls(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Wt,t.extent=t.transform.forwardTransform(e))}T([_({type:String,json:{write:!0}})],te.prototype,"datasetFormat",void 0),T([_()],te.prototype,"tileType",void 0),te=T([V("esri.layers.support.rasterDatasets.ImageServerRaster")],te);const us=te,L=new Map;L.set("Int8","s8"),L.set("UInt8","u8"),L.set("Int16","s16"),L.set("UInt16","u16"),L.set("Int32","s32"),L.set("UInt32","u32"),L.set("Float32","f32"),L.set("Float64","f32"),L.set("Double64","f32");const z=new Map;z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"}),z.set("qb3",{blobExtension:".pq3",isOneSegment:!0,decoderFormat:"qb3"});let K=class extends Z{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(e,s,a,i={}){const{blockWidth:r,blockHeight:n,blockBoundary:c}=this.rasterInfo.storageInfo,o=c[e];if(!o||o.maxRow<s||o.maxCol<a||o.minRow>s||o.minCol>a)return null;const{bandCount:u,pixelType:l}=this.rasterInfo,{ranges:f,actualTileWidth:h,actualTileHeight:p}=this._getTileLocation(e,s,a);if(!f||f.length===0)return null;if(f[0].from===0&&f[0].to===0){const O=new Uint8Array(r*n);return new ne({width:r,height:n,pixels:void 0,mask:O,validPixelCount:0})}const{bandIds:g}=this.ioConfig,y=this._getBandSegmentCount(),b=[];let d=0;for(d=0;d<y;d++)g&&!g.includes(d)||b.push(this.request(this._files.data,{range:{from:f[d].from,to:f[d].to},responseType:"array-buffer",signal:i.signal}));const m=await Promise.all(b),I=m.map(O=>O.data.byteLength).reduce((O,k)=>O+k),w=new Uint8Array(I),v=[];let x=0;for(d=0;d<y;d++)v.push(x),w.set(new Uint8Array(m[d].data),x),x+=m[d].data.byteLength;const S=z.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(w.buffer,{width:r,height:n,format:S,planes:g?.length||u,offsets:v,pixelType:l}).catch(()=>null);if(R==null)return null;let{noDataValue:C}=this.rasterInfo;if(C!=null&&S!=="lerc"&&!R.mask&&(C=C[0],C!=null)){const O=R.width*R.height,k=new Uint8Array(O);if(Math.abs(C)>1e24)for(d=0;d<O;d++)Math.abs((R.pixels[0][d]-C)/C)>1e-6&&(k[d]=1);else for(d=0;d<O;d++)R.pixels[0][d]!==C&&(k[d]=1);R.mask=k}let M=0,$=0;if(h!==r||p!==n){let O=R.mask;if(O)for(d=0;d<n;d++)if($=d*r,d<p)for(M=h;M<r;M++)O[$+M]=0;else for(M=0;M<r;M++)O[$+M]=0;else for(O=new Uint8Array(r*n),R.mask=O,d=0;d<p;d++)for($=d*r,M=0;M<h;M++)O[$+M]=1}return R}async _open(e){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const s=e?e.signal:null,a=await this.request(this.url,{responseType:"xml",signal:s}),{rasterInfo:i,files:r}=this._parseHeader(a.data),{skipMapInfo:n,skipExtensions:c=[]}=this.ioConfig;if(!c.includes("aux.xml")&&!n){const m=await this._fetchAuxiliaryData(e);m!=null&&(i.statistics=m.statistics??i.statistics,i.histograms=m.histograms,m.histograms&&i.statistics==null&&(i.statistics=ge(m.histograms)))}n&&this.updateImageSpaceRasterInfo(i),this._set("rasterInfo",i),this._files=r;const o=await this.request(r.index,{responseType:"array-buffer",signal:s});this._storageIndex=cs(o.data);const{blockWidth:u,blockHeight:l}=this.rasterInfo.storageInfo,f=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:p}=this.rasterInfo,g=[],y=this._getBandSegmentCount();let b=0,d=-1;for(;b<this._storageIndex.length;){d++;const m=Math.ceil(h/u/f**d)-1,I=Math.ceil(p/l/f**d)-1;b+=(m+1)*(I+1)*y*4,g.push({maxRow:I,maxCol:m,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=g,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,s,a){const{blockWidth:i,blockHeight:r,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:c,height:o}=this.rasterInfo,u=this._getBandSegmentCount();let l,f,h,p=0,g=0;for(h=0;h<e;h++)g=n**h,l=Math.ceil(c/i/g),f=Math.ceil(o/r/g),p+=l*f;g=n**e,l=Math.ceil(c/i/g),f=Math.ceil(o/r/g),p+=s*l+a,p*=4*u;const y=this._storageIndex.subarray(p,p+4*u);let b=0,d=0;const m=[];for(let I=0;I<u;I++)b=y[4*I]*2**32+y[4*I+1],d=b+y[4*I+2]*2**32+y[4*I+3]-1,m.push({from:b,to:d});return{ranges:m,actualTileWidth:a<l-1?i:Math.ceil(c/g)-i*(l-1),actualTileHeight:s<f-1?r:Math.ceil(o/g)-r*(f-1)}}_parseHeader(e){const s=A(e,"MRF_META/Raster");if(!s)throw new F("mrf:open","not a valid MRF format");const a=A(s,"Size"),i=parseInt(a.getAttribute("x"),10),r=parseInt(a.getAttribute("y"),10),n=parseInt(a.getAttribute("c"),10),c=(J(s,"Compression")||"none").toLowerCase();if(!z.has(c))throw new F("mrf:open","currently does not support compression "+c);const o=J(s,"DataType")||"UInt8",u=L.get(o);if(u==null)throw new F("mrf:open","currently does not support pixel type "+o);const l=A(s,"PageSize"),f=parseInt(l.getAttribute("x"),10),h=parseInt(l.getAttribute("y"),10),p=A(s,"DataValues");let g,y;if(p&&(y=p.getAttribute("NoData"),y!=null&&(g=y.trim().split(" ").map(O=>parseFloat(O)))),A(e,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const b=A(e,"MRF_META/GeoTags"),d=A(b,"BoundingBox");let m,I=!1;if(d!=null){const O=parseFloat(d.getAttribute("minx")),k=parseFloat(d.getAttribute("miny")),N=parseFloat(d.getAttribute("maxx")),Y=parseFloat(d.getAttribute("maxy")),G=J(b,"Projection")||"";let U=D.WGS84;if(G!=="LOCAL_CS[]")if(G.toLowerCase().startsWith("epsg:")){const B=Number(G.slice(5));isNaN(B)||B===0||(U=new D({wkid:B}))}else U=ue(G)??D.WGS84;else I=!0,U=new D({wkid:3857});m=new H(O,k,N,Y),m.spatialReference=U}else I=!0,m=new H({xmin:-.5,ymin:.5-r,xmax:i-.5,ymax:.5,spatialReference:new D({wkid:3857})});const w=A(e,"MRF_META/Rsets"),v=parseInt(w?.getAttribute("scale")||"2",10),x=m.spatialReference,S=new ye({origin:new q({x:m.xmin,y:m.ymax,spatialReference:x}),blockWidth:f,blockHeight:h,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:c,pyramidScalingFactor:v}),R=new q({x:m.width/i,y:m.height/r,spatialReference:x}),C=new le({width:i,height:r,extent:m,isPseudoSpatialReference:I,spatialReference:x,bandCount:n,pixelType:u,pixelSize:R,noDataValue:g,storageInfo:S}),M=J(e,"datafile"),$=J(e,"IndexFile");return{rasterInfo:C,files:{mrf:this.url,index:$||this.url.replace(".mrf",".idx"),data:M||this.url.replace(".mrf",z.get(c).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:s}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ie(s)}catch{return null}}};function cs(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,a,i,r,n;if(Et){for(s=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),a=new Uint8Array(i),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)a[4*r+n]=s[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}T([_()],K.prototype,"_files",void 0),T([_()],K.prototype,"_storageIndex",void 0),T([_({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),K=T([V("esri.layers.support.rasterDatasets.MRFRaster")],K);const fs=K;function hs(t){const e=t.fields,s=t.records,a=e.some(u=>u.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(u=>({name:u.name,type:"esriFieldType"+u.typeName,alias:u.name}))),r=i.map(u=>u.name),n=[];let c=0,o=0;return s.forEach(u=>{const l={};for(l[a]=c++,o=1;o<r.length;o++)l[r[o]]=u[o-1];n.push({attributes:l})}),{displayFieldName:"",fields:i,features:n}}class ps{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),a=3&s.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),c={version:a,recordCount:i,headerByteCount:r,recordByteCount:n};let o=32;const u=[],l=[];let f;if(a===3){for(;s.getUint8(o)!==13;)f=String.fromCharCode(s.getUint8(o+11)).trim(),u.push({name:Se(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(o+16)}),o+=32;if(o+=1,u.length>0)for(;l.length<i&&e.byteLength-o>n;){const h=[];s.getUint8(o)===32?(o+=1,u.forEach(p=>{if(p.type==="C")h.push(Se(new Uint8Array(e,o,p.length)).trim());else if(p.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim(),10));else if(p.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim()));else if(p.type==="D"){const g=String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim();h.push(new Date(parseInt(g.slice(0,4),10),parseInt(g.slice(4,6),10)-1,parseInt(g.slice(6,8),10)))}o+=p.length}),l.push(h)):o+=n}}return{header:c,fields:u,records:l,recordSet:hs({fields:u,records:l})}}}const me=(t,e)=>t.get(e)?.values,se=(t,e)=>t.get(e)?.values?.[0];let j=class extends Z{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this._chunkSize=10485760,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,a={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const i=await this._fetchRawTiffTile(t,e,s,!1,a);if(i!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,a);r!=null&&r.pixels[0]instanceof Uint8Array&&(i.mask=r.pixels[0])}return i}async _open(t){const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:a,firstIFDPos:i,isBigTiff:r}=Dt(s),n=[],c={fileChunk:s,posIFD:i,fileOffset:0};await this._readIFDs(n,c,a,r?8:4,e);const{imageInfo:o,rasterInfo:u}=ds(n),l=Bt(n),f=Lt(n);if(this._headerInfo={littleEndian:a,isBigTiff:r,ifds:n,pyramidIFDs:l,maskIFDs:f,...o},this._set("rasterInfo",u),!o.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");u.isPseudoSpatialReference&&Q.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const h=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&h===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:g,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!g){const b=await this._fetchAuxiliaryMetaData(t);b!=null&&ms(b,u)}y.includes("vat.dbf")||u.bandCount!==1||u.pixelType!=="u8"||g||(u.attributeTable=await this._fetchAuxiliaryTable(t),u.attributeTable!=null&&(u.keyProperties.DataType="thematic")),g&&this.updateImageSpaceRasterInfo(u),this.updateTileInfo()}async _validateOrFetchHeaderBuffer(t,e){let{fileChunk:s,fileOffset:a,posIFD:i}=t;return(i+8>=s.byteLength||i<0)&&(a=i+a,s=(await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:e})).data,i=0),{fileChunk:s,fileOffset:a,posIFD:i}}async _readIFDs(t,e,s,a=4,i){if(!e.posIFD)return null;e=await this._validateOrFetchHeaderBuffer(e,i);const r=await this._readIFD(e,s,Te,a,i);if(!r?.ifd)throw new F("tiffraster:open","cannot parse tiff header. failed to open url "+this.url);if(t.push(r.ifd),!r.nextIFD)return null;e.posIFD=r.nextIFD-e.fileOffset,await this._readIFDs(t,e,s,a,i)}async _readIFD(t,e,s=Te,a=4,i){let{fileChunk:r,posIFD:n,fileOffset:c}=t;if(!t.fileChunk)return null;const o=At(r,e,n,c,s,a);if(o.success){const u=[];if(o.ifd?.forEach(l=>{l.values||u.push(l)}),u.length>0&&await this._fillOffsets(u,e,o.nextIFD,i),o.ifd?.has("GEOKEYDIRECTORY")){const l=o.ifd.get("GEOKEYDIRECTORY"),f=l?.values;if(f&&f.length>4){const h=f[0]+"."+f[1]+"."+f[2];n=l.valueOffset+6-c;const p=await this._validateOrFetchHeaderBuffer({fileChunk:r,posIFD:n,fileOffset:c},i),g=await this._readIFD(p,e,Jt,2,i);l.data=g?.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return o}return o.requiredBufferSize?(r=(await this.request(this.url,{range:{from:c,to:c+n+o.requiredBufferSize+8},responseType:"array-buffer",signal:i})).data,r.byteLength<n+o.requiredBufferSize?null:(t.fileChunk=r,t.fileOffset=c,this._readIFD(t,e,s,a,i))):null}async _fillOffsets(t,e,s,a){const i=t.filter(l=>l.offlineOffsetSize!=null);if(i.length===0)return;const r=i.map(l=>l.offlineOffsetSize),n=Math.min.apply(null,r.map(l=>l[0])),c=Math.max.apply(null,r.map(l=>l[0]+l[1]));let o=r.length===1||c-n<=this._bufferSize;if(!o&&r.length>1&&(r.sort((l,f)=>l[0]-f[0]),o=r.reduce((l,f)=>l===f[0]?f[0]+f[1]:0,r[0][0])===c),o){const l=await this._fetchOffsets(n,Math.max(c,n+this._bufferSize),a);return void i.forEach(f=>Re(l,e,f,n))}const u=i.map(async l=>{const f=l.offlineOffsetSize,h=await this._fetchOffsets(f[0],f[1]+f[0],a);Re(h,e,l,f[0])});await Promise.all(u)}async _fetchOffsets(t,e,s){const a=[],i=this._chunkSize,r=Math.ceil((e-t)/i);let n=t;for(let u=0;u<r;u++)a.push(this.request(this.url,{range:{from:n,to:u===r-1?e:n+i-1},responseType:"array-buffer",signal:s})),n+=i;const c=await Promise.all(a);if(r===1)return c[0].data;const o=new Uint8Array(e-t+1);for(let u=0;u<r;u++)o.set(new Uint8Array(c[u].data),u*i);return o.buffer}async _fetchRawTiffTile(t,e,s,a,i={}){const r=this._getTileLocation(t,e,s,a);if(!r)return null;const{ranges:n,actualTileWidth:c,actualTileHeight:o,ifd:u}=r,l=n.map(x=>this.request(this.url,{range:x,responseType:"array-buffer",signal:i.signal})),f=await Promise.all(l),h=f.map(x=>x.data.byteLength).reduce((x,S)=>x+S),p=f.length===1?f[0].data:new ArrayBuffer(h),g=[0],y=[0];if(f.length>1){const x=new Uint8Array(p);for(let S=0,R=0;S<f.length;S++){const C=f[S].data;x.set(new Uint8Array(C),R),g[S]=R,R+=C.byteLength,y[S]=C.byteLength}}const{blockWidth:b,blockHeight:d}=this.getBlockWidthHeight(t),m=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:u,offsets:g,sizes:y},width:b,height:d,planes:null,pixelType:null});if(m==null)return null;let I,w,v;if(c!==b||o!==d){let x=m.mask;if(x)for(I=0;I<d;I++)if(v=I*b,I<o)for(w=c;w<b;w++)x[v+w]=0;else for(w=0;w<b;w++)x[v+w]=0;else for(x=new Uint8Array(b*d),m.mask=x,I=0;I<o;I++)for(v=I*b,w=0;w<c;w++)x[v+w]=1}return m}_getTileLocation(t,e,s,a=!1){const{firstPyramidLevel:i,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(i-1),{_headerInfo:c}=this;if(!c)return null;const o=a?c.maskIFDs[n]:n===0?c?.ifds[0]:c?.pyramidIFDs[n-1];if(!o)return null;const u=zt(o,c),l=me(o,"TILEOFFSETS");if(l===void 0)return null;const f=me(o,"TILEBYTECOUNTS"),{minRow:h,minCol:p,maxRow:g,maxCol:y}=r[n];if(e>g||s>y||e<h||s<p)return null;const b=se(o,"IMAGEWIDTH"),d=se(o,"IMAGELENGTH"),m=se(o,"TILEWIDTH"),I=se(o,"TILELENGTH"),w=[];if(u){const{bandCount:v}=this.rasterInfo;for(let x=0;x<v;x++){const S=x*(g+1)*(y+1)+e*(y+1)+s;w[x]={from:l[S],to:l[S]+f[S]-1}}}else{const v=e*(y+1)+s;w.push({from:l[v],to:l[v]+f[v]-1})}for(let v=0;v<w.length;v++)if(w[v].from==null||!w[v].to||w[v].to<0)return null;return{ranges:w,ifd:o,actualTileWidth:s===y&&b%m||m,actualTileHeight:e===g&&d%I||I}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ie(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=ps.parse(e);return s?.recordSet?ke.fromJSON(s.recordSet):null}catch{return null}}};function ds(t){const e=Ut(t),{width:s,height:a,tileWidth:i,tileHeight:r,planes:n,pixelType:c,compression:o,firstPyramidLevel:u,maximumPyramidLevel:l,pyramidBlockWidth:f,pyramidBlockHeight:h,pyramidResolutions:p,tileBoundary:g,affine:y,metadata:b}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let m=ue(d),I=!!e.isPseudoGeographic;m==null&&(I=!0,m=new D({wkid:3857}));const w=new H({...e.extent,spatialReference:m}),v=new q(w?{x:w.xmin,y:w.ymax,spatialReference:m}:{x:0,y:0}),x=new ye({blockWidth:i,blockHeight:r,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,origin:v,firstPyramidLevel:u,maximumPyramidLevel:l,pyramidResolutions:p,blockBoundary:g}),S=new q({x:(w.xmax-w.xmin)/s,y:(w.ymax-w.ymin)/a,spatialReference:m}),R=b?{BandProperties:b.bandProperties,DataType:b.dataType}:{};let C=null;const M=se(t[0],"PHOTOMETRICINTERPRETATION"),$=me(t[0],"COLORMAP");if(M<=3&&$?.length>3&&$.length%3==0){C=[];const k=$.length/3;for(let N=0;N<k;N++)C.push([N,$[N]>>>8,$[N+k]>>>8,$[N+2*k]>>>8])}const O=new le({width:s,height:a,bandCount:n,pixelType:c,pixelSize:S,storageInfo:x,spatialReference:m,isPseudoSpatialReference:I,keyProperties:R,extent:w,colormap:C,statistics:b?b.statistics:null});if(y?.length&&(O.nativeExtent=new H({xmin:-.5,ymin:.5-a,xmax:s-.5,ymax:.5,spatialReference:m}),O.transform=new we({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),O.extent=O.transform.forwardTransform(O.nativeExtent),O.pixelSize=new q({x:(w.xmax-w.xmin)/s,y:(w.ymax-w.ymin)/a,spatialReference:m}),x.origin.x=-.5,x.origin.y=.5),p){const{x:k,y:N}=O.pixelSize;p.forEach(Y=>{Y.x*=k,Y.y*=N})}return{imageInfo:e,rasterInfo:O}}function ms(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=ge(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new q({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}T([_()],j.prototype,"_files",void 0),T([_()],j.prototype,"_headerInfo",void 0),T([_()],j.prototype,"_bufferSize",void 0),T([_()],j.prototype,"_chunkSize",void 0),T([_({type:String,json:{write:!0}})],j.prototype,"datasetFormat",void 0),j=T([V("esri.layers.support.rasterDatasets.TIFFRaster")],j);const gs=j,E=new Map;E.set("MRF",{desc:"Meta Raster Format",constructor:fs}),E.set("TIFF",{desc:"GeoTIFF",constructor:gs}),E.set("RasterTileServer",{desc:"Raster Tile Server",constructor:us}),E.set("JPG",{desc:"JPG Raster Format",constructor:ie}),E.set("PNG",{desc:"PNG Raster Format",constructor:ie}),E.set("GIF",{desc:"GIF Raster Format",constructor:ie}),E.set("BMP",{desc:"BMP Raster Format",constructor:ie}),E.set("CovJSON",{desc:"COVJSON Raster Format",constructor:is}),E.set("MEMORY",{desc:"In Memory Raster Format",constructor:xe});class de{static get supportedFormats(){const e=new Set;return E.forEach((s,a)=>e.add(a)),e}static async open(e){const{url:s,ioConfig:a,source:i,sourceJSON:r}=e;let n=e.datasetFormat??a?.datasetFormat;n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():i?.type?.toLowerCase()==="coverage"?n="CovJSON":i?.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const c={url:s,source:i,sourceJSON:r,datasetFormat:n,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(c).forEach(f=>{c[f]==null&&delete c[f]}),n){if(!this.supportedFormats.has(n))throw new F("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${s}`);const f=new(E.get(n)).constructor(c);return await f.open({signal:e.signal}),f}const o=Array.from(E.keys()).filter(f=>f!=="CovJSON"&&f!=="Memory");let u=0;const l=()=>{if(n=o[u++],!n||n==="CRF")return null;const f=new(E.get(n)).constructor(c);return f.open({signal:e.signal}).then(()=>f).catch(()=>l())};return l()}static register(e,s,a){E.has(e.toUpperCase())||E.set(e.toUpperCase(),{desc:s,constructor:a})}}let P=class extends Ve(Ye(Xe(Ke(It(Ze(mt(yt(Qe(et(tt(st(at(it))))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.graphicOrigin=new Zt(this),this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.screenSizePerspectiveEnabled=!0,this.fields=null,this.source=void 0,this._debouncedSaveOperations=rt(async(e,s,a)=>{const{save:i,saveAs:r}=await nt(()=>import("./imageryUtils-YbPzVGyq.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(e){case 0:return i(this,s);case 1:return r(this,a,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(ot).then(()=>this._openRaster(e))),Promise.resolve(this)}set elevationInfo(t){t?.mode!=="relative-to-scene"&&this._set("elevationInfo",t),this._validateElevationInfo(t)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[bt("Pixel Value"),vt("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable;if(s){const r=St(s);t.push(...r)}const a=e?.dataType,i=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const r=i.variables[0].unit?.trim(),n=Tt(r),c=Rt();t.push(n,c)}if(i){const r=_t(i);t.push(...r)}return t}get renderer(){return super.renderer}set renderer(t){super.renderer=t}createPopupTemplate(t){const{rasterFields:e}=this,s=t?.visibleFieldNames??new Set(e.map(({name:r})=>r).filter(r=>r!==Ot.rawServicePixelValue)),a=lt({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return a?.fieldInfos&&i&&Ct(a.fieldInfos,i),a}async generateRasterInfo(t,e){if(t=ut(Pe,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof F?s:new F("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(0,t)}async saveAs(t,e){return this._debouncedSaveOperations(1,e,t)}supportsWrite(){const t=this._primaryRasters[0]??this.raster;return!!(this.loaded?t.datasetFormat==="RasterTileServer"&&(t.tileType==="Raster"||t.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))}write(t,e){if(this.supportsWrite())return super.write(t,e);if(e?.messages){const s=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=Mt(this.raster),!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:a,rasterFunction:i,source:r}=this;if(!a&&!r)throw new F("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):i?await this._openFromUrlWithRasterFunction(a,i,t):await this._openFromUrl(a,t)}const s=this.raster.rasterInfo;if(!s)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const a=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(a,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(ct(()=>this.customParameters,a=>{this.raster&&(this.raster.ioConfig.customFetchParameters=a)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=Pt(t),this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const a=[t];e&&Vt(e.toJSON(),a);const i=await Promise.all(a.map(n=>de.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=i.findIndex(n=>n==null);if(r>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${a[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await de.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",a=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!a)throw new F("imagery-tile-layer:open",s);a==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await de.open({url:"",source:t,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new F("imagery-tile-layer:open",s);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const a=Yt(t.functionDefinition?.toJSON()??t.toJSON(),s),i=new gt({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof F&&Q.getLogger(this).error("imagery-tile-layer:open",s.message),Q.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}_validateElevationInfo(t){_e(Q.getLogger(this),Xt("ImageryTile layers","relative-to-scene",t)),_e(Q.getLogger(this),Kt("ImageryTile layers",t))}};T([_({clonable:!1})],P.prototype,"_primaryRasters",void 0),T([_({type:ft,value:null,json:{name:"layerDefinition.elevationInfo",write:!0,origins:{"portal-item":{read:!1,write:!1},"web-map":{read:!1,write:!1}}}})],P.prototype,"elevationInfo",null),T([_({readOnly:!0,clonable:!1})],P.prototype,"graphicOrigin",void 0),T([_(ht)],P.prototype,"legendEnabled",void 0),T([_({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],P.prototype,"isReference",void 0),T([_({type:["show","hide"]})],P.prototype,"listMode",void 0),T([_({json:{read:!0,write:!0}})],P.prototype,"blendMode",void 0),T([_({type:Pe,json:{name:"renderingRule",write:!0}})],P.prototype,"rasterFunction",void 0),T([_()],P.prototype,"sourceJSON",void 0),T([_({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],P.prototype,"version",void 0),T([_({readOnly:!0,json:{read:!1}})],P.prototype,"type",void 0),T([_({type:["ArcGISTiledImageServiceLayer"]})],P.prototype,"operationalLayerType",void 0),T([_({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],P.prototype,"popupEnabled",void 0),T([_({type:pt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],P.prototype,"popupTemplate",void 0),T([_({readOnly:!0})],P.prototype,"defaultPopupTemplate",null),T([_(dt)],P.prototype,"screenSizePerspectiveEnabled",void 0),T([_({readOnly:!0,type:[ve]})],P.prototype,"fields",void 0),T([_({readOnly:!0,type:[ve]})],P.prototype,"rasterFields",null),T([_({constructOnly:!0})],P.prototype,"source",void 0),P=T([V("esri.layers.ImageryTileLayer")],P);const As=P;export{As as default};
