import{bg as p,ay as m,bu as s}from"./index-C2z3vZ9k.js";import{p as n}from"./MeshVertexAttributes-DInyUQRV.js";import{B as a}from"./vertexSpaceConversion-8L4OptSt.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-C2OjpGmC.js";import"./computeTranslationToOriginAndRotation-C8BDq0i3.js";import"./projectPointToVector-C7rIZLZy.js";import"./meshVertexSpaceUtils-U6J9mgCD.js";import"./MeshLocalVertexSpace-uNUkTZgz.js";import"./vec3-C7xdHutz.js";import"./BufferView-nrdQCOt1.js";import"./vec4-Dycn1WxC.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
