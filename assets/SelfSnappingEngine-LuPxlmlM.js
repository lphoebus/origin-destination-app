import{fI as B,pF as G,cc as $,pG as Q,pH as H,pI as j,iG as N,ku as z,iv as O,iu as A,pJ as W,pK as X,pL as Y,jU as Z,gi as ee,ha as te,pM as se,g8 as ie,cn as re,b8 as L,ba as M,bb as ne}from"./index-Bkom2Sdc.js";import{U as x}from"./elevationInfoUtils-9Dliwvku.js";import{p as P,m as f,n as T,s as p,o as u,q as R,b as k,j as J,O as oe,r as q,c as D,D as ae,t as he,y as le}from"./hitTestSelectUtils-ID6ADgkK.js";import{s as S,i as ce,h as pe,r as de,f as ge}from"./SketchViewModel-Dt_N4A8A.js";import{y as F,U as K}from"./angularMeasurementUtils-D8nr_k6M.js";import"./projectVectorToVector-Un_2LyvX.js";import"./projectPointToVector-DMoufHKJ.js";import"./geodesicUtils-DQpNsZcr.js";import"./plane-B-4Z4GK_.js";import"./vectorStacks-CNkTMSGr.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DYgRQGlT.js";import"./spatialReferenceEllipsoidUtils-BXlmM8F6.js";import"./geodeticLengthOperator-DbGP2SKX.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-jd78RGb7.js";import"./lineSegment-D1HJwPUS.js";class C{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||T(S(e,t,x,this.view),S(s,t,x,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=B(t);return G(p(s),p(e))*i<P.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class fe extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.parts[0],i=t.segments.length,n=[];if(i<1)return n;const{spatialReference:o}=e,a=S(s,o,x,this.view),{view:r}=this,h=t.segments[i-1];let l=h;do{if(u(l)&&this.edgeExceedsShortLineThreshold(l,e)){const d=R(l,r,e);this._processCandidateProposal(d.left,d.right,s,a,e,n)}l=l.leftVertex.leftSegment}while(l&&l!==h);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,n=i.part;if(n.segments.length<2)return t;const{view:o}=this,{spatialReference:a}=e,r=S(s,a,x,o),h=i.leftSegment,l=i.rightSegment;u(h)&&u(l)&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(l,e)&&this._processCandidateProposal(f(h.leftVertex.pos,o,e),f(l.rightVertex.pos,o,e),s,r,e,t);const d=n.segments[0];let g=d;do{if(u(g)&&g!==i.leftSegment&&g!==i.rightSegment&&this.edgeExceedsShortLineThreshold(g,e)){const v=R(g,o,e);this._processCandidateProposal(v.left,v.right,s,r,e,t)}g=g.rightVertex.rightSegment}while(g&&g!==d);return t}_processCandidateProposal(s,e,t,i,n,o){const{spatialReference:a,pointer:r}=n,h=$();ue(h,s,e,t,n,this._geodesicLengthMeasurementUtils);const l=k(J(h));T(i,S(l,a,x,this.view))<this.squaredProximityThreshold(r)&&o.push(new ce({lineStart:s,lineEnd:e,targetPoint:l,isDraped:n.elevationInfo?.mode==="on-the-ground"}))}}function ue(c,s,e,t,i,n){me(c,s,e,t,i,n)||xe(c,t,s,e)}function me(c,s,e,t,{spatialReference:i},n){const o=F(s,e,i,i);if(o==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const r=n.geodesicDistance(e,t,i);if(r==null)return!1;const h=Math.abs(Q.shortestSignedDiff(o,a))>Math.PI/2?H.normalize(o+Math.PI):o;return K(c,e,i,j(r,"meters"),N(h,"radians","geographic"),"geodesic"),c[2]=t[2],!0}function xe(c,s,e,t){oe(s,{start:e,end:t,type:1},c),c[2]=s[2]}class Se extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.parts[0],i=t.segments.length,n=t.vertices.length,o=[];if(i<2)return o;const{view:a}=this,r=S(s,e.spatialReference,x,a),h=t.vertices[0],l=t.vertices[n-1],d=u(l.leftSegment)?f(l.pos,a,e):null,g=u(h.rightSegment)?f(h.pos,a,e):null,v=t.segments[i-1];let m=v;do{if(u(m)&&this.edgeExceedsShortLineThreshold(m,e)){const y=R(m,a,e);d&&this._checkEdgeForParallelLines(y,d,s,r,e,o),g&&this._checkEdgeForParallelLines(y,g,s,r,e,o)}m=m.leftVertex.leftSegment}while(m&&m!==v);return o}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,n=i.part;if(n.segments.length<3)return t;const{view:o}=this,a=S(s,e.spatialReference,x,o),r=i.leftSegment,h=i.rightSegment,l=n.vertices[0],d=f(l.pos,o,e),g=n.vertices.length,v=n.vertices[g-1],m=f(v.pos,o,e),y=n.segments[0];let w=y;do{if(u(w)&&w!==r&&w!==h&&this.edgeExceedsShortLineThreshold(w,e)){const E=R(w,o,e);u(r)&&this._checkEdgeForParallelLines(E,f(r.leftVertex.pos,o,e),s,a,e,t),u(h)&&this._checkEdgeForParallelLines(E,f(h.rightVertex.pos,o,e),s,a,e,t),i===l?this._checkEdgeForParallelLines(E,m,s,a,e,t):i===v&&this._checkEdgeForParallelLines(E,d,s,a,e,t)}w=w.rightVertex.rightSegment}while(w&&w!==y);return t}_checkEdgeForParallelLines(s,e,t,i,n,o){const a=s.left,r=s.right;if(q(V,p(e),p(a),p(r)),z(V,p(e))<P.parallelLineThreshold)return;q(V,p(t),p(a),p(r),p(e));const{spatialReference:h,pointer:l}=n,d=k(D(V[0],V[1],t[2]));if(T(i,S(d,h,x,this.view))<this.squaredProximityThreshold(l)){if(this.isVertical(d,e,n)||this.isVertical(a,r,n)||ve(s,o))return;o.push(new pe({referenceLine:s,lineStart:e,targetPoint:d,isDraped:n.elevationInfo?.mode==="on-the-ground"}))}}}function ve(c,s){const e=c.left,t=c.right;for(const i of s)if(q(V,p(t),p(i.constraint.start),p(i.constraint.end),p(e)),z(V,p(t))<P.parallelLineThreshold)return i.addReferenceLine(c),!0;return!1}const V=O();class we extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.parts[0],i=[];if(t.vertices.length<2)return i;const{view:n}=this,o=S(s,e.spatialReference,x,n),a=t.vertices.at(-1);u(a.leftSegment)&&this._checkForSnappingCandidate(1,i,a.leftSegment,a,a.leftSegment.leftVertex,s,o,e);const r=t.vertices[0];return u(r.rightSegment)&&this._checkForSnappingCandidate(2,i,r.rightSegment,r,r.rightSegment.rightVertex,s,o,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.part.vertices.length<3)return t;const{view:n}=this,o=S(s,e.spatialReference,x,n),a=i.leftSegment,r=i.rightSegment;if(u(a?.leftVertex.leftSegment)){const h=a.leftVertex.leftSegment;this._checkForSnappingCandidate(3,t,h,h.rightVertex,h.leftVertex,s,o,e)}if(u(r)&&u(r.rightVertex.rightSegment)){const h=r.rightVertex.rightSegment;this._checkForSnappingCandidate(3,t,h,h.leftVertex,h.rightVertex,s,o,e)}return t}_checkForSnappingCandidate(s,e,t,i,n,o,a,r){if(!u(t)||!this.edgeExceedsShortLineThreshold(t,r))return;const h=this.view,l=f(i.pos,h,r),d=f(n.pos,h,r);ye(b,d,l,o,r,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,d,l,b,o,a,r)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,n,o,a,r){const{spatialReference:h,pointer:l}=r,d=A(U,p(o),p(i)),g=W(n,d)/X(n),v=Y(U,p(i),n,g),m=k(D(v[0],v[1],o[2]));if(T(a,S(m,h,x,this.view))>this.squaredProximityThreshold(l)||this.isVertical(m,i,r)||this.isVertical(i,t,r))return;const y=Z($(),i,n,Math.sign(g));e.push(new de({targetPoint:m,constraint:new ae(i,J(y)),previousVertex:t,otherVertex:i,otherVertexType:1,selfSnappingType:s,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function ye(c,s,e,t,i,n){Ve(c,s,e,t,i,n)||_e(c,s,e)}function Ve(c,s,e,t,{spatialReference:i},n){const o=F(s,e,i,i);if(o==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const r=Math.sign(H.shortestSignedDiff(o,a))*Math.PI*.5,h=N(o+r,"radians","geographic"),l=$(),d=n.geodesicDistance(e,t,i);return d!=null&&(K(l,e,i,j(d,"meters"),h,"geodesic"),ee(c,l,e),!0)}function _e(c,s,e){const t=A(U,p(e),p(s));te(c,t[1],-t[0],0)}const U=O(),b=$();class Le extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.parts[0],i=[],n=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||n<2)return i;const{view:o}=this,a=t.vertices[0],r=t.vertices[n-1];if(r.leftSegment&&r.leftSegment.type!=="line"||r.rightSegment&&r.rightSegment.type!=="line")return i;const h=f(a.pos,o,e),l=f(r.pos,o,e);return this._processCandidateProposal(h,l,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,n=i.part;if(n.segments.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===n.vertices.length-1)||i.leftSegment?.type!=="line"||i.rightSegment?.type!=="line")return t;const{view:o}=this,a=f(i.leftSegment.leftVertex.pos,o,e),r=f(i.rightSegment.rightVertex.pos,o,e);return this._processCandidateProposal(a,r,s,e,t),t}_processCandidateProposal(s,e,t,i,n){if(!this.exceedsShortLineThreshold(s,e,i))return;const o=se(I,p(s),p(e),.5),a=.5*G(p(s),p(e)),r=he(I,p(t),o,a),h=k(D(r[0],r[1],t[2])),{spatialReference:l,pointer:d}=i,g=S(t,l,x,this.view);if(T(g,S(h,l,x,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;n.push(new ge({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}}const I=O();let _=class extends ie{constructor(c){super(c),this.updating=!1,this._snappers=new re,this._domain=2}initialize(){this._snappers.push(new Se(this.view,this.options),new fe(this.view,this.options,this.geodesicLengthMeasurementUtils),new we(this.view,this.options,this.geodesicLengthMeasurementUtils),new Le(this.view,this.options))}set options(c){this._set("options",c);for(const s of this._snappers)s.options=c}async fetchCandidates(c,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const n of i.snap(c,e))t.push(n);return le(c,t),t}};L([M({readOnly:!0})],_.prototype,"updating",void 0),L([M({constructOnly:!0})],_.prototype,"view",void 0),L([M({constructOnly:!0})],_.prototype,"geodesicLengthMeasurementUtils",void 0),L([M()],_.prototype,"options",null),_=L([ne("esri.views.interactive.snapping.SelfSnappingEngine")],_);export{_ as SelfSnappingEngine};
