import{b6 as v,b4 as B,jf as T,cb as C,bf as k,b8 as d,ba as x,hk as M,bb as U}from"./index-Bkom2Sdc.js";class b{constructor(e=null,a=null,n=null){this.minValue=e,this.maxValue=a,this.noDataValue=n}}var A;let g=A=class extends v{static createEmptyBand(t,e){return new(A.getPixelArrayConstructor(t))(e)}static combineBandMasks(t){if(t.length<2)return t[0];const e=t[0].length,a=new Uint8Array(e).fill(255);for(let n=0;n<t.length;n++){const r=t[n];for(let i=0;i<e;i++)r[i]||(a[i]=0)}return a}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new B("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new b)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map(a=>V(a,this.mask));const t=this.mask;let e=0;if(t!=null)for(let a=0;a<t.length;a++)t[a]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||t==="f64"||t==="f32"||!this.pixels)return;const[e,a]=T(t),n=this.pixels,r=this.width*this.height,i=n.length;let s,p,l;const c=[];for(let u=0;u<i;u++){l=A.createEmptyBand(t,r),s=n[u];for(let h=0;h<r;h++)p=s[h],l[h]=p>a?a:p<e?e:p;c.push(l)}this.pixels=c,this.pixelType=t}extractBands(t){const{pixels:e,statistics:a}=this;if(t==null||t.length===0||!e||e.length===0)return this;const n=e.length,r=t.some(h=>h>=e.length),i=n===t.length&&!t.some((h,m)=>h!==m);if(r||i)return this;const s=this.bandMasks?.length===n?t.map(h=>this.bandMasks[h]):void 0;let{mask:p,validPixelCount:l}=this;const{width:c,height:u}=this;return s?.length&&(p=A.combineBandMasks(s),l=p.filter(h=>!!h).length),new A({pixelType:this.pixelType,width:c,height:u,mask:p,bandMasks:s,validPixelCount:l,maskIsAlpha:this.maskIsAlpha,pixels:t.map(h=>e[h]),statistics:a&&t.map(h=>a[h])})}clone(){const t=new A({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount,premultiplyAlpha:this.premultiplyAlpha,depthCount:this.depthCount});let e;this.mask!=null&&(t.mask=new Uint8Array(this.mask)),this.noDataValues&&(t.noDataValues=[...this.noDataValues]),this.bandMasks&&(t.bandMasks=this.bandMasks.map(n=>new Uint8Array(n)));const a=A.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const n=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=n?this.pixels[e].slice():new a(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=C(this.statistics[e]);return t}getTransferableObject(){const{pixels:t,bandMasks:e,mask:a}=this;this.pixels=[],this.bandMasks=void 0,this.mask=void 0;const n=this.toJSON();this.pixels=t,this.bandMasks=e,this.mask=a,n.pixels=t&&[...t],n.bandMasks=e&&[...e],n.mask=a;const r=[];return[...t??[],a,...e??[]].filter(i=>i!=null&&ArrayBuffer.isView(i)).forEach(i=>{i&&!r.includes(i.buffer)&&r.push(i.buffer)}),{pixelBlock:n,transferList:r}}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:a,premultiplyAlpha:n,pixels:r}=this;if(!t||!r?.length)return void k.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let i,s,p,l;i=s=p=r[0],r.length>=3?(s=r[1],p=r[2]):r.length===2&&(s=r[1]);const c=new Uint32Array(t),u=this.width*this.height;if(i.length===u)if(e!=null&&e.length===u)if(a)for(l=0;l<u;l++){const h=e[l];if(h){const m=h/255;c[l]=n?h<<24|p[l]*m<<16|s[l]*m<<8|i[l]*m:h<<24|p[l]<<16|s[l]<<8|i[l]}}else for(l=0;l<u;l++)e[l]&&(c[l]=255<<24|p[l]<<16|s[l]<<8|i[l]);else for(l=0;l<u;l++)c[l]=255<<24|p[l]<<16|s[l]<<8|i[l];else k.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:a,statistics:n}=this;if(!t||!e?.length)return void k.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const r=this.pixelType;let i=1,s=0,p=1;if(n&&n.length>0){for(const f of n)if(f.minValue!=null&&(s=Math.min(s,f.minValue)),f.maxValue!=null&&f.minValue!=null){const w=f.maxValue-f.minValue;p=Math.max(p,w)}i=255/p}else{let f=255;r==="s8"?(s=-128,f=127):r==="u16"?f=65535:r==="s16"?(s=-32768,f=32767):r==="u32"?f=4294967295:r==="s32"?(s=-2147483648,f=2147483647):r==="f32"?(s=-34e38,f=34e38):r==="f64"&&(s=-Number.MAX_VALUE,f=Number.MAX_VALUE),i=255/(f-s)}const l=new Uint32Array(t),c=this.width*this.height;let u,h,m,o,y;if(u=h=m=e[0],u.length!==c)return k.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(h=e[1],e.length>=3&&(m=e[2]),a!=null&&a.length===c)for(o=0;o<c;o++)a[o]&&(l[o]=255<<24|(m[o]-s)*i<<16|(h[o]-s)*i<<8|(u[o]-s)*i);else for(o=0;o<c;o++)l[o]=255<<24|(m[o]-s)*i<<16|(h[o]-s)*i<<8|(u[o]-s)*i;else if(a!=null&&a.length===c)for(o=0;o<c;o++)y=(u[o]-s)*i,a[o]&&(l[o]=255<<24|y<<16|y<<8|y);else for(o=0;o<c;o++)y=(u[o]-s)*i,l[o]=255<<24|y<<16|y<<8|y}_fillFrom32Bit(t){const{pixels:e,mask:a}=this;if(!t||!e?.length)return k.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let n,r,i,s;n=r=i=e[0],e.length>=3?(r=e[1],i=e[2]):e.length===2&&(r=e[1]);const p=this.width*this.height;if(n.length!==p)return k.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let l=0;if(a!=null&&a.length===p)for(s=0;s<p;s++)t[l++]=n[s],t[l++]=r[s],t[l++]=i[s],t[l++]=1&a[s];else for(s=0;s<p;s++)t[l++]=n[s],t[l++]=r[s],t[l++]=i[s],t[l++]=1}};function V(t,e){let a=1/0,n=-1/0;const r=t.length;let i,s=0;if(e!=null)for(i=0;i<r;i++)e[i]&&(s=t[i],a=s<a?s:a,n=s>n?s:n);else for(i=0;i<r;i++)s=t[i],a=s<a?s:a,n=s>n?s:n;return new b(a,n)}d([x({json:{write:!0}})],g.prototype,"width",void 0),d([x({json:{write:!0}})],g.prototype,"height",void 0),d([x({json:{write:!0}})],g.prototype,"pixelType",void 0),d([M("pixelType")],g.prototype,"castPixelType",null),d([x({json:{write:!0}})],g.prototype,"validPixelCount",void 0),d([x({json:{write:!0}})],g.prototype,"mask",void 0),d([x({json:{write:!0}})],g.prototype,"maskIsAlpha",void 0),d([x({json:{write:!0}})],g.prototype,"pixels",void 0),d([x()],g.prototype,"premultiplyAlpha",void 0),d([x({json:{write:!0}})],g.prototype,"statistics",void 0),d([x({json:{write:!0}})],g.prototype,"depthCount",void 0),d([x({json:{write:!0}})],g.prototype,"noDataValues",void 0),d([x({json:{write:!0}})],g.prototype,"bandMasks",void 0),g=A=d([U("esri.layers.support.PixelBlock")],g);export{g as c,b as l};
