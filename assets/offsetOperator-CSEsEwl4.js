import{hG as c,aw as x}from"./index-C2z3vZ9k.js";import{w as G,j as d}from"./operatorOffset-DfQWb5gA.js";import{getSpatialReference as f,fromGeometry as y,toGeometry as u,fromGeometries as g}from"./jsonConverter-BvPb5ebA.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-BRAx5GYC.js";import"./Envelope2D-CLx0zf4a.js";import"./Point2D-l7nV1LsO.js";import"./Transformation2D-CVTPK6Pf.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function v(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const m=y(e),i=m.getSpatialReference();return u(G(m.getGeometry(),i,t,l[p],a,s),i)}function B(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const[m,i]=g(e);return d(m,i,t,l[p],a,s).map((j=>u(j,i))).filter(x)}export{v as execute,B as executeMany};
