import{hF as M,hu as T,hG as D,hr as _,hs as S,ht as L,hv as v,hw as k,cn as y,bE as N,hP as C,bU as A,b4 as h,hS as I,bf as p,fi as c,hO as G,hT as E,hU as b,hV as O,et as R,bP as x,hy as $,b8 as o,ba as r,eC as K,eD as F,hz as j,bb as z}from"./index-Bkom2Sdc.js";import{N as u,L as m,a as P,f as U,F as H,w as V}from"./KnowledgeGraphSublayer-DedRgnQQ.js";import{u as B}from"./knowledgeGraphService-DB1UMMrr.js";import"./constants-SxxbBSOD.js";import"./featureConversionUtils-nye7QKUe.js";import"./GraphQueryStreaming-n3LFFPjA.js";import"./FeatureStore-CKZD-lCZ.js";import"./BoundsStore-DWK49Ij3.js";import"./PooledRBush-zQSL8L9Y.js";import"./timeSupport-CXh2VZCm.js";import"./queryUtils-CyiURm7K.js";import"./optimizedFeatureQueryEngineAdapter-DTvxxVGs.js";import"./QueryEngine-wy14dKBu.js";import"./WhereClauseCache-Bv0Ws1nb.js";import"./WhereClause-GpJYBgPS.js";import"./QueryEngineCapabilities-DJC_YILC.js";import"./utils-C4ZnkFTC.js";import"./utils-CM17lTaw.js";import"./ClassBreaksDefinition-DLcEIyEO.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-9QRDBkMs.js";import"./clientSideDefaults-I-4nPcub.js";import"./networkEnums-CEsWoocs.js";import"./GPMessage-BWAP3eFt.js";let n=class extends M(T(D(_(S(L(v(k($)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(y.ofType(u)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(y.ofType(u)),this.type="knowledge-graph",this.url=null,this.addHandles(N(()=>this.layers.concat(this.tables),(i,t)=>this._handleSublayersChange(i,t),C))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){A(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await m(this)}async _fetchMetadata(){if(!this.url)throw new h("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await B(this.url);this.knowledgeGraph=e,this._forEachGraphType(i=>{i.name&&this._graphTypeLookup.set(i.name,i)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===7?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new P({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await U(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,I(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return p.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(p.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))});else if(!e.generateAllSublayers)throw new h("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach((s,d)=>{const l=this._graphTypeLookup.get(d);switch(l?.type){case"relationship":i.push(l);break;case"entity":e.push(l)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(i=>{e(i)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some(s=>s.objectType.name===a.typeName)===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),c(this.sublayerIdsCache,a.typeName,()=>new Set).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await m(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach(a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach(t=>{t.parentCompositeLayer=this;const a=e.find(s=>s.type===t.graphType&&s.name===t.graphTypeName);a&&(t.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(Y(this.inclusionModeDefinition).then(s=>{const d=q(a);e[i]=d.itemRelativeUrl,t.toAdd.push({resource:d,content:{type:"blob",blob:s},compress:!1,finish:l=>{this.definitionSetMap=l.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach(t=>{t.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(t=>{t.parent=this}),this.addHandles([e.on("after-add",({item:t})=>{t.parent=this}),e.on("after-remove",({item:t})=>{t.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=3&&e<7}readDefinitionSetMap(e,i,t){return G(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,d=a?.resources,l=E(a?.origin);if(!s||!d||l==null)return void(e&&(i[t]=b(e,a)));const{inclusionModeDefinition:g}=this;if(!g||this._displaysAllRecords(g))return void(this.definitionSetMap=null);const f=this.originIdOf("inclusionModeDefinition");if(f===7||this._namedTypesModified||l<f)this._saveUrlAsNewResource(i,t,d,s);else if(l===f&&e){const w=b(e,a);O(w)?this._saveUrlAsNewResource(i,t,d,s):i[t]=w}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):p.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}get sublayerCapabilities(){return H(this.knowledgeGraph)}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===0?this.originIdOf("layers")===0?this._createSublayers(e,this.layers,i=>!!i.geometryType):this._updateSublayers(e,this.layers):this.layers=new y,this.tables.length||this.originIdOf("layers")===0?this.originIdOf("tables")===0?this._createSublayers(e,this.tables,i=>!i.geometryType):this._updateSublayers(e,this.tables):this.tables=new y,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((i,t)=>{const a=c(this.sublayerIdsCache,t,()=>new Set);i.members?.forEach(s=>{a.add(s.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new h("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new h("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),c(this.sublayerIdsCache,e,()=>new Set);const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await m(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new h("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new h("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new h("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?p.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new h("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new h("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new h("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else p.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||p.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&p.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())c(this.sublayerIdsCache,e,()=>new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};o([r()],n.prototype,"dataManager",void 0),o([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],n.prototype,"definitionSetMap",void 0),o([K("definitionSetMap")],n.prototype,"readDefinitionSetMap",null),o([F("definitionSetMap")],n.prototype,"writeDefinitionSetMap",null),o([r()],n.prototype,"inclusionModeDefinition",null),o([r()],n.prototype,"knowledgeGraph",void 0),o([r({type:y.ofType(u),json:{write:{ignoreOrigin:!0}}})],n.prototype,"layers",void 0),o([r()],n.prototype,"memberEntityTypes",void 0),o([r()],n.prototype,"memberRelationshipTypes",void 0),o([r({type:["KnowledgeGraphLayer"]})],n.prototype,"operationalLayerType",void 0),o([r()],n.prototype,"sublayerCapabilities",null),o([r()],n.prototype,"sublayerIdsCache",void 0),o([r({type:y.ofType(u),json:{write:{ignoreOrigin:!0}}})],n.prototype,"tables",void 0),o([r({json:{read:!1}})],n.prototype,"type",void 0),o([r(j)],n.prototype,"url",void 0),n=o([z("esri.layers.KnowledgeGraphLayer")],n);const be=n;async function Y(e){const i=await V(e);return new Blob([i],{type:"application/x-protobuf"})}function q(e){const i=`definitionSetMap-${R()}.dat`,t=x("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{be as default};
