import{b8 as i,ba as a,jh as d,bb as l,bE as u,b4 as c,je as m,ff as y,f8 as h,gZ as _}from"./index-Bkom2Sdc.js";import{n as g,d as f}from"./FeatureLayerView2D-BQk-VVUC.js";import"./densifyCurvedGeometry-z0hd02Ge.js";import"./featureConversionUtils-nye7QKUe.js";import"./timeSupport-Dg2WyHuM.js";import"./AttributeBinsFeatureSet-BsDhvskh.js";import"./AttributeBinsQuery-DrwEkP8m.js";import"./queryUtils-CyiURm7K.js";import"./FixedIntervalBinParameters-9QRDBkMs.js";import"./LayerView2D-30FU1rxw.js";import"./Container-BUOpKgJS.js";import"./layerViewUtils-CKJQaxCu.js";import"./TechniqueInstance-CTCRZ9BY.js";import"./UpdateTracking2D-BAgVtftM.js";import"./Utils-BPwjYj-m.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-EJw5XZ2C.js";import"./BufferObject-CTARDp2h.js";import"./TileContainer-D8e9urlk.js";import"./WGLContainer-C7Fkis0r.js";import"./ProgramTemplate-D6UgULFC.js";import"./VertexArrayObject-BCHRBpsS.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-CsbdF0n4.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-BwfXXGpL.js";import"./GraphShaderModule-DIYQfoJR.js";import"./ShaderBuilder-DRCHXYJf.js";import"./utils-b1TOb6Y0.js";import"./constants-BBnGEY1d.js";import"./QueueProcessor-DqRCcjoo.js";import"./CircularArray-CujHzHWW.js";import"./FeatureIdInfo-BOt_yl7q.js";import"./FeatureMetadata-gkZZdSVQ.js";import"./SDFHelper-D_U_Lt1G.js";import"./constants-SxxbBSOD.js";import"./parquetUtils-BznT7Hbp.js";import"./locationUtils-BHxEwK9e.js";import"./parquet-B574Roxs.js";import"./popupUtils-C135Psdh.js";import"./LayerView-dsZyO1fP.js";import"./RefreshableLayerView-DU3KLifq.js";import"./highlightOptionsUtils-DdL2oWF3.js";const v=e=>{const r=e;let t=class extends r{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...n){super(...n),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(n){n?this._doPause():this._isUserPaused||this._doResume()}};return i([a()],t.prototype,"_isUserPaused",void 0),i([a({readOnly:!0})],t.prototype,"connectionStatus",null),i([a({type:d})],t.prototype,"filter",void 0),t=i([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends v(f){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,r){if(Array.isArray(e))return m(e.map(s=>this.on(s,r)));const t=["data-received","message-received"].includes(e);t&&this.getWorker().then(s=>s.streamMessenger.enableEvent(e,!0));const n=super.on(e,r),p=this;return y(()=>{n.remove(),t&&(p._workerProxy.closed||p.hasEventListener(e)||p.getWorker().then(s=>s.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,r){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const t=await this.getWorker();return g(t.features.executeQueryForLatestObservations(this._cleanUpQuery(e),r).then(n=>{const p=h.fromJSON(n);return p.features.forEach(s=>{s.layer=this.layer,s.sourceLayer=this.layer,s.origin=this.layer.graphicOrigin}),p}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,r){return(await super.queryObjectIds(e,r)).filter(_)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),r=this;return{...e,get container(){return r.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};i([a()],o.prototype,"pipelineConnectionStatus",void 0),i([a()],o.prototype,"pipelineErrorString",void 0),i([a({readOnly:!0})],o.prototype,"connectionError",null),i([a({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=i([l("esri.views.2d.layers.StreamLayerView2D")],o);const he=o;export{he as default};
