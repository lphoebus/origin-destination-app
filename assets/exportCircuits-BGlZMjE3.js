import{b6 as y,dP as f,b8 as r,ba as s,eC as v,bb as b,eG as x,eI as h,eH as j,bH as E}from"./index-Bkom2Sdc.js";import{t as $}from"./utils-0wFFVdYf.js";import"./applyEditsUtils-ZeHzgzgD.js";import"./MeshTransform-BjVAZmOC.js";import"./quat-B12ICwBr.js";import"./quatf64-aQ5IuZRd.js";import"./axisAngleDegrees-CiE1BNcG.js";import"./editingSupport-D_nDe5ru.js";var o;let t=o=class extends y{static from(e){return f(o,e)}constructor(e){super(e),this.circuits=null,this.moment=null,this.exceededTransferLimit=!1,this.serviceEdits=null}readServiceEdits(e,i){return $(e)}};r([s({json:{type:[Object]}})],t.prototype,"circuits",void 0),r([s({type:Date})],t.prototype,"moment",void 0),r([s({type:Boolean,json:{type:Boolean,write:!0}})],t.prototype,"exceededTransferLimit",void 0),r([s({type:[Object]})],t.prototype,"serviceEdits",void 0),r([v("serviceEdits")],t.prototype,"readServiceEdits",null),t=o=r([b("esri.rest.networks.circuits.support.ExportCircuitsResult")],t);async function L(e,i,p){const c=x(e),a=i.toJSON();i.circuits&&(a.circuits=JSON.stringify(i.circuits));const n={...a,f:"json"},m=h({...c.query,...n}),u=j(m,{...p,method:"post"}),d=`${c.path}/circuits/export`,{data:l}=await E(d,u);return t.fromJSON(l)}export{L as exportCircuits};
