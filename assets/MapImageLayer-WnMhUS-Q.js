const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-VRowAoYg.js","assets/utils-B1xfry1O.js","assets/index-Bkom2Sdc.js","assets/index-CkucmIUh.css","assets/originUtils-CUyL9ZOO.js","assets/saveUtils-DSRPRt58.js"])))=>i.map(i=>d[i]);
import{hF as S,hW as I,hu as w,hr as O,hs as _,ht as P,hv as T,hG as F,hx as L,hw as $,hX as E,hY as M,bD as R,aH as j,bU as N,hT as g,hZ as f,h_ as U,hq as q,fI as A,h$ as J,bH as y,bk as V,bN as k,i0 as z,i1 as D,b4 as b,fd as H,hy as W,b8 as a,ba as n,i2 as v,eC as G,eD as Z,hz as B,bb as C,i3 as K}from"./index-Bkom2Sdc.js";import{m as X,h as Y,l as Q}from"./SublayersOwner-BGko0-1r.js";import{t as ee}from"./imageBitmapUtils-RdyKwxam.js";import"./QueryTask-CnbIf4V8.js";import"./executeForIds-BzofPlMX.js";import"./featureConversionUtils-nye7QKUe.js";let r=class extends S(I(w(X(Y(O(_(P(T(F(L($(W)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new E({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new M({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=R(async(t,l,s)=>{const{save:p,saveAs:o}=await j(()=>import("./mapImageLayerUtils-VRowAoYg.js"),__vite__mapDeps([0,1,2,3,4,5]));switch(t){case 0:return p(this,l);case 1:return o(this,s,l)}})}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(N).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const l=t.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}get loaded(){return super.loaded}set portalItem(e){super.portalItem=e}writeSublayers(e,t,l,s){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let o=!1;const h=g(s.origin);let d;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(h===3){const i=this.createSublayersForOrigin("service").sublayers;o=f(p,i,2)}else if(h>3){const i=this.createSublayersForOrigin("portal-item");o=f(p,i.sublayers,g(i.origin)),d=i.originWithPartialOverrides}}const u=[],c={writeSublayerStructure:o,...s,minimumWritableOrigin:d};let m=o||this.hasVisibleLayersForOrigin(h);p.forEach(i=>{const x=i.write({},c);u.push(x),m=m||i.originOf("visible")==="user"}),u.some(i=>Object.keys(i).length>1)&&(t.layers=u),m&&(t.visibleLayers=p.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,t,l,s){const p=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=s?.scale||U({extent:e,width:t})*p;const o=this._exportImageParameters.toJSON(),h=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},d=e?.spatialReference,u=q(d);if(s?.scale&&e){const m=e.width/t*(A(e?.spatialReference)*J);o.dpi=s.scale/m}o.dpi*=p;const c={};if(s?.timeExtent){const{start:m,end:i}=s.timeExtent.toJSON();c.time=m&&i&&m===i?""+m:`${m??"null"},${i??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:u,imageSR:u,size:t+","+l,...o,...h,...c}}async fetchImage(e,t,l,s){const{data:p}=await this._fetchImage("image",e,t,l,s);return p}async fetchImageBitmap(e,t,l,s){const{data:p,url:o}=await this._fetchImage("blob",e,t,l,s);return ee(p,o,s?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await y(this.url,t),{extent:s,fullExtent:p,timeExtent:o}=l,h=s||p;return{fullExtent:h&&k.fromJSON(h),timeExtent:o&&V.fromJSON({start:o[0],end:o[1]})}}loadAll(){return z(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(0,e)}async saveAs(e,t){return this._debouncedSaveOperations(1,t,e)}serviceSupportsSpatialReference(e){return D(this,e)}async _fetchImage(e,t,l,s,p){const o={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,l,s,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:d}=await y(h,o);return{data:d,url:h}}catch(d){throw H(d)?d:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:l}=await y(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};a([n(v("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),a([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),a([n()],r.prototype,"dpi",void 0),a([n()],r.prototype,"elevationInfo",void 0),a([n()],r.prototype,"gdbVersion",void 0),a([n()],r.prototype,"imageFormat",void 0),a([G("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),a([n()],r.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),a([n(v("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),a([n()],r.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),a([Z("sublayers",{layers:{type:[Q]},visibleLayers:{type:[K]}})],r.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),a([n(B)],r.prototype,"url",void 0),r=a([C("esri.layers.MapImageLayer")],r);const ne=r;export{ne as default};
