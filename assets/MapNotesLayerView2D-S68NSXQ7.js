import{c7 as u,cn as f,bn as w,ff as c,bE as o,f$ as h,fA as y,b8 as _,bb as V}from"./index-Bkom2Sdc.js";import{b}from"./LayerView2D-30FU1rxw.js";import{i as m}from"./GraphicContainer-D9ivYpIc.js";import{O as g}from"./GraphicsView2D-Cudol1Qm.js";import{d as v}from"./LayerView-dsZyO1fP.js";import{r as C}from"./highlightOptionsUtils-DdL2oWF3.js";import"./Container-BUOpKgJS.js";import"./layerViewUtils-CKJQaxCu.js";import"./AGraphicContainer-qU2ctLWU.js";import"./TechniqueInstance-CTCRZ9BY.js";import"./UpdateTracking2D-BAgVtftM.js";import"./Utils-BPwjYj-m.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-EJw5XZ2C.js";import"./BufferObject-CTARDp2h.js";import"./TileContainer-D8e9urlk.js";import"./WGLContainer-C7Fkis0r.js";import"./ProgramTemplate-D6UgULFC.js";import"./VertexArrayObject-BCHRBpsS.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-CsbdF0n4.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-nye7QKUe.js";import"./FeatureCommandQueue-BwfXXGpL.js";import"./GraphShaderModule-DIYQfoJR.js";import"./ShaderBuilder-DRCHXYJf.js";import"./utils-b1TOb6Y0.js";import"./constants-BBnGEY1d.js";import"./QueueProcessor-DqRCcjoo.js";import"./AttributeStore-CS019e7y.js";import"./FeatureStoreQueryAdapter-xTIuWByO.js";import"./queryUtils-CyiURm7K.js";import"./timeSupport-CXh2VZCm.js";import"./FeatureMetadata-gkZZdSVQ.js";import"./normalizeUtilsSync-BY_tIBIr.js";import"./densifyCurvedGeometry-z0hd02Ge.js";import"./dehydratedFeatures-Bgz_yYu_.js";const d="sublayers",n="layerView";let l=class extends b(v){*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,r){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const t of s)!t.popupTemplate&&a.popupTemplate&&(t.popupTemplate=a.popupTemplate),t.sourceLayer=t.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i,r){let e;typeof i=="number"?e=[i]:i instanceof u?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(t=>t&&t.uid):f.isCollection(i)&&(e=i.map(t=>t&&t.uid).toArray());const s=e?.filter(w);if(!s?.length)return c();const a=C(r);return this._addHighlights(s,a),c(()=>this._removeHighlights(s,a))}update(i){for(const r of this.graphicsViews())r.processUpdate(i)}attach(){const i=this.view,r=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new m(this.view.featuresTilingScheme),t=new g({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:r,container:a});this._graphicsViewsFeatureCollectionMap.set(t,s),this.container.addChild(t.container),this.addHandles([o(()=>s.visible,p=>t.container.visible=p,h),o(()=>t.updating,()=>this.notifyChange("updating"),h)],n)}this._processHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.removeHandles(d)}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],r=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new m(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const t=new g({view:r,graphics:s.graphics,requestUpdateCallback:e,container:a});this.addHandles([s.on("graphic-update",t.graphicUpdateHandler),o(()=>s.visible,p=>t.container.visible=p,h),o(()=>t.updating,()=>this.notifyChange("updating"),h)],n),this.container.addChild(t.container),i.push(t)}this._graphicsViews=i,this._processHighlight()}_processHighlight(){const i=this._getHighlights();for(const r of this._graphicsViews||[])r.setHighlight(i);this._graphicsViewsFeatureCollectionMap?.forEach((r,e)=>{e.setHighlight(i)})}};l=_([V("esri.views.2d.layers.MapNotesLayerView2D")],l);const ni=l;export{ni as default};
