import{p as x,y as o,r as d,b as F,h as D,o as a,U as m,m as H,T as l,F as y,d as w,x as E,E as g,A as v,g as T,a as W,f as c,B as b,I as $,w as A,z as N,C as L,J as B,j as M,L as S,M as U,N as C,v as I,s as k,O as Q,V as Y,S as P,k as V,q as j,D as q,G as J,H as K,K as X,P as Z,Q as tt,R as et,W as rt}from"./BufferView-w_yOhrVp.js";import{e as _}from"./types-BKo2foNY.js";import{dv as u}from"./index-Bkom2Sdc.js";import{t as st}from"./VertexElementDescriptor-BLyltQyJ.js";import{n as it}from"./VertexAttributeLocations-BfZbt_DV.js";function nt(i,t=0){const e=i.stride;return Array.from(i.fields.keys()).map(r=>{const s=i.fields.get(r),n=s.constructor.ElementCount,h=ut(s.constructor.ElementType),z=s.offset,G=s.optional?.glNormalized??!1;return new st(r,n,h,z,e,G,t)})}function ut(i){switch(i){case"u8":return u.UNSIGNED_BYTE;case"u16":return u.UNSIGNED_SHORT;case"u32":return u.UNSIGNED_INT;case"i8":return u.BYTE;case"i16":return u.SHORT;case"i32":return u.INT;case"f16":return u.HALF_FLOAT;case"f32":return u.FLOAT;default:throw new Error("BufferType not supported in WebGL")}}class f{constructor(t,e){this.layout=t,this.buffer=typeof e=="number"?new ArrayBuffer(e*t.stride):e;for(const r of t.fields.keys()){const s=t.fields.get(r);this[r]=new s.constructor(this.buffer,s.offset,this.stride)}}get stride(){return this.layout.stride}get count(){return this.buffer.byteLength/this.stride}get byteLength(){return this.buffer.byteLength}getField(t,e){const r=this[t];return r&&r.elementCount===e.ElementCount&&r.elementType===e.ElementType?r:null}slice(t,e){return new f(this.layout,this.buffer.slice(t*this.stride,e*this.stride))}copyFrom(t,e=0,r=0,s=t.count){const n=this.stride;if(n%4==0){const h=new Uint32Array(t.buffer,e*n,s*n/4);new Uint32Array(this.buffer,r*n,s*n/4).set(h)}else{const h=new Uint8Array(t.buffer,e*n,s*n);new Uint8Array(this.buffer,r*n,s*n).set(h)}return this}get usedMemory(){return this.byteLength}dispose(){}}class p{constructor(t){this._stride=0,this._fields=new Map,t&&(this._stride=t.stride,t.fields.forEach(e=>this._fields.set(e[0],{...e[1],constructor:dt(e[1].constructor)})))}freeze(){return this}get locations(){return it(nt(this))}vec2f16(t,e){return this._appendField(t,d?x:o,e),this}vec2f(t,e){return this._appendField(t,o,e),this}vec2f64(t,e){return this._appendField(t,F,e),this}vec3f16(t,e){return this._appendField(t,d?D:a,e),this}vec3f(t,e){return this._appendField(t,a,e),this}vec3f64(t,e){return this._appendField(t,m,e),this}vec4f16(t,e){return this._appendField(t,d?H:l,e),this}vec4f(t,e){return this._appendField(t,l,e),this}vec4f64(t,e){return this._appendField(t,y,e),this}mat3f(t,e){return this._appendField(t,w,e),this}mat3f64(t,e){return this._appendField(t,E,e),this}mat4f(t,e){return this._appendField(t,g,e),this}mat4f64(t,e){return this._appendField(t,v,e),this}vec4u8(t,e){return this._appendField(t,T,e),this}f16(t,e){return this._appendField(t,d?W:c,e),this}f32(t,e){return this._appendField(t,c,e),this}f64(t,e){return this._appendField(t,b,e),this}u8(t,e){return this._appendField(t,$,e),this}u16(t,e){return this._appendField(t,A,e),this}i8(t,e){return this._appendField(t,N,e),this}vec2i8(t,e){return this._appendField(t,L,e),this}vec2i16(t,e){return this._appendField(t,B,e),this}vec2u8(t,e){return this._appendField(t,M,e),this}vec2u16(t,e){return this._appendField(t,S,e),this}vec4u16(t,e){return this._appendField(t,U,e),this}vec4i16(t,e){return this._appendField(t,C,e),this}u32(t,e){return this._appendField(t,I,e),this}_appendField(t,e,r){this._fields.has(t)&&k(!1,`${t} already added to vertex buffer layout`);const s=e.ElementCount*_(e.ElementType),n=this._stride;this._fields.set(t,{constructor:e,size:s,offset:n,optional:r}),this._alignFields()}_alignFields(){let t=0,e=1;this._fields.forEach(r=>{const s=_(r.constructor.ElementType);t=Math.floor((t+s-1)/s)*s,r.offset=t,t+=r.size,e=Math.max(e,s)}),t=Math.floor((t+e-1)/e)*e,this._stride=t}createBuffer(t){return new f(this,t)}createView(t){return new f(this,t)}clone(){const t=new p;return t._stride=this._stride,t._fields=new Map,this._fields.forEach((e,r)=>t._fields.set(r,e)),t.BufferType=this.BufferType,t}get stride(){return this._stride}get fields(){return this._fields}}function pt(){return new p}class _t{constructor(t){this.fields=new Array,t.fields.forEach((e,r)=>{const s={...e,constructor:O(e.constructor)};this.fields.push([r,s])}),this.stride=t.stride}}const ht=[c,o,a,l,w,g,b,F,m,y,E,v,$,M,Q,T,A,S,Y,U,I,P,V,j,N,L,q,J,K,B,X,C,Z,tt,et,rt];function O(i){return`${i.ElementType}_${i.ElementCount}`}function dt(i){return R.get(i)}const R=new Map;ht.forEach(i=>R.set(O(i),i));export{p as P,pt as Q,_t as R,nt as t};
