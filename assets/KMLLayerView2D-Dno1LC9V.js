import{b6 as B,bN as j,b8 as d,ba as g,bb as z,l0 as F,a$ as U,fP as T,fQ as W,fR as G,bH as H,fp as P,cn as O,bE as K,l1 as Y,fz as I,io as J,gh as q,aY as A,l2 as E,eG as Q,i5 as X,l3 as Z}from"./index-Bkom2Sdc.js";import{b as R,g as tt,d as et}from"./kmlUtils-D-NhrYYd.js";import{x as it,g as at,w as st}from"./BitmapTechnique-C9b_HJ2h.js";import{s as rt}from"./BitmapContainer-3O2xpFpr.js";import{b as ot}from"./LayerView2D-30FU1rxw.js";import{i as k}from"./GraphicContainer-D9ivYpIc.js";import{O as M}from"./GraphicsView2D-Cudol1Qm.js";import{d as nt}from"./LayerView-dsZyO1fP.js";import{execute as lt}from"./projectOperator-C4dU6_F4.js";import{C as ht,r as pt,j as mt}from"./rasterProjectionHelper-De1k5S3R.js";import{F as ct,a as dt,s as ut}from"./RenderingContext-BJbVVXEe.js";import{m as gt}from"./FramebufferObject-EJw5XZ2C.js";import{i as _t}from"./rasterUtils-DVBUEgaE.js";import"./Container-BUOpKgJS.js";import"./GraphShaderModule-DIYQfoJR.js";import"./BufferObject-CTARDp2h.js";import"./ProgramTemplate-D6UgULFC.js";import"./ShaderBuilder-DRCHXYJf.js";import"./bitmapUtils-BLxWNiSq.js";import"./WGLContainer-C7Fkis0r.js";import"./Utils-BPwjYj-m.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./VertexArrayObject-BCHRBpsS.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-CsbdF0n4.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-nye7QKUe.js";import"./layerViewUtils-CKJQaxCu.js";import"./AGraphicContainer-qU2ctLWU.js";import"./TechniqueInstance-CTCRZ9BY.js";import"./UpdateTracking2D-BAgVtftM.js";import"./TileContainer-D8e9urlk.js";import"./FeatureCommandQueue-BwfXXGpL.js";import"./utils-b1TOb6Y0.js";import"./constants-BBnGEY1d.js";import"./QueueProcessor-DqRCcjoo.js";import"./AttributeStore-CS019e7y.js";import"./FeatureStoreQueryAdapter-xTIuWByO.js";import"./queryUtils-CyiURm7K.js";import"./timeSupport-CXh2VZCm.js";import"./FeatureMetadata-gkZZdSVQ.js";import"./normalizeUtilsSync-BY_tIBIr.js";import"./densifyCurvedGeometry-z0hd02Ge.js";import"./dehydratedFeatures-Bgz_yYu_.js";import"./operatorProject-CTP6o28l.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./webglDeps-Duc1MSxh.js";import"./renderState-CKc66y4x.js";import"./glsl-B5bJgrnA.js";import"./testSVGPremultipliedAlpha-CxsgdSKj.js";let u=class extends B{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new j}};d([g({nonNullable:!0,json:{write:!0}})],u.prototype,"id",void 0),d([g({nonNullable:!0,json:{write:!0}})],u.prototype,"rotation",void 0),d([g({nonNullable:!0,json:{write:!0}})],u.prototype,"href",void 0),d([g({type:j,nonNullable:!0,json:{write:!0}})],u.prototype,"extent",void 0),u=d([z("esri.layers.support.KMLMapImage")],u);const p=class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const r=document.createElement("canvas").getContext("webgl2");r.getExtension("OES_texture_float"),this._rctx=new ct(r,new F)}this._quad=new dt(this._rctx,[0,0,1,0,0,1,1,1]);const a=ut("raster/reproject","raster/reproject",{applyProjection:!0,bilinear:!1,bicubic:!1});this._program=this._rctx.programCache.acquire(a.vertexShader,a.fragmentShader,this._quad.locations),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1)}reprojectTexture(t,a,r=!1){const i=lt(t.extent,a),s=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:l,y:h}=ht(s,a,t.extent);let n=(l+h)/2;const o=Math.round((i.xmax-i.xmin)/n),_=Math.round((i.ymax-i.ymin)/n);n=(i.width/o+i.height/_)/2;const D=new U({x:n,y:n,spatialReference:i.spatialReference}),f=pt({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),y=_t(this._rctx,f),b=new T(o,_);b.wrapMode=33071;const m=new gt(this._rctx,b);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,o,_),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",o,_),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),r){const{width:c,height:C}=m,w=new ImageData(c??0,C??0);m.readPixels(0,0,c??0,C??0,6408,W.UNSIGNED_BYTE,w.data);const N=m.detachColorTexture();return m.dispose(),{texture:N,extent:i,imageData:w}}const S=m.detachColorTexture();return m.dispose(),{texture:S,extent:i}}reprojectBitmapData(t,a){const r=it(t.bitmapData)?at(t.bitmapData):t.bitmapData,i=new T(t.bitmapData.width,t.bitmapData.height);i.wrapMode=33071;const s=new G(this._rctx,i,r),l=this.reprojectTexture({texture:s,extent:t.extent},a,!0);l.texture.dispose();const h=document.createElement("canvas"),n=l.imageData;return h.width=n.width,h.height=n.height,h.getContext("2d").putImageData(n,0,0),{bitmapData:h,extent:l.extent}}async loadAndReprojectBitmapData(t,a,r){const[i]=await Promise.all([H(t,{responseType:"image"}).then(o=>o.data),mt()]),s=document.createElement("canvas");s.width=i.width,s.height=i.height;const l=s.getContext("2d");l.drawImage(i,0,0);const h=l.getImageData(0,0,s.width,s.height);if(a.spatialReference.equals(r))return{bitmapData:h,extent:a};const n=this.reprojectBitmapData({bitmapData:h,extent:a},r);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}};p._instanceRefCount=0;let $=p;class L{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let x=class extends ot(nt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new L,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new O}async hitTest(e,t){const a=this.layer;return[this._pointsView?.hitTest(e),this._polylinesView?.hitTest(e),this._polygonsView?.hitTest(e)].flat().filter(Boolean).map(r=>(r.layer=a,r.sourceLayer=a,{type:"graphic",graphic:r,layer:a,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new M({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new k(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new M({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new k(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new M({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new k(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,e=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of e){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new $}detach(){this._fetchController=Y(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,e.extent,this.view.spatialReference).then(t=>{const a=new st(t.bitmapData);a.x=t.extent.xmin,a.y=t.extent.ymax,a.resolution=t.extent.width/t.bitmapData.width,a.rotation=e.rotation,this._mapImageContainer.addChild(a),this._bitmapIndex.set(e,a)})}async _getViewDependentUrl(e,t){const{viewFormat:a,viewBoundScale:r,httpQuery:i}=e;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let s;if(await J(),r!=null&&r!==1){const c=new j(t.extent);c.expand(r),s=c}else s=t.extent;s=q(s,A.WGS84);const l=q(s,A.WebMercator),h=s.xmin,n=s.xmax,o=s.ymin,_=s.ymax,D=t.size[0]*t.pixelRatio,f=t.size[1]*t.pixelRatio,y=Math.max(l.width,l.height),b={"[bboxWest]":h.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":o.toString(),"[bboxNorth]":_.toString(),"[lookatLon]":s.center.x.toString(),"[lookatLat]":s.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":s.center.x.toString(),"[lookatTerrainLat]":s.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":s.center.x.toString(),"[cameraLat]":s.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":f.toString(),"[terrainEnabled]":"0","[clientVersion]":Z,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const C in c){let w;for(w in b)c[C]=c[C].replace(w,b[w])}},V=E(a);m(V);let v={};i!=null&&(v=E(i),m(v));const S=Q(e.href);return S.query={...S.query,...V,...v},`${S.path}?${X(V)}`}return e.href}async _fetchService(e){const t=new L;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll();const e=(t,a)=>{t.addMany(a.filter(r=>this._isSublayerVisible(r.sublayerId)).map(({item:r})=>r))};e(this.allVisiblePoints,this._kmlVisualData.allPoints),e(this.allVisiblePolylines,this._kmlVisualData.allPolylines),e(this.allVisiblePolygons,this._kmlVisualData.allPolygons),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,a){return this._fetchParsedKML(e,a).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const s=await R(i,"points",this.layer,i.id),l=await R(i,"polylines",this.layer,i.id),h=await R(i,"polygons",this.layer,i.id),n=i.mapImages?.map(o=>u.fromJSON(o))??[];if(t.allPoints.push(...s.map(o=>({item:o,sublayerId:i.id}))),t.allPolylines.push(...l.map(o=>({item:o,sublayerId:i.id}))),t.allPolygons.push(...h.map(o=>({item:o,sublayerId:i.id}))),t.allMapImages.push(...n.map(o=>({item:o,sublayerId:i.id}))),i.networkLink){const o=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(o,t,a)}}})}_fetchParsedKML(e,t){return tt(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>et(a.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};d([g()],x.prototype,"_pointsView",void 0),d([g()],x.prototype,"_polylinesView",void 0),d([g()],x.prototype,"_polygonsView",void 0),x=d([z("esri.views.2d.layers.KMLLayerView2D")],x);const ge=x;export{ge as default};
